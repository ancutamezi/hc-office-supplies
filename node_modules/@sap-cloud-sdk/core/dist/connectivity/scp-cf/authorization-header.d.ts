import type { ODataRequest, ODataRequestConfig } from '../../odata-common';
import { Destination } from './destination';
/**
 * @deprecated Since v1.20.0. Use [[buildAuthorizationHeaders]] instead.
 * Adds authorization headers for a given ODataRequest to existing headers.
 * @param request - an ODataRequest.
 * @param headers - The headers that should be added to.
 * @returns The provided headers with the new authorization headers.
 */
export declare function addAuthorizationHeader<RequestT extends ODataRequestConfig>(request: ODataRequest<RequestT>, headers: Record<string, string>): Promise<Record<string, string>>;
export declare function getAuthHeaders(destination: Destination, customHeaders?: Record<string, any>): Promise<AuthenticationHeaders>;
/**
 * @deprecated Since v1.20.0. Use [[buildAuthorizationHeaders]] instead.
 * Adds authorization headers for a given destination to existing headers.
 * @param destination - A destination.
 * @param headers - The headers that should be added to.
 * @returns The provided headers with the new authorization headers.
 */
export declare function buildAndAddAuthorizationHeader(destination: Destination): (headers: Record<string, any>) => Promise<Record<string, string>>;
export declare function basicHeader(username: string, password: string): string;
interface AuthenticationHeaderCloud {
    authorization: string;
}
interface AuthenticationHeaderOnPrem {
    'SAP-Connectivity-Authentication': string;
}
interface AuthenticationHeaders {
    authorization?: string;
    'Proxy-Authorization'?: string;
    'SAP-Connectivity-Authentication'?: string;
}
export declare function buildAuthorizationHeaders(destination: Destination, customAuthHeader?: AuthenticationHeaderCloud | AuthenticationHeaderOnPrem): Promise<AuthenticationHeaders>;
export {};
//# sourceMappingURL=authorization-header.d.ts.map