"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.destinationServiceCache = void 0;
var cache_1 = require("../cache");
var destination_cache_1 = require("./destination-cache");
var DestinationServiceCache = function (cache) { return ({
    retrieveDestinationsFromCache: function (targetUrl, decodedJwt, isolationStrategy) {
        return cache.get(getDestinationCacheKeyService(targetUrl, decodedJwt, isolationStrategy));
    },
    cacheRetrievedDestinations: function (destinationServiceUri, decodedJwt, destinations, isolationStrategy) {
        var key = getDestinationCacheKeyService(destinationServiceUri, decodedJwt, isolationStrategy);
        cache.set(key, destinations);
    },
    clear: function () {
        cache.clear();
    },
    getCacheInstance: function () { return cache; }
}); };
// The destination service URI contains the destination name (single request) or the instance/subaccount information for get all requests.
// The used isolation strategy is either `Tenant` or `Tenant_User` because we want to get results for subaccount and provider tenants which rules out no-isolation or user isolation.
function getDestinationCacheKeyService(destinationServiceUri, decodedJwt, isolationStrategy) {
    var usedIsolationStrategy = isolationStrategy === cache_1.IsolationStrategy.Tenant ||
        isolationStrategy === cache_1.IsolationStrategy.Tenant_User
        ? isolationStrategy
        : cache_1.IsolationStrategy.Tenant;
    return (0, destination_cache_1.getDestinationCacheKeyStrict)(decodedJwt, destinationServiceUri, usedIsolationStrategy);
}
exports.destinationServiceCache = DestinationServiceCache(new cache_1.Cache({ hours: 0, minutes: 5, seconds: 0 }));
//# sourceMappingURL=destination-service-cache.js.map