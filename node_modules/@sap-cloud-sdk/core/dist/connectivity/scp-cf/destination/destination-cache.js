"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.destinationCache = exports.getDestinationCacheKey = exports.getDestinationCacheKeyStrict = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var moment_1 = __importDefault(require("moment"));
var cache_1 = require("../cache");
var tenant_1 = require("../tenant");
var user_1 = require("../user");
var logger = (0, util_1.createLogger)({
    package: 'core',
    messageContext: 'destination-cache'
});
var DestinationCache = function (cache) { return ({
    retrieveDestinationFromCache: function (decodedJwt, name, isolation) {
        return cache.get(getDestinationCacheKeyStrict(decodedJwt, name, isolation));
    },
    cacheRetrievedDestination: function (decodedJwt, destination, isolation) {
        cacheRetrievedDestination(decodedJwt, destination, isolation, cache);
    },
    cacheRetrievedDestinations: function (decodedJwt, retrievedDestinations, isolation) {
        retrievedDestinations.subaccount.forEach(function (dest) {
            return cacheRetrievedDestination(decodedJwt, dest, isolation, cache);
        });
        retrievedDestinations.instance.forEach(function (dest) {
            return cacheRetrievedDestination(decodedJwt, dest, isolation, cache);
        });
    },
    clear: function () {
        cache.clear();
    },
    getCacheInstance: function () { return cache; }
}); };
/**
 * Calculates a cache key based on the jwt and destination name for the given isolation strategy.
 * Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy [[IsolationStrategy.Tenant]]
 * will not result in a cache hit for a destination that has been cached with strategy [[IsolationStrategy.Tenant_User]].
 * @param decodedJwt - The decoded JWT of the current request.
 * @param destinationName - The name of the destination.
 * @param isolationStrategy - The strategy used to isolate cache entries.
 * @returns The cache key.
 * @hidden
 */
function getDestinationCacheKeyStrict(decodedJwt, destinationName, isolationStrategy) {
    if (isolationStrategy === void 0) { isolationStrategy = cache_1.IsolationStrategy.Tenant_User; }
    var tenant = (0, tenant_1.tenantId)(decodedJwt);
    var user = (0, user_1.userId)(decodedJwt);
    switch (isolationStrategy) {
        case cache_1.IsolationStrategy.No_Isolation:
            return "::".concat(destinationName);
        case cache_1.IsolationStrategy.Tenant:
            if (tenant) {
                return "".concat(tenant, "::").concat(destinationName);
            }
            logger.warn("Cannot get cache key. Isolation strategy ".concat(isolationStrategy, " is used, but tenant id is undefined."));
            return;
        case cache_1.IsolationStrategy.User:
            if (user) {
                return ":".concat(user, ":").concat(destinationName);
            }
            logger.warn("Cannot get cache key. Isolation strategy ".concat(isolationStrategy, " is used, but user id is undefined."));
            return;
        case cache_1.IsolationStrategy.Tenant_User:
            if (tenant && user) {
                return "".concat(user, ":").concat(tenant, ":").concat(destinationName);
            }
            logger.warn("Cannot get cache key. Isolation strategy ".concat(isolationStrategy, " is used, but tenant id or user id is undefined."));
            return;
        default:
            logger.warn("Cannot get cache key. Isolation strategy ".concat(isolationStrategy, " is not supported."));
            return;
    }
}
exports.getDestinationCacheKeyStrict = getDestinationCacheKeyStrict;
/**
 * @deprecated Since v1.52.0. Use [[getDestinationCacheKeyStrict]] instead.
 * Calculates a cache key based on the jwt and destination name for the given isolation strategy.
 * Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy [[IsolationStrategy.Tenant]]
 * will not result in a cache hit for a destination that has been cached with strategy [[IsolationStrategy.Tenant_User]].
 * @param decodedJwt - The decoded JWT of the current request.
 * @param destinationName - The name of the destination.
 * @param isolationStrategy - The strategy used to isolate cache entries.
 * @returns The cache key.
 * @hidden
 */
function getDestinationCacheKey(decodedJwt, destinationName, isolationStrategy) {
    switch (isolationStrategy) {
        case cache_1.IsolationStrategy.No_Isolation:
            return "::".concat(destinationName);
        case cache_1.IsolationStrategy.Tenant_User:
            return "".concat((0, tenant_1.tenantId)(decodedJwt), ":").concat((0, user_1.userId)(decodedJwt), ":").concat(destinationName);
        case cache_1.IsolationStrategy.User:
            return ":".concat((0, user_1.userId)(decodedJwt), ":").concat(destinationName);
        default:
            return "".concat((0, tenant_1.tenantId)(decodedJwt), "::").concat(destinationName);
    }
}
exports.getDestinationCacheKey = getDestinationCacheKey;
function cacheRetrievedDestination(decodedJwt, destination, isolation, cache) {
    var _a;
    if (!destination.name) {
        throw new Error('The destination name is undefined.');
    }
    var key = getDestinationCacheKeyStrict(decodedJwt, destination.name, isolation);
    var expiresIn = (_a = (0, util_1.first)(destination.authTokens || [])) === null || _a === void 0 ? void 0 : _a.expiresIn;
    var expirationTime = expiresIn
        ? (0, moment_1.default)().add(expiresIn, 'second').unix() * 1000
        : undefined;
    cache.set(key, destination, expirationTime);
}
exports.destinationCache = DestinationCache(new cache_1.Cache({ hours: 0, minutes: 5, seconds: 0 }));
//# sourceMappingURL=destination-cache.js.map