"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeHeaders = exports.replaceDuplicateKeys = exports.filterNullishValues = exports.getHeaderValue = exports.getHeaders = exports.getHeader = exports.toSanitizedHeaderObject = void 0;
var util_1 = require("@sap-cloud-sdk/util");
/**
 * @deprecated Since v1.32.0. Use [[toSanitizedObject]] instead.
 * Create a header object based on the given key and value if neither key nor value are nullish.
 * @param key - Name of the header.
 * @param value - Value of the header.
 * @returns - An object containing the given key and value of an empty object.
 */
function toSanitizedHeaderObject(key, value) {
    return (0, util_1.toSanitizedObject)(key, value);
}
exports.toSanitizedHeaderObject = toSanitizedHeaderObject;
/**
 * @deprecated Since v1.32.0. Use [[pickIgnoreCase]] instead.
 *
 * Find a header in a given header object, if available, independent of the case (lower / upper).
 * @param key - Name of the header to be found.
 * @param headers - Header object to be searched for given key.
 * @returns - An object containing the given key (and value) in its original case, as found in `headers` or an empty object if not found.
 */
function getHeader(key, headers) {
    if (headers === void 0) { headers = {}; }
    return (0, util_1.pickIgnoreCase)(headers, key);
}
exports.getHeader = getHeader;
/**
 * @deprecated Since v1.32.0. Use [[pickIgnoreCase]] instead.
 *
 * Find headers in a given header object, if available, independent of the case (lower / upper).
 * @param keys - Name of the header to be found.
 * @param headers - Header object to be searched for given key.
 * @returns - An object containing the given keys (and values) in its original case, as found in `headers` or an empty object if not found.
 */
function getHeaders(keys, headers) {
    if (headers === void 0) { headers = {}; }
    return util_1.pickIgnoreCase.apply(void 0, __spreadArray([headers], keys, false));
}
exports.getHeaders = getHeaders;
/**
 * @deprecated Since v1.32.0. Use [[pickValueIgnoreCase]] instead.
 *
 * Get the value of a header based on the given key, independent of the case (lower / upper).
 * @param key - Name of the header to be found.
 * @param headers - Header object to be searched for given key.
 * @returns The value of the header with the given key or `undefined`.
 */
function getHeaderValue(key, headers) {
    if (headers === void 0) { headers = {}; }
    return (0, util_1.pickValueIgnoreCase)(headers, key);
}
exports.getHeaderValue = getHeaderValue;
/**
 * @deprecated Since v1.32.0. Use [[pickNonNullish]] instead.
 *
 * Filter headers that have nullish values.
 * @param headers - A header object to be filtered.
 * @returns - A filtered header object containing only headers with non-nullish values.
 */
function filterNullishValues(headers) {
    if (headers === void 0) { headers = {}; }
    return (0, util_1.pickNonNullish)(headers);
}
exports.filterNullishValues = filterNullishValues;
/**
 * @deprecated Since v1.32.0. Use [[mergeLeftIgnoreCase]] instead.
 *
 * Create a header object by replacing headers that are set as custom headers.
 * @param headers - A base header object that contains the headers that will be compared with `customHeaders`.
 * @param customHeaders - A header object to be compared with headers. Only headers present in `headers` will be compared.
 * @returns - An object containing all keys from the original `headers` object, where headers present in the `customHeaders` are replaced. Note that the case (upper / lower) used by `customHeaders` will be used.
 */
function replaceDuplicateKeys(headers, customHeaders) {
    if (headers === void 0) { headers = {}; }
    if (customHeaders === void 0) { customHeaders = {}; }
    return (0, util_1.mergeLeftIgnoreCase)(headers, customHeaders);
}
exports.replaceDuplicateKeys = replaceDuplicateKeys;
/**
 * @deprecated Since v1.32.0. Use [[mergeIgnoreCase]] instead.
 *
 * Create a header object by merging two header objects, where the custom headers take precedence.
 * @param headers - A base header object that contains the headers that will be compared with `customHeaders`.
 * @param customHeaders - A header object to be compared with headers. Only headers present in `headers` will be compared.
 * @returns - An object containing all keys from both the header objects, where headers present in the `customHeaders` are replaced. Note that the case (upper / lower) used by `customHeaders` will be used.
 */
function mergeHeaders(headers, customHeaders) {
    if (headers === void 0) { headers = {}; }
    if (customHeaders === void 0) { customHeaders = {}; }
    return (0, util_1.mergeIgnoreCase)(headers, customHeaders);
}
exports.mergeHeaders = mergeHeaders;
//# sourceMappingURL=header-util.js.map