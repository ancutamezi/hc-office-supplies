import { Constructable, UpdateRequestBuilder as UpdateRequestBuilderBase } from '../../odata-common';
import { Entity } from '../entity';
import { DestinationOptions, Destination, DestinationNameAndJwt } from '../../connectivity/scp-cf';
import { HttpResponse } from '../../http-client';
export declare class UpdateRequestBuilder<EntityT extends Entity> extends UpdateRequestBuilderBase<EntityT> {
    readonly _entityConstructor: Constructable<EntityT>;
    readonly _entity: EntityT;
    /**
     * Creates an instance of UpdateRequestBuilder.
     * @param _entityConstructor - Constructor type of the entity to be updated
     * @param _entity - Entity to be updated
     */
    constructor(_entityConstructor: Constructable<EntityT>, _entity: EntityT);
    /**
     * Executes the query.
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to the entity once it was updated
     */
    execute(destination: Destination | DestinationNameAndJwt, options?: DestinationOptions): Promise<EntityT>;
    /**
     * Execute request and return an [[HttpResponse]].
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to an [[HttpResponse]].
     */
    executeRaw(destination: Destination | DestinationNameAndJwt, options?: DestinationOptions): Promise<HttpResponse>;
}
export { UpdateRequestBuilder as UpdateRequestBuilderV4 };
//# sourceMappingURL=update-request-builder.d.ts.map