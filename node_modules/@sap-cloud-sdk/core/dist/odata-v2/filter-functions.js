"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterFunctionsV2 = exports.filterFunctions = exports.substring = exports.length = exports.replace = exports.substringOf = void 0;
var odata_common_1 = require("../odata-common");
/* String Functions */
/**
 * Build a filter function to test whether a string is a substring of the other. Evaluates to boolean.
 * @param substr - The substring to test for. This can either be a string, a reference to a field or another filter function.
 * @param str - The string to test. This can either be a string, a reference to a field or another filter function.
 *
 * @returns The newly created filter function
 */
function substringOf(substr, str) {
    return (0, odata_common_1.filterFunction)('substringof', 'boolean', substr, str);
}
exports.substringOf = substringOf;
/**
 * Build a filter function to replace the occurrence of a search string with another string. Evaluates to string.
 * @param str - The string to get the index from. This can either be a string, a reference to a field or another filter function.
 * @param searchStr - The substring to get the index for. This can either be a string, a reference to a field or another filter function.
 * @param replaceStr - The substring to get the index for. This can either be a string, a reference to a field or another filter function.
 *
 * @returns The newly created filter function
 */
function replace(str, searchStr, replaceStr) {
    return (0, odata_common_1.filterFunction)('replace', 'string', str, searchStr, replaceStr);
}
exports.replace = replace;
/**
 *  @hidden
 * Export length filter function for backwards compatibility.
 */
exports.length = odata_common_1.filterFunctions.length;
/**
 *  @hidden
 * Export substring filter function for backwards compatibility.
 */
exports.substring = odata_common_1.filterFunctions.substring;
/**
 * OData v2 specific filter functions
 */
exports.filterFunctions = __assign(__assign({}, odata_common_1.filterFunctions), { substringOf: substringOf, replace: replace });
exports.filterFunctionsV2 = exports.filterFunctions;
//# sourceMappingURL=filter-functions.js.map