"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateRequestBuilderV2 = exports.UpdateRequestBuilder = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var odata_common_1 = require("../../odata-common");
var entity_serializer_1 = require("../entity-serializer");
var uri_conversion_1 = require("../uri-conversion");
var extract_odata_etag_1 = require("../extract-odata-etag");
var logger = (0, util_1.createLogger)({
    package: 'core',
    messageContext: 'update-request-builder-v2'
});
/**
 * Create OData query to update an entity.
 * @typeparam EntityT - Type of the entity to be updated
 */
var UpdateRequestBuilder = /** @class */ (function (_super) {
    __extends(UpdateRequestBuilder, _super);
    /**
     * Creates an instance of UpdateRequestBuilder.
     * @param _entityConstructor - Constructor type of the entity to be updated
     * @param _entity - Entity to be updated
     */
    function UpdateRequestBuilder(_entityConstructor, _entity) {
        var _this = _super.call(this, _entityConstructor, _entity, uri_conversion_1.oDataUri, entity_serializer_1.entitySerializer, extract_odata_etag_1.extractODataEtag, removeNavPropsAndComplexTypes) || this;
        _this._entityConstructor = _entityConstructor;
        _this._entity = _entity;
        return _this;
    }
    /**
     * Executes the query.
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to the entity once it was updated
     */
    UpdateRequestBuilder.prototype.execute = function (destination, options) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isEmptyObject(this.requestConfig.payload)) {
                            return [2 /*return*/, this._entity];
                        }
                        return [4 /*yield*/, this.build(destination, options)];
                    case 1:
                        request = _a.sent();
                        warnIfNavigation(request, this._entity, this._entityConstructor);
                        return [2 /*return*/, _super.prototype.executeRequest.call(this, request)];
                }
            });
        });
    };
    /**
     * Execute request and return an [[HttpResponse]]. The request is only executed if some properties of the entity are modified.
     * @param destination - Destination to execute the request against
     * @param options - Options to employ when fetching destinations
     * @returns A promise resolving to an [[HttpResponse]] when the request is executed or `undefined` otherwise.
     */
    UpdateRequestBuilder.prototype.executeRaw = function (destination, options) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isEmptyObject(this.requestConfig.payload)) {
                            logger.info('The request is not executed because no properties of the entity are modified.');
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.build(destination, options)];
                    case 1:
                        request = _a.sent();
                        warnIfNavigation(request, this._entity, this._entityConstructor);
                        return [2 /*return*/, _super.prototype.executeRequestRaw.call(this, request)];
                }
            });
        });
    };
    return UpdateRequestBuilder;
}(odata_common_1.UpdateRequestBuilder));
exports.UpdateRequestBuilder = UpdateRequestBuilder;
exports.UpdateRequestBuilderV2 = UpdateRequestBuilder;
/*
 * In case the entity contains a navigation to a different entity a warning is printed.
 */
function warnIfNavigation(request, entity, entityConstructor) {
    var setNavigationProperties = Object.keys(entity).filter(function (key) {
        return !(0, util_1.isNullish)(entity[key]) && (0, odata_common_1.isNavigationProperty)(key, entityConstructor);
    });
    if (setNavigationProperties.length) {
        logger.warn("The navigation properties ".concat(setNavigationProperties, " have been included in your update request. Update of navigation properties is not supported and will be ignored."));
    }
    return request;
}
function removeNavPropsAndComplexTypes(body) {
    return (0, odata_common_1.removePropertyOnCondition)(function (_a) {
        var val = _a[1];
        return typeof val === 'object';
    }, body);
}
//# sourceMappingURL=update-request-builder.js.map