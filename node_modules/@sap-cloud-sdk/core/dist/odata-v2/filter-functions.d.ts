import { Field, StringFilterFunction, BooleanFilterFunction } from '../odata-common';
import { Entity } from './entity';
/**
 * Build a filter function to test whether a string is a substring of the other. Evaluates to boolean.
 * @param substr - The substring to test for. This can either be a string, a reference to a field or another filter function.
 * @param str - The string to test. This can either be a string, a reference to a field or another filter function.
 *
 * @returns The newly created filter function
 */
export declare function substringOf<EntityT extends Entity>(substr: string | Field<EntityT, boolean, boolean> | StringFilterFunction<EntityT>, str: string | Field<EntityT, boolean, boolean> | StringFilterFunction<EntityT>): BooleanFilterFunction<EntityT>;
/**
 * Build a filter function to replace the occurrence of a search string with another string. Evaluates to string.
 * @param str - The string to get the index from. This can either be a string, a reference to a field or another filter function.
 * @param searchStr - The substring to get the index for. This can either be a string, a reference to a field or another filter function.
 * @param replaceStr - The substring to get the index for. This can either be a string, a reference to a field or another filter function.
 *
 * @returns The newly created filter function
 */
export declare function replace<EntityT extends Entity>(str: string | Field<EntityT, boolean, boolean> | StringFilterFunction<EntityT>, searchStr: string | Field<EntityT, boolean, boolean> | StringFilterFunction<EntityT>, replaceStr: string | Field<EntityT, boolean, boolean> | StringFilterFunction<EntityT>): StringFilterFunction<EntityT>;
/**
 *  @hidden
 * Export length filter function for backwards compatibility.
 */
export declare const length: typeof import("../odata-common").length;
/**
 *  @hidden
 * Export substring filter function for backwards compatibility.
 */
export declare const substring: typeof import("../odata-common").substring;
/**
 * OData v2 specific filter functions
 */
export declare const filterFunctions: {
    substringOf: typeof substringOf;
    replace: typeof replace;
    endsWith: typeof import("../odata-common").endsWith;
    startsWith: typeof import("../odata-common").startsWith;
    length: typeof import("../odata-common").length;
    indexOf: typeof import("../odata-common").indexOf;
    substring: typeof import("../odata-common").substring;
    toLower: typeof import("../odata-common").toLower;
    toUpper: typeof import("../odata-common").toUpper;
    trim: typeof import("../odata-common").trim;
    concat: typeof import("../odata-common").concat;
    round: typeof import("../odata-common").round;
    floor: typeof import("../odata-common").floor;
    ceiling: typeof import("../odata-common").ceiling;
    day: typeof import("../odata-common").day;
    hour: typeof import("../odata-common").hour;
    minute: typeof import("../odata-common").minute;
    month: typeof import("../odata-common").month;
    second: typeof import("../odata-common").second;
    year: typeof import("../odata-common").year;
    isOf: typeof import("../odata-common").isOf;
};
export { filterFunctions as filterFunctionsV2 };
//# sourceMappingURL=filter-functions.d.ts.map