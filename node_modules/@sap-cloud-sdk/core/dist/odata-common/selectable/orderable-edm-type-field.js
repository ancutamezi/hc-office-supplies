"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderableEdmTypeField = void 0;
var filter_1 = require("../filter");
var edm_type_field_1 = require("./edm-type-field");
/**
 * [[EdmTypeField]], that represents a property with an EDM type, that can be compared with `greaterThan`, `greaterOrEqual`, `lessThan` and `lessOrEqual`.
 * @typeparam EntityT - Type of the entity the field belongs to
 * @typeparam EdmT - EDM type of the field.
 * @typeparam NullableT - Boolean type that represents whether the field is nullable.
 * @typeparam SelectableT - Boolean type that represents whether the field is selectable.
 */
var OrderableEdmTypeField = /** @class */ (function (_super) {
    __extends(OrderableEdmTypeField, _super);
    function OrderableEdmTypeField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'gt', i.e. `>`.
     * @param value - Value to be used in the filter
     * @returns The resulting filter
     */
    OrderableEdmTypeField.prototype.greaterThan = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'gt', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'ge', i.e. `>=`.
     * @param value - Value to be used in the filter
     * @returns The resulting filter
     */
    OrderableEdmTypeField.prototype.greaterOrEqual = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'ge', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'lt', i.e. `<`.
     * @param value - Value to be used in the filter
     * @returns The resulting filter
     */
    OrderableEdmTypeField.prototype.lessThan = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'lt', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'le', i.e. `<=`.
     * @param value - Value to be used in the filter
     * @returns The resulting filter
     */
    OrderableEdmTypeField.prototype.lessOrEqual = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'le', value, this.edmType);
    };
    return OrderableEdmTypeField;
}(edm_type_field_1.EdmTypeField));
exports.OrderableEdmTypeField = OrderableEdmTypeField;
//# sourceMappingURL=orderable-edm-type-field.js.map