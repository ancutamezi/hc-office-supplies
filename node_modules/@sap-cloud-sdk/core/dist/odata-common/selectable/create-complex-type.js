"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComplexType = void 0;
/**
 * @deprecated Since v1.25.0. use [[deserializeComplexType]] instead.
 * @param json - A raw json object to deserialize a complex type from.
 * @param converters - A list of rules on how to convert json to the respective type in JavaScript or TypeScript.
 * @returns A deserialized complex type representation.
 */
function createComplexType(json, converters) {
    return Object.entries(json).reduce(function (complexTypeInstance, _a) {
        var jsonKey = _a[0], jsonValue = _a[1];
        return (__assign(__assign({}, complexTypeInstance), converters[jsonKey](jsonValue)));
    }, {});
}
exports.createComplexType = createComplexType;
//# sourceMappingURL=create-complex-type.js.map