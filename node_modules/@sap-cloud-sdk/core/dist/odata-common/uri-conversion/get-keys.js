"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEntityKeys = void 0;
var name_converter_1 = require("../name-converter");
/**
 * Helper function that maps an entity to its keys map with their original names.
 * @param entity - Entity to map
 * @param entityConstructor - The constructor of the entity
 * @returns object that includes all keys that represent given entity
 */
function getEntityKeys(entity, entityConstructor) {
    if (!entity) {
        throw new Error('getEntityKeys() cannot extract keys from an undefined or null object.');
    }
    // type assertion for backwards compatibility, TODO: remove in v2.0
    return entityConstructor._keyFields.reduce(function (prev, curr) {
        var _a;
        return (__assign(__assign({}, prev), (_a = {}, _a[curr._fieldName] = encodeURIComponent(entity[(0, name_converter_1.toPropertyFormat)(curr._fieldName)]), _a)));
    }, {});
}
exports.getEntityKeys = getEntityKeys;
//# sourceMappingURL=get-keys.js.map