"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGetFilter = void 0;
var moment_1 = __importDefault(require("moment"));
var filter_1 = require("../filter");
var selectable_1 = require("../selectable");
var filter_lambda_expression_1 = require("../filter/filter-lambda-expression");
var name_converter_1 = require("../name-converter");
/**
 * Creates a getFilter function using the OData v2 or OData v4 URI converter.
 * The concrete filter getters are initiated in odata/v2/uri-conversion/odata-uri.ts and odata/v4/uri-conversion/odata-uri.ts.
 * @param uriConverter - Uri converter for v2 or v4.
 * @returns The filter getter. See interface [[GetFilter]]
 */
function createGetFilter(uriConverter) {
    /**
     * Get an object containing the given filter as query parameter, or an empty object if none was given.
     * @typeparam EntityT - Type of the entity to filter on
     * @param filter - The filter to transform to a query parameter
     * @param entityConstructor - Constructor type of the entity to filter on
     * @returns An object containing the query parameter with encoding or an empty object
     */
    function getFilter(filter, entityConstructor) {
        if (typeof filter !== 'undefined') {
            var filterExpression = getODataFilterExpression(filter, [], entityConstructor);
            if (filterExpression) {
                return {
                    filter: encodeURIComponent(filterExpression)
                };
            }
        }
        return {};
    }
    function getODataFilterExpression(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel) {
        if (parentFieldNames === void 0) { parentFieldNames = []; }
        if (lambdaExpressionLevel === void 0) { lambdaExpressionLevel = 0; }
        if ((0, filter_1.isFilterList)(filter)) {
            return getODataFilterExpressionForFilterList(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel);
        }
        if ((0, filter_1.isFilterLink)(filter)) {
            return getODataFilterExpressionForFilterLink(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel);
        }
        if ((0, filter_1.isFilter)(filter)) {
            return getODataFilterExpressionForFilter(filter, parentFieldNames, targetEntityConstructor);
        }
        if ((0, filter_1.isBooleanFilterFunction)(filter)) {
            return filterFunctionToString(filter, parentFieldNames);
        }
        if ((0, filter_1.isUnaryFilter)(filter)) {
            return getODataFilterExpressionForUnaryFilter(filter, parentFieldNames, targetEntityConstructor);
        }
        if ((0, filter_lambda_expression_1.isFilterLambdaExpression)(filter)) {
            return getODataFilterExpressionForFilterLambdaExpression(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel);
        }
        if (filter instanceof selectable_1.OneToManyLink) {
            return getODataFilterExpressionForFilterLink(filter._filters, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel);
        }
        throw new Error("Could not construct query parameters from filter. Filter is not valid: ".concat(JSON.stringify(filter)));
    }
    function retrieveField(filterField, targetEntityConstructor, filterEdmType) {
        // In case of complex types there will be a property name as part of the filter.field
        var fieldName = filterField.split('/')[0];
        var field = targetEntityConstructor[(0, name_converter_1.toStaticPropertyFormat)(fieldName)];
        if (field instanceof selectable_1.ComplexTypeField) {
            return Object.values(field)
                .filter(function (pField) { return pField === null || pField === void 0 ? void 0 : pField.fieldPath; }) // Filter for ComplexTypePropertyFields only
                .find(function (pField) { return pField.fieldPath() === filterField; });
        }
        // In case of custom field we infer then the returned field from the filter edmType property
        return field || { edmType: filterEdmType };
    }
    function filterFunctionToString(filterFunction, parentFieldNames) {
        if (parentFieldNames === void 0) { parentFieldNames = []; }
        var params = filterFunction.parameters
            .map(function (param) { return filterFunctionParameterToString(param, parentFieldNames); })
            .join(',');
        return "".concat(filterFunction.functionName, "(").concat(params, ")");
    }
    function filterFunctionParameterToString(param, parentFieldNames) {
        if (typeof param === 'number') {
            return param.toString();
        }
        if (typeof param === 'string') {
            return uriConverter.convertToUriFormat(param, 'Edm.String');
        }
        if (param instanceof filter_1.FilterFunction) {
            return filterFunctionToString(param, parentFieldNames);
        }
        if (moment_1.default.isMoment(param)) {
            return uriConverter.convertToUriFormat(param, 'Edm.DateTimeOffset');
        }
        if (Array.isArray(param)) {
            return "[".concat(param
                .map(function (p) { return filterFunctionParameterToString(p, parentFieldNames); })
                .join(','), "]");
        }
        return __spreadArray(__spreadArray([], parentFieldNames, true), [param._fieldName], false).join('/');
    }
    function convertFilterValue(value, edmType) {
        return Array.isArray(value)
            ? "[".concat(value
                .map(function (v) { return uriConverter.convertToUriFormat(v, edmType); })
                .join(','), "]")
            : uriConverter.convertToUriFormat(value, edmType);
    }
    function getODataFilterExpressionForUnaryFilter(filter, parentFieldNames, targetEntityConstructor) {
        return "".concat(filter.operator, " (").concat(getODataFilterExpression(filter.singleOperand, parentFieldNames, targetEntityConstructor), ")");
    }
    function getODataFilterExpressionForFilterLambdaExpression(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel) {
        var alias = "a".concat(lambdaExpressionLevel);
        var filterExp = getODataFilterExpression(filter.filters, [alias], targetEntityConstructor, lambdaExpressionLevel + 1);
        return "".concat(parentFieldNames.join('/'), "/").concat(filter.lambdaOperator, "(").concat(alias, ":").concat(filterExp, ")");
    }
    function getODataFilterExpressionForFilterList(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel) {
        var andExp = filter.andFilters
            .map(function (subFilter) {
            return getODataFilterExpression(subFilter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel);
        })
            .filter(function (f) { return !!f; })
            .join(' and ');
        andExp = andExp ? "(".concat(andExp, ")") : andExp;
        var orExp = filter.orFilters
            .map(function (subFilter) {
            return getODataFilterExpression(subFilter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel);
        })
            .filter(function (f) { return !!f; })
            .join(' or ');
        orExp = orExp ? "(".concat(orExp, ")") : orExp;
        var exp = [];
        if (andExp) {
            exp.push(andExp);
        }
        if (orExp) {
            exp.push(orExp);
        }
        return exp.join(' and ');
    }
    function getODataFilterExpressionForFilterLink(filter, parentFieldNames, targetEntityConstructor, lambdaExpressionLevel) {
        var linkExp = filter.filters
            .map(function (subFilter) {
            return getODataFilterExpression(subFilter, __spreadArray(__spreadArray([], parentFieldNames, true), [filter.link._fieldName], false), filter.link._linkedEntity, lambdaExpressionLevel);
        })
            .filter(function (f) { return !!f; })
            .join(' and ');
        linkExp = linkExp ? "(".concat(linkExp, ")") : linkExp;
        return linkExp;
    }
    function getODataFilterExpressionForFilter(filter, parentFieldNames, targetEntityConstructor) {
        if (typeof filter.field === 'string') {
            var field = retrieveField(filter.field, targetEntityConstructor, filter.edmType);
            return [
                __spreadArray(__spreadArray([], parentFieldNames, true), [filter.field], false).join('/'),
                filter.operator,
                convertFilterValue(filter.value, field.edmType)
            ].join(' ');
        }
        return [
            filterFunctionToString(filter.field, parentFieldNames),
            filter.operator,
            convertFilterValue(filter.value, filter.edmType)
        ].join(' ');
    }
    return {
        getFilter: getFilter
    };
}
exports.createGetFilter = createGetFilter;
//# sourceMappingURL=get-filter.js.map