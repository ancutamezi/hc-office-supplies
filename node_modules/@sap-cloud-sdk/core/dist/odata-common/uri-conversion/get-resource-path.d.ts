import { Entity, Constructable } from '../entity';
import { FieldType } from '../selectable';
import { UriConverter } from '../uri-conversion';
declare type GetResourcePathForKeysType<EntityT extends Entity> = (keys: Record<string, FieldType>, entityConstructor: Constructable<EntityT>) => string;
interface GetResourcePathForKeys<EntityT extends Entity = any> {
    getResourcePathForKeys: GetResourcePathForKeysType<EntityT>;
}
/**
 * Creates a getResourcePathForKeys function using the OData v2 or OData v4 URI converter.
 * The concrete instances for v2 or v4 are initiated in odata/v2/uri-conversion/odata-uri.ts and odata/v4/uri-conversion/odata-uri.ts.
 * @param uriConverter - Uri converter for v2 or v4.
 * @returns The filter getter. See [[GetFilter]]
 */
export declare function createGetResourcePathForKeys(uriConverter: UriConverter): GetResourcePathForKeys;
export {};
//# sourceMappingURL=get-resource-path.d.ts.map