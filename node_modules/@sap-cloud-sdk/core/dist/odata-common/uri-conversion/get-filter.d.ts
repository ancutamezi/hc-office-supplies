import { Constructable, Entity } from '../entity';
import { Filterable } from '../filter';
import { UriConverter } from '../uri-conversion';
declare type GetFilterType<EntityT extends Entity> = (filter: Filterable<EntityT>, entityConstructor: Constructable<EntityT>) => Partial<{
    filter: string;
}>;
/**
 * Interface representing the return of the getFilter creator [[createGetFilter]].
 */
export interface GetFilter<EntityT extends Entity = any> {
    getFilter: GetFilterType<EntityT>;
}
/**
 * Creates a getFilter function using the OData v2 or OData v4 URI converter.
 * The concrete filter getters are initiated in odata/v2/uri-conversion/odata-uri.ts and odata/v4/uri-conversion/odata-uri.ts.
 * @param uriConverter - Uri converter for v2 or v4.
 * @returns The filter getter. See interface [[GetFilter]]
 */
export declare function createGetFilter(uriConverter: UriConverter): GetFilter;
export {};
//# sourceMappingURL=get-filter.d.ts.map