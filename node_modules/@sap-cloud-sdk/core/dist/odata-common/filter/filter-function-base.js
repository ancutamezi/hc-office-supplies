"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterFunction = void 0;
var moment_1 = __importDefault(require("moment"));
var filter_1 = require("./filter");
/**
 * Data structure to represent OData filter functions.
 * Use the factory function [[filterFunction]] to create instances of `FilterFunction`.
 */
var FilterFunction = /** @class */ (function () {
    /**
     * Creates an instance of FilterFunction.
     * @param functionName - Name of the function.
     * @param parameters - Representation of the parameters passed to the filter function.
     * @param edmType - EDM type of the return type of the filter function.
     */
    function FilterFunction(functionName, parameters, edmType) {
        this.functionName = functionName;
        this.parameters = parameters;
        this.edmType = edmType;
    }
    /**
     * @deprecated Since v1.21.0. There will be no replacement. Let us know if you were using this functionality.
     * Serializes the filter function into a string
     * @param parentFieldNames - Names of parents in case the function is part of a filter on a navigation property
     * @returns The filter function as string
     */
    FilterFunction.prototype.toString = function (parentFieldNames) {
        var _this = this;
        if (parentFieldNames === void 0) { parentFieldNames = []; }
        var params = this.parameters
            .map(function (param) { return _this.transformParameter(param, parentFieldNames); })
            .join(', ');
        return "".concat(this.functionName, "(").concat(params, ")");
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'eq', i.e. `==`.
     * @param value - Value to be used in the filter
     * @param edmType - EDM type of the value, used when converting the value to URL. Use `Edm.String` as default value.
     * @returns The resulting filter
     */
    FilterFunction.prototype.equals = function (value) {
        return new filter_1.Filter(this, 'eq', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'ne', i.e. `!=`.
     * @param value - Value to be used in the filter
     * @param edmType - EDM type of the value, used when converting the value to URL. Use `Edm.String` as default value.
     * @returns The resulting filter
     */
    FilterFunction.prototype.notEquals = function (value) {
        return new filter_1.Filter(this, 'ne', value, this.edmType);
    };
    /**
     * @deprecated Since v1.21.0. There will be no replacement. Let us know if you were using this functionality.
     * For different type of filter function parameters, build a function that generates a string as url pattern.
     * @param param - One parameter of the filter function
     * @param parentFieldNames - The parent field name list used when the field with navigation properties are involved
     * @returns A function that convert the parameter to url pattern.
     */
    FilterFunction.prototype.transformParameter = function (param, parentFieldNames) {
        if (typeof param === 'number') {
            return param.toString();
        }
        if (typeof param === 'string') {
            return "'".concat(param.replace(/'/g, "''"), "'");
        }
        if (moment_1.default.isMoment(param)) {
            throw new Error('Date parameters are not supported in the deprecated `transformParameter` method. Use `get-filter` instead.');
        }
        if (param instanceof FilterFunction) {
            return param.toString(parentFieldNames);
        }
        if (Array.isArray(param)) {
            throw new Error('Collection parameters are not supported in the deprecated `transformParameter` method. Use `get-filter` instead.');
        }
        return __spreadArray(__spreadArray([], parentFieldNames, true), [param._fieldName], false).join('/');
    };
    return FilterFunction;
}());
exports.FilterFunction = FilterFunction;
//# sourceMappingURL=filter-function-base.js.map