"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.numberReturnTypeMapping = exports.createFilterFunction = exports.filterFunction = void 0;
var boolean_filter_function_1 = require("./boolean-filter-function");
var number_filter_function_1 = require("./number-filter-function");
var string_filter_function_1 = require("./string-filter-function");
/**
 * Build a custom filter function.
 * @param functionName - the name of the function, e.g., `substring`
 * @param returnType - the return type of the filter function
 * @param parameters - the parameter(s) used in the function
 * @returns An instance of filter function suited for the given return type
 */
function filterFunction(functionName, returnType) {
    var parameters = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        parameters[_i - 2] = arguments[_i];
    }
    return createFilterFunction.apply(void 0, __spreadArray([functionName, returnType], parameters, false));
}
exports.filterFunction = filterFunction;
// eslint-disable-next-line valid-jsdoc
/**
 * @hidden
 */
function createFilterFunction(functionName, returnType) {
    var parameters = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        parameters[_i - 2] = arguments[_i];
    }
    switch (returnType) {
        case 'boolean':
            return new boolean_filter_function_1.BooleanFilterFunction(functionName, parameters);
        case 'string':
            return new string_filter_function_1.StringFilterFunction(functionName, parameters);
        case 'int':
        case 'double':
        case 'decimal':
            return new number_filter_function_1.NumberFilterFunction(functionName, parameters, exports.numberReturnTypeMapping[returnType]);
    }
}
exports.createFilterFunction = createFilterFunction;
exports.numberReturnTypeMapping = {
    int: 'Edm.Int32',
    double: 'Edm.Double',
    decimal: 'Edm.Decimal'
};
//# sourceMappingURL=filter-function.js.map