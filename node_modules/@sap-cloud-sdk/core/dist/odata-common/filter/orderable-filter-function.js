"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderableFilterFunction = void 0;
var filter_1 = require("./filter");
var filter_function_base_1 = require("./filter-function-base");
/**
 * Representation of a filter function, that returns a value of an orderable type. This supports int, double and decimal values.
 */
var OrderableFilterFunction = /** @class */ (function (_super) {
    __extends(OrderableFilterFunction, _super);
    /**
     * Creates an instance of OrderableFilterFunction.
     * @param functionName - Name of the function that returns a numeric value
     * @param parameters - Representation of the parameters passed to the filter function
     * @param edmType - Type of the returned numeric value. This influences the formatting of the returned value.
     */
    function OrderableFilterFunction(functionName, parameters, edmType) {
        return _super.call(this, functionName, parameters, edmType) || this;
    }
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'gt', i.e. `>`.
     * @param value - Value to be used in the filter
     * @param edmType - EDM type of the field to filter on
     * @returns The resulting filter
     */
    OrderableFilterFunction.prototype.greaterThan = function (value) {
        return new filter_1.Filter(this, 'gt', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'ge', i.e. `>=`.
     * @param value - Value to be used in the filter
     * @param edmType - EDM type of the field to filter on
     * @returns The resulting filter
     */
    OrderableFilterFunction.prototype.greaterOrEqual = function (value) {
        return new filter_1.Filter(this, 'ge', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'lt', i.e. `<`.
     * @param value - Value to be used in the filter
     * @param edmType - EDM type of the field to filter on
     * @returns The resulting filter
     */
    OrderableFilterFunction.prototype.lessThan = function (value) {
        return new filter_1.Filter(this, 'lt', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this filter function and the given value using the operator 'le', i.e. `<=`.
     * @param value - Value to be used in the filter
     * @param edmType - EDM type of the field to filter on
     * @returns The resulting filter
     */
    OrderableFilterFunction.prototype.lessOrEqual = function (value) {
        return new filter_1.Filter(this, 'le', value, this.edmType);
    };
    return OrderableFilterFunction;
}(filter_function_base_1.FilterFunction));
exports.OrderableFilterFunction = OrderableFilterFunction;
//# sourceMappingURL=orderable-filter-function.js.map