import { Constructable, Entity, EntityIdentifiable } from '../entity';
import { ODataRequest, ODataUpdateRequestConfig } from '../request';
import { ODataUri } from '../uri-conversion';
import { Selectable } from '../selectable';
import { EntitySerializer } from '../entity-serializer';
import { HttpResponse } from '../../http-client';
import { MethodRequestBuilder } from './request-builder-base';
/**
 * Abstract class to create OData query to update an entity containing methods shared for OData v2 and v4.
 * @typeparam EntityT - Type of the entity to be updated
 */
export declare abstract class UpdateRequestBuilder<EntityT extends Entity> extends MethodRequestBuilder<ODataUpdateRequestConfig<EntityT>> implements EntityIdentifiable<EntityT> {
    readonly _entityConstructor: Constructable<EntityT>;
    readonly _entity: EntityT;
    readonly oDataUri: ODataUri;
    readonly entitySerializer: EntitySerializer;
    readonly extractODataEtag: (json: Record<string, any>) => string | undefined;
    readonly payloadManipulator: (body: Record<string, any>) => Record<string, any>;
    private ignored;
    private required;
    /**
     * Creates an instance of UpdateRequestBuilder.
     * @param _entityConstructor - Constructor type of the entity to be updated
     * @param _entity - Entity to be updated
     * @param oDataUri - Collection of URI conversion methods
     * @param entitySerializer - Entity serializer
     * @param extractODataEtag - Extractor for ETag from payload
     * @param payloadManipulator - Manipulator for the payload.
     */
    constructor(_entityConstructor: Constructable<EntityT>, _entity: EntityT, oDataUri: ODataUri, entitySerializer: EntitySerializer, extractODataEtag: (json: Record<string, any>) => string | undefined, payloadManipulator: (body: Record<string, any>) => Record<string, any>);
    get entity(): EntityT;
    /**
     * @deprecated Since v1.29.0. This method should never be called, it has severe side effects.
     * Builds the payload and the entity keys of the query.
     * @returns the builder itself
     */
    prepare(): this;
    /**
     * Explicitly configure 'PUT' as the method of the update request. By default, only the properties that have changed compared to the last known remote state are sent using 'PATCH', while with 'PUT', the whole entity is sent.
     * @returns The entity itself, to facilitate method chaining.
     */
    replaceWholeEntityWithPut(): this;
    /**
     * @deprecated Since version 1.34.0 Use [[setRequiredFields]] instead.
     * Specifies required entity keys for the update request.
     * @param fields - Enumeration of the fields to be required.
     * @returns The entity itself, to facilitate method chaining.
     */
    requiredFields(...fields: Selectable<EntityT>[]): this;
    requiredFields(fields: Selectable<EntityT>[]): this;
    /**
     * Sets required entity keys for the update request.
     * @param fields - Enumeration of the fields to be required.
     * @returns The entity itself, to facilitate method chaining.
     */
    setRequiredFields(...fields: Selectable<EntityT>[]): this;
    setRequiredFields(fields: Selectable<EntityT>[]): this;
    /**
     * @deprecated Since version 1.34.0 Use [[setIgnoredFields]] instead.
     * Specifies entity fields to ignore by the update request.
     * @param fields - Enumeration of the fields to be ignored.
     * @returns The entity itself, to facilitate method chaining.
     */
    ignoredFields(...fields: Selectable<EntityT>[]): this;
    ignoredFields(fields: Selectable<EntityT>[]): this;
    /**
     * Sets entity fields to ignore by the update request.
     * @param fields - Enumeration of the fields to be ignored.
     * @returns The entity itself, to facilitate method chaining.
     */
    setIgnoredFields(...fields: Selectable<EntityT>[]): this;
    setIgnoredFields(fields: Selectable<EntityT>[]): this;
    /**
     * Instructs the request to force an overwrite of the entity by sending an 'If-Match: *' header instead of sending the ETag version identifier.
     * @returns The request itself to ease chaining while executing the request.
     */
    ignoreVersionIdentifier(): this;
    /**
     * @deprecated Since version 1.34.0 Use [[setVersionIdentifier]] instead.
     * Specifies a custom ETag version identifier of the entity to update.
     * @param etag - Custom ETag version identifier to be sent in the header of the request.
     * @returns The request itself to ease chaining while executing the request.
     */
    withCustomVersionIdentifier(etag: string): this;
    /**
     * Sets ETag version identifier of the entity to update.
     * @param etag - Custom ETag version identifier to be sent in the header of the request.
     * @returns The request itself to ease chaining while executing the request.
     */
    setVersionIdentifier(etag: string): this;
    /**
     * Executes the query.
     * @param request - Request object to be executed.
     * @returns A promise resolving to the entity once it was updated.
     */
    protected executeRequest(request: ODataRequest<ODataUpdateRequestConfig<EntityT>>): Promise<EntityT>;
    protected executeRequestRaw(request: ODataRequest<ODataUpdateRequestConfig<EntityT>>): Promise<HttpResponse>;
    protected getPayload(): Record<string, any>;
    protected isEmptyObject(obj: any): boolean;
    private addRequiredFields;
    private getKeyFieldNames;
    private toSet;
    private serializedDiff;
    private removeKeyFields;
    private removeIgnoredFields;
}
/**
 * @hidden
 */
export declare function removePropertyOnCondition(condition: (objectEntry: [string, any]) => boolean, body: Record<string, any>): Record<string, any>;
export { UpdateRequestBuilder as UpdateRequestBuilderBase };
//# sourceMappingURL=update-request-builder-base.d.ts.map