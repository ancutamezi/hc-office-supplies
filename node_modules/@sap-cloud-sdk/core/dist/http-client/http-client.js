"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldHandleCsrfToken = exports.getAxiosConfigWithDefaultsWithoutMethod = exports.getAxiosConfigWithDefaults = exports.executeHttpRequest = exports.buildAxiosRequestConfig = exports.execute = exports.addDestinationToRequestConfig = exports.buildHttpRequest = void 0;
var http = __importStar(require("http"));
var https = __importStar(require("https"));
var util_1 = require("@sap-cloud-sdk/util");
var axios_1 = __importDefault(require("axios"));
var scp_cf_1 = require("../connectivity/scp-cf");
var http_client_1 = require("../http-client");
var http_agent_1 = require("../http-agent/http-agent");
var logger = (0, util_1.createLogger)({
    package: 'core',
    messageContext: 'http-client'
});
/**
 * Builds a [[DestinationHttpRequestConfig]] for the given destination.
 * If a destination name (and a JWT) are provided, it will try to resolve the destination.
 * @param destination - A destination or a destination name and a JWT.
 * @param customHeaders - Custom default headers for the resulting HTTP request.
 * @returns A [[DestinationHttpRequestConfig]].
 */
function buildHttpRequest(destination, customHeaders) {
    return __awaiter(this, void 0, void 0, function () {
        var resolvedDestination, headers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (customHeaders) {
                        logger.info("The following custom headers will overwrite headers created by the SDK:\n".concat(Object.keys(customHeaders)
                            .map(function (key) { return "  - \"".concat(key, "\""); })
                            .join('\n')));
                    }
                    return [4 /*yield*/, resolveDestination(destination)];
                case 1:
                    resolvedDestination = _a.sent();
                    if (!resolvedDestination) {
                        throw Error("Failed to resolve the destination '".concat((0, scp_cf_1.toDestinationNameUrl)(destination), "'."));
                    }
                    return [4 /*yield*/, buildHeaders(resolvedDestination, customHeaders)];
                case 2:
                    headers = _a.sent();
                    return [2 /*return*/, buildDestinationHttpRequestConfig(resolvedDestination, headers)];
            }
        });
    });
}
exports.buildHttpRequest = buildHttpRequest;
/**
 * Builds a [[DestinationHttpRequestConfig]] for the given destination
 * and then merges it into the given request configuration.
 * Setting of the given request configuration take precedence over any destination related configuration.
 * @param destination - A destination or a destination name and a JWT.
 * @param requestConfig - Any object representing an HTTP request.
 * @returns The given request config merged with the config built for the given destination.
 */
function addDestinationToRequestConfig(destination, requestConfig) {
    return buildHttpRequest(destination).then(function (destinationConfig) {
        return merge(destinationConfig, requestConfig);
    });
}
exports.addDestinationToRequestConfig = addDestinationToRequestConfig;
/**
 * Takes as parameter a function that expects an [[HttpRequest]] and returns a Promise of [[HttpResponse]].
 * Returns a function that takes a destination and a request-config (extends [[HttpRequestConfig]]), builds an [[HttpRequest]] from them, and calls
 * the provided execute function.
 *
 * NOTE: If you simply want to execute a request without passing your own execute function, use [[executeHttpRequest]] instead.
 * @param executeFn - A function that can execute an [[HttpRequestConfig]].
 * @returns A function expecting destination and a request.
 */
function execute(executeFn) {
    return function (destination, requestConfig, options) {
        return __awaiter(this, void 0, void 0, function () {
            var destinationRequestConfig, request, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, buildHttpRequest(destination, requestConfig.headers)];
                    case 1:
                        destinationRequestConfig = _b.sent();
                        request = merge(destinationRequestConfig, requestConfig);
                        _a = request;
                        return [4 /*yield*/, addCsrfTokenToHeader(destination, request, options)];
                    case 2:
                        _a.headers = _b.sent();
                        logRequestInformation(request);
                        return [2 /*return*/, executeFn(request)];
                }
            });
        });
    };
}
exports.execute = execute;
function logRequestInformation(request) {
    var basicRequestInfo = "Execute '".concat(request.method, "' request with target: ").concat(request.url, ".");
    var headerText = Object.keys(request.headers).reduce(function (previous, key) {
        if (key.toLowerCase().includes('authentication') ||
            key.toLowerCase().includes('authorization')) {
            return "".concat(previous).concat(util_1.unixEOL).concat(key, ":*******");
        }
        return "".concat(previous).concat(util_1.unixEOL).concat(key, ":").concat(request.headers[key]);
    }, 'The headers of the request are:');
    logger.debug("".concat(basicRequestInfo).concat(util_1.unixEOL).concat(headerText));
}
/**
 *
 * @experimental This API is experimental and might change in newer versions. Use with caution.
 * @param destination - A destination or a destination name and a JWT.
 * @param requestConfig - Any object representing an HTTP request.
 */
function buildAxiosRequestConfig(destination, requestConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var destinationRequestConfig, request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, buildHttpRequest(destination, requestConfig === null || requestConfig === void 0 ? void 0 : requestConfig.headers)];
                case 1:
                    destinationRequestConfig = _a.sent();
                    request = requestConfig
                        ? merge(destinationRequestConfig, requestConfig)
                        : destinationRequestConfig;
                    return [2 /*return*/, __assign(__assign({}, getAxiosConfigWithDefaultsWithoutMethod()), request)];
            }
        });
    });
}
exports.buildAxiosRequestConfig = buildAxiosRequestConfig;
/**
 * Builds a [[DestinationHttpRequestConfig]] for the given destination, merges it into the given requestConfig
 * and executes it (using Axios).
 * @param destination - A destination or a destination name and a JWT.
 * @param requestConfig - Any object representing an HTTP request.
 * @param options - An [[HttpRequestOptions]] of the http request for configuring e.g., csrf token delegation. By default, the SDK will not fetch the csrf token.
 * @returns A promise resolving to an [[HttpResponse]].
 */
function executeHttpRequest(destination, requestConfig, options) {
    return execute(executeWithAxios)(destination, requestConfig, options);
}
exports.executeHttpRequest = executeHttpRequest;
function buildDestinationHttpRequestConfig(destination, headers) {
    return __assign({ baseURL: destination.url, headers: headers, params: destination.queryParameters }, (0, http_agent_1.getAgentConfig)(destination));
}
function buildHeaders(destination, customHeaders) {
    return (0, scp_cf_1.buildHeadersForDestination)(destination, customHeaders).catch(function (error) {
        throw new util_1.ErrorWithCause('Failed to build headers.', error);
    });
}
function resolveDestination(destination) {
    return (0, scp_cf_1.useOrFetchDestination)(destination).catch(function (error) {
        throw new util_1.ErrorWithCause('Failed to load destination.', error);
    });
}
function merge(destinationRequestConfig, customRequestConfig) {
    return __assign(__assign(__assign({}, destinationRequestConfig), customRequestConfig), { headers: __assign(__assign({}, destinationRequestConfig.headers), customRequestConfig.headers) });
}
function mergeRequestWithAxiosDefaults(request) {
    return __assign(__assign({}, getAxiosConfigWithDefaults()), request);
}
function executeWithAxios(request) {
    return axios_1.default.request(mergeRequestWithAxiosDefaults(request));
}
/**
 * Builds an Axios config with default configuration i.e. no_proxy, default http and https agent and GET as request method.
 * @returns AxiosRequestConfig with default parameters
 */
function getAxiosConfigWithDefaults() {
    return __assign(__assign({}, getAxiosConfigWithDefaultsWithoutMethod()), { method: 'get' });
}
exports.getAxiosConfigWithDefaults = getAxiosConfigWithDefaults;
function getAxiosConfigWithDefaultsWithoutMethod() {
    return {
        proxy: false,
        httpAgent: new http.Agent(),
        httpsAgent: new https.Agent(),
        paramsSerializer: function (params) {
            if (params === void 0) { params = {}; }
            return Object.entries(params)
                .map(function (_a) {
                var key = _a[0], value = _a[1];
                return "".concat(key, "=").concat(value);
            })
                .join('&');
        }
    };
}
exports.getAxiosConfigWithDefaultsWithoutMethod = getAxiosConfigWithDefaultsWithoutMethod;
function getDefaultHttpRequestOptions() {
    // TODO: 2.0 change to true
    return {
        fetchCsrfToken: false
    };
}
function buildHttpRequestOptions(httpRequestOptions) {
    return httpRequestOptions
        ? __assign(__assign({}, getDefaultHttpRequestOptions()), httpRequestOptions) : getDefaultHttpRequestOptions();
}
function shouldHandleCsrfToken(requestConfig, options) {
    return (!!options.fetchCsrfToken &&
        requestConfig.method !== 'get' &&
        requestConfig.method !== 'GET');
}
exports.shouldHandleCsrfToken = shouldHandleCsrfToken;
function getCsrfHeaders(destination, request) {
    return __awaiter(this, void 0, void 0, function () {
        var csrfHeaders;
        return __generator(this, function (_a) {
            csrfHeaders = (0, util_1.pickIgnoreCase)(request.headers, 'x-csrf-token');
            return [2 /*return*/, Object.keys(csrfHeaders).length
                    ? csrfHeaders
                    : (0, http_client_1.buildCsrfHeaders)(destination, {
                        params: request.params,
                        headers: request.headers,
                        url: request.url,
                        proxy: request.proxy,
                        httpAgent: request.httpAgent,
                        httpsAgent: request.httpsAgent
                    })];
        });
    });
}
function addCsrfTokenToHeader(destination, request, httpRequestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var options, csrfHeaders, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    options = buildHttpRequestOptions(httpRequestOptions);
                    if (!shouldHandleCsrfToken(request, options)) return [3 /*break*/, 2];
                    return [4 /*yield*/, getCsrfHeaders(destination, request)];
                case 1:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _a = {};
                    _b.label = 3;
                case 3:
                    csrfHeaders = _a;
                    return [2 /*return*/, __assign(__assign({}, request.headers), csrfHeaders)];
            }
        });
    });
}
//# sourceMappingURL=http-client.js.map