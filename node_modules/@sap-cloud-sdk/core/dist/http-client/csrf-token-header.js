"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCsrfFetchHeaders = exports.buildCsrfHeaders = void 0;
var util_1 = require("@sap-cloud-sdk/util");
var remove_slashes_1 = require("../odata-common/remove-slashes");
var http_client_1 = require("../http-client");
var logger = (0, util_1.createLogger)({
    package: 'core',
    messageContext: 'csrf-token-header'
});
/**
 * Get CSRF token and cookies for a destination and request configuration. The CSRF token and cookies will be retrieved based on the URL of the destination and the custom configuration given by the `requestConfig`.
 * If there is a relative url in the `requestConfig` it will be appended to the destination's URL, an absolute URL overwrites the destination related URL.
 * @param destination - The destination to get the headers from
 * @param requestConfig - An http request configuration containing additional information about the request, like URL or headers
 * @returns A promise to an object containing the CSRF related headers
 */
function buildCsrfHeaders(destination, requestConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var csrfHeaders;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, makeCsrfRequest(destination, requestConfig)];
                case 1:
                    csrfHeaders = _a.sent();
                    validateCsrfTokenResponse(csrfHeaders);
                    return [2 /*return*/, (0, util_1.pickNonNullish)(__assign(__assign({}, (0, util_1.pickIgnoreCase)(csrfHeaders, 'x-csrf-token')), { cookie: buildCookieHeaderValue((0, util_1.pickValueIgnoreCase)(csrfHeaders, 'set-cookie')) }))];
            }
        });
    });
}
exports.buildCsrfHeaders = buildCsrfHeaders;
function buildCsrfFetchHeaders(headers) {
    var _a;
    var fetchHeader = !(0, util_1.pickValueIgnoreCase)(headers, 'x-csrf-token') && {
        'x-csrf-token': 'Fetch'
    };
    var contentLengthHeaderKey = (0, util_1.first)(Object.keys((0, util_1.pickIgnoreCase)(headers, 'content-length'))) ||
        'content-length';
    return __assign(__assign(__assign({}, fetchHeader), headers), (_a = {}, _a[contentLengthHeaderKey] = 0, _a));
}
exports.buildCsrfFetchHeaders = buildCsrfFetchHeaders;
function makeCsrfRequest(destination, requestConfig) {
    var axiosConfig = __assign(__assign({ method: 'head' }, requestConfig), { headers: buildCsrfFetchHeaders(requestConfig.headers), url: requestConfig.url });
    // The S/4 does a redirect if the CSRF token is fetched in case the '/' is not in the URL.
    // TODO: remove once https://github.com/axios/axios/issues/3369 is really fixed. Issue is closed but problem stays.
    var requestConfigWithTrailingSlash = appendSlash(axiosConfig);
    return (0, http_client_1.executeHttpRequest)(destination, requestConfigWithTrailingSlash)
        .then(function (response) { return response.headers; })
        .catch(function (error1) {
        var headers1 = getResponseHeadersFromError(error1);
        if (hasCsrfToken(headers1)) {
            return headers1;
        }
        logger.warn(new util_1.ErrorWithCause("First attempt to fetch CSRF token failed with the URL: ".concat(requestConfigWithTrailingSlash.url, ". Retrying without trailing slash."), error1));
        var requestConfigWithOutTrailingSlash = removeSlash(axiosConfig);
        return (0, http_client_1.executeHttpRequest)(destination, requestConfigWithOutTrailingSlash)
            .then(function (response) { return response.headers; })
            .catch(function (error2) {
            var headers2 = getResponseHeadersFromError(error2);
            if (hasCsrfToken(headers2)) {
                return headers2;
            }
            logger.warn(new util_1.ErrorWithCause("Second attempt to fetch CSRF token failed with the URL: ".concat(requestConfigWithOutTrailingSlash.url, ". No CSRF token fetched."), error2));
            // todo suggest to disable csrf token handling when the API is implemented
            return {};
        });
    });
}
function hasCsrfToken(headers) {
    return !!headers['x-csrf-token'];
}
// Non-2xx responses can contain valid csrf tokens in their headers.
function getResponseHeadersFromError(error) {
    var _a;
    return ((_a = error.response) === null || _a === void 0 ? void 0 : _a.headers) || {};
}
function appendSlash(requestConfig) {
    if (!requestConfig.url.endsWith('/')) {
        requestConfig.url = "".concat(requestConfig.url, "/");
    }
    return requestConfig;
}
function removeSlash(requestConfig) {
    if (requestConfig.url.endsWith('/')) {
        requestConfig.url = (0, remove_slashes_1.removeTrailingSlashes)(requestConfig.url);
    }
    return requestConfig;
}
function validateCsrfTokenResponse(responseHeaders) {
    if (!responseHeaders['x-csrf-token']) {
        logger.warn('Destination did not return a CSRF token. This may cause a failure when sending the OData request.');
    }
    if (!responseHeaders['set-cookie']) {
        logger.warn('CSRF header response does not include cookies.');
    }
    return responseHeaders;
}
function buildCookieHeaderValue(cookies) {
    if (cookies && cookies.length) {
        return cookies.map(function (cookie) { return cookie.split(';')[0]; }).join(';');
    }
}
//# sourceMappingURL=csrf-token-header.js.map