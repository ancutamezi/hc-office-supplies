import { Logger } from 'winston';
/**
 * Mute all logger output created by the SAP Cloud SDK Logger. This also applies to future loggers created. Useful for tests.
 */
export declare function muteLoggers(): void;
/**
 * Unmute all logger output created by the SAP Cloud SDK Logger. This also applies to future loggers created. Useful for tests.
 */
export declare function unmuteLoggers(): void;
/**
 * Default logger for the SAP Cloud SDK for unhandled exceptions.
 */
export declare const cloudSdkExceptionLogger: Logger;
/**
 * Disable logging of exceptions. Enabled by default.
 */
export declare function disableExceptionLogger(): void;
/**
 * Enable logging of exceptions. Enabled by default.
 */
export declare function enableExceptionLogger(): void;
/**
 * Create a logger for the given message context, if available.
 *
 * Usage:
 * To create a logger in your module, it is recommended to pass a module identifier that will be logged as `messageContext` for all messages from this logger:
 * `const logger = createLogger('my-module');`. Not setting any module identifier will retrieve the default logger.
 * Use this logger throughout your module. If the module is spread over multiple files, you can retrieve the logger instance by calling the `createLogger` function with the respective module identifier.
 * There will always be only one instance of a logger per module identifier.
 * You can pass any custom data that you want to be logged in addition by passing an object instead. You can change the default logging level (`INFO`) using the `level` key in the object.
 * In those cases, provide the `messageContext` as a key in the object:
 * ```
 * const logger = createLogger({
 *   messageContext: 'my-module',
 *   myCustomKey: 'my-custom-data',
 *   level: 'debug'
 * });
 * ```
 * You will find these information under the _custom_fields_ key in your Cloud Foundry logs.
 *
 * To retrieve a logger after its creation use [[getLogger]].
 * If you want to change the log level of a logger use [[setLogLevel]].
 * @param messageContext - Either a key for the message context of all messages produced by the logger or an object with additional keys to set in the message.
 * @returns A newly created or an already existing logger for the given context.
 */
export declare function createLogger(messageContext?: string | (MessageContextObj & LoggerOptions)): Logger;
/**
 * Get logger for a given message context, if available.
 * @param messageContext - A key for the message context of all messages produced by the logger
 * @returns The logger for the given messageContext if it was created before
 */
export declare function getLogger(messageContext?: string): Logger | undefined;
/**
 * Change the log level of a logger based on its message context.
 * E. g., to set the log level for the destination accessor module of the SDK to _debug_, simply call `setLogLevel('debug', 'destination-accessor')`.
 * @param level - level to set the logger to. Use an empty string '' as level to unset context level.
 * @param messageContextOrLogger - Message context of the logger to change the log level for or the logger itself
 */
export declare function setLogLevel(level: LogLevel | '', messageContextOrLogger?: string | Logger): void;
/**
 * Change the global log level of the container which will set default level for all active loggers.
 * E. g., to set the global log level call `setGlobalLogLevel('debug')`.
 * @param level - The log level to set the global log level to.
 */
export declare function setGlobalLogLevel(level: LogLevel): void;
export declare function getGlobalLogLevel(): string | undefined;
/**
 * Npm log levels used for the SAP Cloud SDK logger.
 */
export declare type LogLevel = 'error' | 'warn' | 'info' | 'verbose' | 'debug' | 'silly';
/**
 * Configurable logger options.
 */
export interface LoggerOptions {
    level?: LogLevel;
    logger?: string;
}
/**
 * Log message context for a logger with additional custom data.
 */
export interface MessageContextObj {
    messageContext?: string;
    [key: string]: any;
}
//# sourceMappingURL=cloud-sdk-logger.d.ts.map