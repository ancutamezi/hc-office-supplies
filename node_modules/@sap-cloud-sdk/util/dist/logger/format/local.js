"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessageOrStack = exports.local = void 0;
var chalk_1 = __importDefault(require("chalk"));
var winston_1 = require("winston");
var combine = winston_1.format.combine, timestamp = winston_1.format.timestamp, cli = winston_1.format.cli, printf = winston_1.format.printf;
// This is a hack to ensure that error logging works in browsers. Necessary due to: https://github.com/winstonjs/logform/issues/97
// eslint-disable-next-line import/no-internal-modules
var errors = winston_1.format.errors || require('logform/errors');
/**
 * Format for local logging.
 */
exports.local = combine(errors({ stack: true }), timestamp(), (0, winston_1.format)(localTransformer)(), cli(), printf(function (info) {
    var messageContext = info.custom_fields && info.custom_fields.messageContext
        ? "".concat(chalk_1.default.blue("(".concat(info.custom_fields.messageContext, ")")), ": ")
        : '';
    var trimmedMessage = info.message.replace(/^\s*/, '');
    var paddingLength = info.message.length - trimmedMessage.length + messageContext.length;
    if (info.error) {
        info.level = chalk_1.default.inverse(info.level);
    }
    return "".concat(chalk_1.default.gray("[".concat(info.timestamp, "]")), " ").concat(info.level, " ").concat(messageContext.padStart(paddingLength, ' ')).concat(trimmedMessage);
}));
/**
 * @param info - object to be transformed.
 * @returns the message string to be used.
 * @hidden
 */
function getMessageOrStack(info) {
    return info.stack && info.level === 'error' ? info.stack : info.message;
}
exports.getMessageOrStack = getMessageOrStack;
function localTransformer(info) {
    return __assign(__assign({}, info), { level: info.level.toUpperCase(), message: getMessageOrStack(info) });
}
//# sourceMappingURL=local.js.map