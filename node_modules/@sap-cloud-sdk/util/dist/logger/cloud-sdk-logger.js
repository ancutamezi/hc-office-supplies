"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalLogLevel = exports.setGlobalLogLevel = exports.setLogLevel = exports.getLogger = exports.createLogger = exports.enableExceptionLogger = exports.disableExceptionLogger = exports.cloudSdkExceptionLogger = exports.unmuteLoggers = exports.muteLoggers = void 0;
var winston_1 = require("winston");
var format_1 = require("./format");
var format = process.env.VCAP_SERVICES ? format_1.kibana : format_1.local;
var loggerReference = 'sap-cloud-sdk-logger';
var exceptionLoggerId = 'sap-cloud-sdk-exception-logger';
var container = new winston_1.Container();
var exceptionTransport = new winston_1.transports.Console();
var customLogLevels = {};
var DEFAULT_LOGGER__MESSAGE_CONTEXT = '__DEFAULT_LOGGER__MESSAGE_CONTEXT';
var silent = false;
var moduleLogger = createLogger({
    package: 'util',
    messageContext: 'cloud-sdk-logger'
});
function toggleMuteLoggers(silence) {
    silent = silence;
    container.loggers.forEach(function (logger) { return toggleSilenceTransports(logger, silence); });
}
function toggleSilenceTransports(logger, silence) {
    logger.transports.forEach(function (transport) { return (transport.silent = silence); });
}
/**
 * Mute all logger output created by the SAP Cloud SDK Logger. This also applies to future loggers created. Useful for tests.
 */
function muteLoggers() {
    toggleMuteLoggers(true);
}
exports.muteLoggers = muteLoggers;
/**
 * Unmute all logger output created by the SAP Cloud SDK Logger. This also applies to future loggers created. Useful for tests.
 */
function unmuteLoggers() {
    toggleMuteLoggers(false);
}
exports.unmuteLoggers = unmuteLoggers;
/**
 * Default logger for the SAP Cloud SDK for unhandled exceptions.
 */
exports.cloudSdkExceptionLogger = container.get(exceptionLoggerId, {
    defaultMeta: { logger: loggerReference, test: 'exception' },
    format: format,
    exceptionHandlers: [exceptionTransport]
});
/**
 * Disable logging of exceptions. Enabled by default.
 */
function disableExceptionLogger() {
    exports.cloudSdkExceptionLogger.exceptions.unhandle();
}
exports.disableExceptionLogger = disableExceptionLogger;
/**
 * Enable logging of exceptions. Enabled by default.
 */
function enableExceptionLogger() {
    // Flush all possible handlers to make sure there is only one in the end.
    disableExceptionLogger();
    exports.cloudSdkExceptionLogger.exceptions.handle(exceptionTransport);
}
exports.enableExceptionLogger = enableExceptionLogger;
/**
 * Create a logger for the given message context, if available.
 *
 * Usage:
 * To create a logger in your module, it is recommended to pass a module identifier that will be logged as `messageContext` for all messages from this logger:
 * `const logger = createLogger('my-module');`. Not setting any module identifier will retrieve the default logger.
 * Use this logger throughout your module. If the module is spread over multiple files, you can retrieve the logger instance by calling the `createLogger` function with the respective module identifier.
 * There will always be only one instance of a logger per module identifier.
 * You can pass any custom data that you want to be logged in addition by passing an object instead. You can change the default logging level (`INFO`) using the `level` key in the object.
 * In those cases, provide the `messageContext` as a key in the object:
 * ```
 * const logger = createLogger({
 *   messageContext: 'my-module',
 *   myCustomKey: 'my-custom-data',
 *   level: 'debug'
 * });
 * ```
 * You will find these information under the _custom_fields_ key in your Cloud Foundry logs.
 *
 * To retrieve a logger after its creation use [[getLogger]].
 * If you want to change the log level of a logger use [[setLogLevel]].
 * @param messageContext - Either a key for the message context of all messages produced by the logger or an object with additional keys to set in the message.
 * @returns A newly created or an already existing logger for the given context.
 */
function createLogger(messageContext) {
    var customFields = typeof messageContext === 'string'
        ? { messageContext: messageContext }
        : __assign({}, messageContext);
    var logger = container.get(customFields.messageContext, {
        level: customLogLevels[customFields.messageContext] ||
            customFields.level ||
            container.options.level ||
            'info',
        defaultMeta: __assign(__assign({}, (Object.entries(customFields).length && {
            custom_fields: customFields
        })), { logger: customFields.logger || loggerReference }),
        format: format,
        transports: [new winston_1.transports.Console()]
    });
    toggleSilenceTransports(logger, silent);
    return logger;
}
exports.createLogger = createLogger;
/**
 * Get logger for a given message context, if available.
 * @param messageContext - A key for the message context of all messages produced by the logger
 * @returns The logger for the given messageContext if it was created before
 */
function getLogger(messageContext) {
    if (messageContext === void 0) { messageContext = DEFAULT_LOGGER__MESSAGE_CONTEXT; }
    if (container.has(messageContext)) {
        return container.get(messageContext);
    }
}
exports.getLogger = getLogger;
/**
 * Change the log level of a logger based on its message context.
 * E. g., to set the log level for the destination accessor module of the SDK to _debug_, simply call `setLogLevel('debug', 'destination-accessor')`.
 * @param level - level to set the logger to. Use an empty string '' as level to unset context level.
 * @param messageContextOrLogger - Message context of the logger to change the log level for or the logger itself
 */
function setLogLevel(level, messageContextOrLogger) {
    if (messageContextOrLogger === void 0) { messageContextOrLogger = DEFAULT_LOGGER__MESSAGE_CONTEXT; }
    var messageContext = typeof messageContextOrLogger === 'string'
        ? messageContextOrLogger
        : getMessageContext(messageContextOrLogger);
    if (messageContext) {
        customLogLevels[messageContext] = level;
        if (container.has(messageContext)) {
            var logger = container.get(messageContext);
            logger.level = level;
        }
    }
    else if (typeof messageContextOrLogger !== 'string') {
        moduleLogger.warn('Setting log level for logger with unknown message context');
        messageContextOrLogger.level = level;
    }
}
exports.setLogLevel = setLogLevel;
/**
 * Change the global log level of the container which will set default level for all active loggers.
 * E. g., to set the global log level call `setGlobalLogLevel('debug')`.
 * @param level - The log level to set the global log level to.
 */
function setGlobalLogLevel(level) {
    container.options.level = level;
    // Update existing loggers' log level with global level.
    container.loggers.forEach(function (logger) {
        logger.level = level;
    });
}
exports.setGlobalLogLevel = setGlobalLogLevel;
function getGlobalLogLevel() {
    return container.options.level;
}
exports.getGlobalLogLevel = getGlobalLogLevel;
function getMessageContext(logger) {
    // This is a workaround for the missing defaultMeta property on the winston logger.
    var loggerOptions = logger;
    if (loggerOptions &&
        loggerOptions.defaultMeta &&
        loggerOptions.defaultMeta.custom_fields) {
        return loggerOptions.defaultMeta.custom_fields.messageContext;
    }
}
//# sourceMappingURL=cloud-sdk-logger.js.map