"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.identity = exports.asyncPipe = void 0;
/**
 * Same as pipe but for asynchronous functions:
 * `asyncPipe(func1, func2, ...funcN)(start)` executes all functions in sequence awaiting the result and piping the response through in other words `await funcN(... await func2(await func1(start))...)`.
 * @deprecated We will remove this in version 2.0 of the SDK.
 * @param fns - A list of asynchronous functions to be executed in sequence.
 * @param start - Start value for the first function in the list.
 * @returns The return value of the last function in the list.
 */
var asyncPipe = function () {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return function (start) {
        return fns.reduce(function (state, fn) { return state.then(function (x) { return fn(x); }); }, Promise.resolve(start));
    };
};
exports.asyncPipe = asyncPipe;
/**
 * Identity function
 * @param argument - Any object
 * @returns the given argument without doing something
 *
 */
var identity = function (argument) { return argument; };
exports.identity = identity;
//# sourceMappingURL=pipe.js.map