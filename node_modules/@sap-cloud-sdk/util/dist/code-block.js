"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codeBlock = void 0;
var string_formatter_1 = require("./string-formatter");
var array_1 = require("./array");
var string_1 = require("./string");
/**
 * @experimental This API is experimental and might change in newer versions. Use with caution.
 * Transform strings and arguments to a string formatted as a code block, keeping the indentation of sub code blocks.
 * Use in tagged templates, e. g.:
 * ```
 * codeBlock`Code with ${arguments} and more code;`
 * ```
 * @param strings - Strings in the tagged template. In the example above that would be ['Code with ', ' and more code;'].
 * @param args - Arguments in the tagged template. In the example above that would be the resolved value for `arguments`;
 * @returns A string formatted as code block.
 */
function codeBlock(strings) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var pre = strings.slice(0, -1).map(function (string) {
        var trimmed = (0, string_1.trimRight)(string);
        return trimmed.length === string.length ? string : trimmed + string_formatter_1.unixEOL;
    });
    pre.push(strings[strings.length - 1]);
    var indents = strings.slice(0, -1).map(function (s) {
        var indentation = s.split(string_formatter_1.unixEOL).pop();
        return !indentation.trim() ? indentation : '';
    });
    var post = args.map(function (arg, i) {
        return ('' + arg)
            .split(string_formatter_1.unixEOL)
            .map(function (subArg) { return indents[i] + subArg; })
            .join(string_formatter_1.unixEOL);
    });
    var zipped = (0, array_1.zip)(pre, post);
    return (0, string_1.trim)(zipped.join(''));
}
exports.codeBlock = codeBlock;
//# sourceMappingURL=code-block.js.map