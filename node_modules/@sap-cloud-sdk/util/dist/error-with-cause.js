"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErrorWithCause = exports.ErrorWithCause = void 0;
var string_formatter_1 = require("./string-formatter");
/**
 * Represents an error that was caused by another error.
 */
var ErrorWithCause = /** @class */ (function (_super) {
    __extends(ErrorWithCause, _super);
    /**
     * Create an instance of ErrorWithCause.
     * @param message - Error message.
     * @param cause - Original error, causing this error.
     */
    function ErrorWithCause(message, cause) {
        var _newTarget = this.constructor;
        var _this = 
        // There is an issue with the prototype chain when extending from Error: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
        _super.call(this, message) || this;
        _this.cause = cause;
        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain
        _this.name = 'ErrorWithCause';
        // Stack is a non-standard property according to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
        if (_this.stack && (cause === null || cause === void 0 ? void 0 : cause.stack)) {
            _this.stack = "".concat(_this.stack).concat(string_formatter_1.unixEOL, "Caused by:").concat(string_formatter_1.unixEOL).concat(cause.stack);
        }
        return _this;
    }
    Object.defineProperty(ErrorWithCause.prototype, "rootCause", {
        /**
         * Root cause of the error.
         * If there are multiple errors caused one by another, the root cause is the first error that occurred.
         * In case there is no root cause.
         */
        get: function () {
            return isErrorWithCause(this.cause) ? this.cause.rootCause : this.cause;
        },
        enumerable: false,
        configurable: true
    });
    return ErrorWithCause;
}(Error));
exports.ErrorWithCause = ErrorWithCause;
/**
 * Type guard to check whether an error is of type ErrorWithCause.
 * @param err - An error.
 * @returns Whether the given error is of type ErrorWithCause.
 */
function isErrorWithCause(err) {
    return (err === null || err === void 0 ? void 0 : err.name) === 'ErrorWithCause';
}
exports.isErrorWithCause = isErrorWithCause;
//# sourceMappingURL=error-with-cause.js.map