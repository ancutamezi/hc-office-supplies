"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAnalyticsData = exports.performUsageAnalytics = void 0;
var fs_1 = require("fs");
var path_1 = require("path");
var util_1 = require("@sap-cloud-sdk/util");
var axios_1 = __importDefault(require("axios"));
var analytics_data_1 = require("./analytics-data");
var config_1 = require("./config");
var usageAnalyticsBlog = 'https://blogs.sap.com/2018/10/23/usage-analytics-s4sdk/';
var defaultURI = 'https://webanalytics.cfapps.eu10.hana.ondemand.com/tracker/log';
var logger = (0, util_1.createLogger)('usage-analytics');
var defaultParameters = {
    action_name: 'SAP S/4HANA Cloud SDK',
    url: 'https://blogs.sap.com/2018/10/23/usage-analytics-s4sdk/',
    idsite: 'b67a7f90-dc52-72f0-cbac-18bf4147456a',
    idsitesub: 'test-jssdk',
    event_type: 'npm_install'
};
var defaultOptions = {
    useSalt: true,
    uri: defaultURI,
    idsitesub: defaultParameters.idsitesub,
    event_type: defaultParameters.event_type
};
/**
 * @hidden
 * Get and send development environment data based on the context of the given caller path using the given options.
 * The callerPath is necessary to determine whether usage analytics data will be sent or not.
 * @param callerPath - Absolute path of the script from which the function is called.
 * @param options - Usage analytic options.
 */
function performUsageAnalytics(callerPath, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var configPath, config, data, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    if (!calledFromCentralDependency(callerPath)) return [3 /*break*/, 3];
                    configPath = (0, config_1.findConfigPath)();
                    config = configPath && JSON.parse((0, fs_1.readFileSync)(configPath, 'utf8'));
                    if (!(config === null || config === void 0 ? void 0 : config.enabled)) return [3 /*break*/, 3];
                    config = (0, config_1.enforceValidConfig)(config);
                    return [4 /*yield*/, (0, analytics_data_1.getAnalyticsData)(config)];
                case 1:
                    data = _a.sent();
                    return [4 /*yield*/, sendAnalyticsData(config, data, options).catch(logErrorAndContinue)];
                case 2:
                    _a.sent();
                    printThanksAndDisclaimer();
                    printCollectedData(data);
                    _a.label = 3;
                case 3: return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    logErrorAndContinue(error_1);
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.performUsageAnalytics = performUsageAnalytics;
/**
 * @hidden
 * Sends development environment data to SAP Web Analytics.
 * For detailed information, check https://github.com/SAP/cloud-sdk-cli/blob/main/usage-analytics.md.
 * @param config - Configuration for web analytics.
 * @param data - Data to be sent.
 * @param options - Analytics options.
 * @returns A promise to the response of the request.
 */
function sendAnalyticsData(config, data, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var mergedOption;
        return __generator(this, function (_a) {
            if (!config.enabled) {
                return [2 /*return*/];
            }
            mergedOption = __assign(__assign({}, defaultOptions), options);
            return [2 /*return*/, axios_1.default
                    .get(mergedOption.uri, {
                    params: __assign(__assign({}, getSWAParameters(mergedOption)), payloadToCustomParameters(data))
                })
                    .catch(function (error) {
                    throw new util_1.ErrorWithCause('Failed to send usage analytics data.', error);
                })];
        });
    });
}
exports.sendAnalyticsData = sendAnalyticsData;
/**
 * @hidden
 * Creates SAP Web Analytics regular parameters.
 * @param options - Request options.
 * @returns SAP Web Analytics regular parameters.
 */
function getSWAParameters(options) {
    return {
        action_name: defaultParameters.action_name,
        url: defaultParameters.url,
        idsite: defaultParameters.idsite,
        idsitesub: options.idsitesub
            ? options.idsitesub
            : defaultParameters.idsitesub,
        event_type: options.event_type
            ? options.event_type
            : defaultParameters.event_type
    };
}
function calledFromCentralDependency(callerPath) {
    var numNodeModulesInPath = callerPath
        .split(path_1.sep)
        .filter(function (dir) { return dir === 'node_modules'; }).length;
    // Assuming that npm will always flatten and dedupe dependencies when it can, we can deduce the following
    // If there is no "node_modules" in the given path, this script is probably called as part of the SDK dev lifecycle
    // If there are more than 1 "node_modules" path segments, this dependency is the dependency of another dependency
    // This can happen if users depend on e.g. core@1.2.3 and bupa@1.2.4 (then there will be both core@1.2.3 and core@1.2.4)
    // Only if there is exactly one "node_modules" path segment, this script is called on the postinstall of a direct dependency to core
    return numNodeModulesInPath === 1;
}
/**
 * @hidden
 * Creates SAP Web Analytics custom parameters. It maps user data to an object format compliant with SAP Web Analytics requirements.
 * Example:
 * ```
 * {
 *   project_id: "myProjectId",
 *   os: "myOsInfo",
 *   node: "nodeVersion",
 *   npm: "npmVersion",
 *   typescript: "false",
 *   sdk_dependencies: "myCloudDependencies",
 *   third_party_dependencies: "myDependencies"
 * }
 * ```
 * is converted to
 * ```
 * {
 *   custom1: "project_id",
 *   e_a: "myProjectId",
 *   custom2: "os",
 *   e_2: "myOsInfo",
 *   custom3: "node",
 *   e_3: "nodeVersion",
 *   custom4: "npm",
 *   e_4: "npmVersion",
 *   custom5: "typescript",
 *   e_5: "false",
 *   custom6: "sdk_dependencies",
 *   e_6: "myCloudDependencies",
 *   custom7: "third_party_dependencies",
 *   e_7: "myDependencies"
 * }
 *```
 * Notice: Properties order of the passed parameters is relevant in determining the values of the mapped object.
 * @param params - User data.
 * @returns SAP Web Analytics custom parameters.
 */
function payloadToCustomParameters(params) {
    var i = 1;
    return Object.entries(params).reduce(function (prev, _a) {
        var key = _a[0], value = _a[1];
        prev['custom' + i] = key;
        prev['e_' + (i === 1 ? 'a' : i)] = value;
        i++;
        return prev;
    }, {});
}
function printThanksAndDisclaimer() {
    logger.info("SAP Cloud SDK - Usage Analytics\n  Thank you for contributing to our anonymized usage statistics. This allows us to improve the SAP Cloud SDK based on your usage.\n  We respect your privacy and intellectual property. Therefore, we only collect non-sensitive data about the use of the SDK.\n  We do not collect personal information or data about the inner workings of your project. If you prefer to opt out or want to learn more, visit:\n  ".concat(usageAnalyticsBlog, "\n  "));
}
function printCollectedData(data) {
    logger.info("The following data has been collected:".concat(util_1.unixEOL));
    logger.info(JSON.stringify(data, null, 2));
}
function logErrorAndContinue(error) {
    logger.error('Something went wrong while trying to send usage analytics data!');
    logger.error(error.stack);
}
//# sourceMappingURL=usage-analytics.js.map