"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enforceValidConfig = exports.generateConfig = exports.findConfigPath = exports.writeConfig = exports.configFileName = void 0;
var fs_1 = require("fs");
var path_1 = require("path");
var util_1 = require("@sap-cloud-sdk/util");
var util_2 = require("./util");
var logger = (0, util_1.createLogger)('analytics');
/**
 * Name of the configuration file
 * @hidden
 */
exports.configFileName = 'sap-cloud-sdk-analytics.json';
/**
 * Write the given configuration to the given path.
 * @param config - Config to be written
 * @param path - Path to write the config to. Defaults to the result of [[findConfigPath]]
 * @hidden
 */
function writeConfig(config, path) {
    // WriteConfig is only called from generateConfig (where a path is provided)
    // Or when the salt is missing and the config needs to be updated, so we can assume findConfigPath to find something
    var configPath = path ? (0, path_1.resolve)(path, exports.configFileName) : findConfigPath();
    (0, fs_1.writeFileSync)(configPath, JSON.stringify(config, undefined, 2), 'utf8');
}
exports.writeConfig = writeConfig;
/**
 * Find the path to the configuration file.
 * @returns The path to the config file if it exists and was found, otherwise `undefined`.
 * @hidden
 */
function findConfigPath() {
    var path = (0, util_1.findProjectRoot)((0, path_1.resolve)());
    if (path && (0, fs_1.existsSync)((0, path_1.resolve)(path, exports.configFileName))) {
        return (0, path_1.resolve)(path, exports.configFileName);
    }
}
exports.findConfigPath = findConfigPath;
/**
 * Create configuration and write to the given path.
 * @param path - Path to the directory in which a new config file should be generated.
 * @hidden
 */
function generateConfig(path) {
    if ((0, fs_1.existsSync)((0, path_1.join)(path, exports.configFileName))) {
        logger.warn("A ".concat(exports.configFileName, " at path ").concat(path, " already exists. Skipping generation of new config file!"));
        return;
    }
    writeConfig(newConfig(), path);
}
exports.generateConfig = generateConfig;
/**
 * Validates the given config and updates it if necessary.
 * @param config - The config to validate
 * @returns The config in a valid state.
 * @hidden
 */
function enforceValidConfig(config) {
    if (!config.salt) {
        config.salt = (0, util_2.randomSalt)();
        writeConfig(config);
    }
    return config;
}
exports.enforceValidConfig = enforceValidConfig;
function newConfig() {
    return {
        enabled: true,
        salt: (0, util_2.randomSalt)()
    };
}
//# sourceMappingURL=config.js.map