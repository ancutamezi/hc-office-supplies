import type { Definition } from 'typescript-json-schema';
import type { SchemaType } from './specification/schemaAccess';
import type { FioriElementsVersion } from './specification/common/page';
import type { Page as PageV2 } from './specification/v2/page';
import type { Page as PageV4 } from './specification/v4/page';
import type { FileData, File, ExportResults } from './sync/common/types';
import type { ApplicationV2, ObjectPageConfig as ObjectPageConfigV2, ListReportConfig as ListReportConfigV2, OverviewPageConfig as OverviewPageConfigV2, AnalyticalListPageConfig as AnalyticalListPageConfigV2, Manifest as ManifestV2, FlexChangeLayer } from './v2';
import type { ApplicationV4, ObjectPageConfig as ObjectPageConfigV4, ListReportConfig as ListReportConfigV4, Manifest as ManifestV4 } from './v4';
import type { ConvertedMetadata } from '@sap-ux/vocabularies-types';
import type { CustomPage, CustomTableColumn, CustomSection } from '@sap-ux/fe-fpm-writer';
import type { Editor } from 'mem-fs-editor';
import type { TemplateType } from './sync/common';
export declare type MessageMetadataType = (object | string | number)[];
/**
 * Interface used to define a logger for the specificaton API
 */
export interface ExtensionLogger {
    info: (message: string, ...meta: MessageMetadataType) => void;
    warning: (message: string, ...meta: MessageMetadataType) => void;
    error: (message: string, ...meta: MessageMetadataType) => void;
}
/**
 * Types for V2 schema generation
 */
export declare type GenerateListReportV2 = {
    [SchemaType.ListReport]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        manifest: object;
        fragments: FileData[];
        logger?: ExtensionLogger;
    };
};
export declare type GenerateObjectPageV2 = {
    [SchemaType.ObjectPage]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        manifest: object;
        fragments: FileData[];
        logger?: ExtensionLogger;
    };
};
export declare type GenerateOverviewPageV2 = {
    [SchemaType.OverviewPage]: {
        genericSchema: object;
        logger?: ExtensionLogger;
    };
};
export declare type GenerateAnalyticalListPageV2 = {
    [SchemaType.AnalyticalListPage]: {
        genericSchema: object;
        entitySet: string;
        annotations: object[];
        manifest: object;
        fragments: FileData[];
        logger?: ExtensionLogger;
    };
};
export declare type GenerateSchemaV2Type = GenerateListReportV2 | GenerateObjectPageV2 | GenerateOverviewPageV2 | GenerateAnalyticalListPageV2;
export interface GenerateSchemaV2 {
    [FioriElementsVersion.v2]: GenerateSchemaV2Type;
}
/**
 * Types for V4 schema generation
 */
export declare type GenerateListReportV4 = {
    [SchemaType.ListReport]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        logger?: ExtensionLogger;
        manifest?: object;
    };
};
export declare type GenerateObjectPageV4 = {
    [SchemaType.ObjectPage]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        manifest: object;
        logger?: ExtensionLogger;
    };
};
export declare type GenerateAnalyticalListPageV4 = {
    [SchemaType.AnalyticalListPage]: {
        genericSchema: object;
        entitySet: string;
        annotations: FileData[];
        logger?: ExtensionLogger;
        manifest?: object;
    };
};
export declare type GenerateSchemaV4Type = GenerateListReportV4 | GenerateObjectPageV4 | GenerateAnalyticalListPageV4;
export interface GenerateSchemaV4 {
    [FioriElementsVersion.v4]: GenerateSchemaV4Type;
}
/**
 * Union types for schema generation
 */
export declare type GenerateSchemaParameters = GenerateSchemaV2 | GenerateSchemaV4;
/**
 * Types for v2 export
 */
export declare type ExportListReportV2Parameters = {
    appId: string;
    page: PageV2;
    manifest: object;
    jsonSchema: object;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ExportListReportV2 = {
    [SchemaType.ListReport]: ExportListReportV2Parameters;
};
export declare type ExportAnalyticalListPageV2Parameters = ExportListReportV2Parameters;
export declare type ExportAnalyticalListPageV2 = {
    [SchemaType.AnalyticalListPage]: ExportAnalyticalListPageV2Parameters;
};
export declare type ExportOverviewPageV2Parameters = {
    page: PageV2;
    manifest: object;
    jsonSchema: object;
    logger?: ExtensionLogger;
};
export declare type ExportOverviewPageV2 = {
    [SchemaType.OverviewPage]: ExportOverviewPageV2Parameters;
};
export declare type ExportObjectPageV2Parameters = {
    appId: string;
    page: PageV2;
    manifest: object;
    jsonSchema: object;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ExportObjectPageV2 = {
    [SchemaType.ObjectPage]: ExportObjectPageV2Parameters;
};
export declare type ExportAppV2 = {
    [SchemaType.Application]: {
        application: ApplicationV2;
        manifest: object;
        jsonSchema: object;
        logger?: ExtensionLogger;
    };
};
/**
 * Types for v4 export
 */
export declare type ExportListReportV4Parameters = {
    appId: string;
    page: PageV4;
    manifest: object;
    jsonSchema: object;
    logger?: ExtensionLogger;
    appRootPath?: string;
};
export declare type ExportListReportV4 = {
    [SchemaType.ListReport]: ExportListReportV4Parameters;
};
export declare type ExportAnalyticalListPageV4Parameters = ExportListReportV4Parameters;
export declare type ExportAnalyticalListPageV4 = {
    [SchemaType.AnalyticalListPage]: ExportAnalyticalListPageV4Parameters;
};
export declare type ExportObjectPageV4Parameters = {
    appId: string;
    page: PageV4;
    manifest: object;
    jsonSchema: object;
    logger?: ExtensionLogger;
    appRootPath?: string;
};
export declare type ExportObjectPageV4 = {
    [SchemaType.ObjectPage]: ExportObjectPageV4Parameters;
};
export declare type ExportAppV4 = {
    [SchemaType.Application]: {
        application: ApplicationV4;
        manifest: object;
        jsonSchema: object;
        logger?: ExtensionLogger;
    };
};
export declare type ExportParametersV4Type = ExportListReportV4 | ExportObjectPageV4 | ExportAppV4 | ExportAnalyticalListPageV4;
export interface ExportParametersV4 {
    [FioriElementsVersion.v4]: ExportParametersV4Type;
}
export interface UI5Version {
    ui5Version?: string;
    layer?: FlexChangeLayer;
}
export declare type ExportParametersV2Type = ExportListReportV2 | ExportObjectPageV2 | ExportOverviewPageV2 | ExportAppV2 | ExportAnalyticalListPageV2;
export interface ExportParametersV2 {
    [FioriElementsVersion.v2]: ExportParametersV2Type;
}
/**
 * Union types for export
 */
export declare type ExportConfigParameters = UI5Version & (ExportParametersV2 | ExportParametersV4);
/**
 * Types for v2 import
 */
export declare type ImportListReportV2Parameters = {
    manifest: object;
    flex: string[];
    jsonSchema: object;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ImportListReportV2 = {
    [SchemaType.ListReport]: ImportListReportV2Parameters;
};
export declare type ImportObjectPageV2Parameters = {
    manifest: object;
    flex: string[];
    jsonSchema: object;
    entitySet: string;
    fragments?: FileData[];
    logger?: ExtensionLogger;
};
export declare type ImportObjectPageV2 = {
    [SchemaType.ObjectPage]: ImportObjectPageV2Parameters;
};
export declare type ImportOverviewPageV2Parameters = {
    manifest: object;
    jsonSchema: object;
    logger?: ExtensionLogger;
};
export declare type ImportOverviewPageV2 = {
    [SchemaType.OverviewPage]: ImportOverviewPageV2Parameters;
};
export declare type ImportALPV2Parameters = ImportListReportV2Parameters;
export declare type ImportAnalyticalListPageV2 = {
    [SchemaType.AnalyticalListPage]: ImportALPV2Parameters;
};
/**
 * Types for v4 import
 */
export declare type ImportListReportV4Parameters = {
    manifest: object;
    jsonSchema: Definition;
    logger?: ExtensionLogger;
};
export declare type ImportListReportV4 = {
    [SchemaType.ListReport]: ImportListReportV4Parameters;
};
export declare type ImportObjectPageV4Parameters = {
    manifest: object;
    jsonSchema: Definition;
    routingId: string;
    logger?: ExtensionLogger;
};
export declare type ImportObjectPageV4 = {
    [SchemaType.ObjectPage]: ImportObjectPageV4Parameters;
};
export declare type ImportAnalyticalListPageV4Parameters = ImportListReportV4Parameters;
export declare type ImportAnalyticalListPageV4 = {
    [SchemaType.AnalyticalListPage]: ImportAnalyticalListPageV4Parameters;
};
export declare type ImportParametersV4Type = ImportListReportV4 | ImportObjectPageV4 | ImportAnalyticalListPageV4;
export interface ImportParametersV4 {
    [FioriElementsVersion.v4]: ImportParametersV4Type;
}
export declare type ImportParametersV2Type = ImportListReportV2 | ImportObjectPageV2 | ImportOverviewPageV2 | ImportAnalyticalListPageV2;
export interface ImportParametersV2 {
    [FioriElementsVersion.v2]: ImportParametersV2Type;
}
export declare type ImportResultsV2 = ListReportConfigV2 | ObjectPageConfigV2 | OverviewPageConfigV2 | AnalyticalListPageConfigV2;
export declare type ImportResultsV4 = ListReportConfigV4 | ObjectPageConfigV4;
export declare type ImportConfigParameters = ImportParametersV2 | ImportParametersV4;
export declare type ImportResults = ImportResultsV2 | ImportResultsV4;
/**
 * Types for project import
 */
export interface ImportProjectParameters {
    manifest: ManifestV2 | ManifestV4;
    annotations: FileData[];
    flex?: string[];
    fragments?: FileData[];
    logger?: ExtensionLogger;
}
export interface GenerateAppSchemaParameters {
    templateType: TemplateType;
    manifest: ManifestV2 | ManifestV4;
    serviceAVT: ConvertedMetadata;
    fioriElementsVersion: FioriElementsVersion;
    fragments?: FileData[];
    logger?: ExtensionLogger;
}
export declare enum CustomExtensionType {
    CustomPage = "CustomPage",
    CustomColumn = "CustomColumn",
    CustomSection = "CustomSection"
}
export interface GenerateCustomExtensionParams {
    customExtension: CustomExtensionType;
    basePath: string;
    data: CustomExtensionData;
    fsEditor?: Editor;
}
export declare type CustomExtensionData = CustomPage | CustomTableColumn | CustomSection;
export declare const FPMWriterMap: Map<CustomExtensionType, (basePath: string, data: CustomExtensionData, fs?: Editor) => Editor>;
/**
 * API Version
 */
export interface ApiVersion {
    version?: string;
    fpmWriter?: string;
}
/**
 * API interface
 */
export interface Specification {
    getGenericSchema: (FioriElementsVersion: any, SchemaType: any) => Promise<JSON>;
    generateSchema: (GenerateSchemaParameters: any) => object;
    exportConfig: (ExportConfigParameters: any) => ExportResults;
    importConfig: (ImportConfigParameters: any) => ImportResults;
    importProject: (ImportProjectParameters: any) => Promise<File[]>;
    getApiVersion: () => ApiVersion;
    importProjectSchema: (ImportProjectParameters: any) => Promise<File[]>;
    generateCustomExtension: (GenerateCustomExtensionParams: any) => Editor;
}
