import type { File, ExportResults } from './sync/common/types';
import type { GenerateSchemaParameters, ExportConfigParameters, ImportConfigParameters, ImportProjectParameters, ApiVersion, GenerateCustomExtensionParams } from './apiTypes';
import type { Editor } from 'mem-fs-editor';
/**
 * Return the generic (project independent) JSON schema
 * @param specification - reference to spec
 * @param version - Fiori elements version (v2 or v4)
 * @param schemaType - type of the schema, e.g. ListReport, ObjectPage
 */
export { getGenericSchema } from './specification/schemaAccess';
/**
 * Generate JSON schema for a given Fiori elements version and page type
 * @param generateParameters: the input structure that contains the version, schema type, and parameters
 */
export declare function generateSchema(generateParameters: GenerateSchemaParameters): object;
/**
 * Exports a config (src/*.json, src/pages/*.json) to flex changes and manifest settings
 * @param exportParameters - parameters to control the export
 */
export declare function exportConfig(exportParameters: ExportConfigParameters): ExportResults;
/**
 * Imports manifest settings and flex changes to a config (src/*.json, src/pages/*.json)
 * @param importParameters - parameters to control the import
 */
export declare function importConfig(importParameters: ImportConfigParameters): object;
/**
 * Evaluates all project files and generates app schemas and configs out of it
 * @param importParameters - parameters to control the import; here: all relevant project files
 * @returns a list of files, comprising app schemas and configs
 */
export declare function importProject(importParameters: ImportProjectParameters): Promise<File[]>;
/**
 * Evaluates all project files and generates app schemas out of it, but no configs
 * @param importParameters - parameters to control the import; here: all relevant project files
 * @returns a list of files, comprising all app schemas
 */
export declare function importProjectSchema(importParameters: ImportProjectParameters): Promise<File[]>;
/**
 * Returns specification API version.
 * @return {ApiVersion} Object of API version.
 */
export declare function getApiVersion(): ApiVersion;
/**
 * Calls the FPM Writer for generating a custom extension
 *
 * @param customExtensionParams parameters for generating the custom extension
 * @returns {Editor} Instance of mem-fs-editor
 */
export declare function generateCustomExtension(customExtensionParams: GenerateCustomExtensionParams): Editor | undefined;
