import type { ExtensionLogger } from './apiTypes';
export declare const enum LogSeverity {
    Error = "error",
    Warning = "warning",
    Info = "info"
}
export declare const LogSeverityLabel: {
    error: string;
    warning: string;
    info: string;
};
export declare type LogMessage = string | object | undefined;
export interface RangePosition {
    line: number;
    character: number;
}
export interface Range {
    start: RangePosition;
    end: RangePosition;
}
export interface Location {
    path: string;
    range?: Range | string[];
}
/**
 * Internal representation of one log entry
 */
interface LogEntry {
    severity: LogSeverity;
    message: string;
    location?: Location;
}
/**
 * Function to create a new log entry and add it to the logger.
 * If no logger is passed, puts the message to the console
 * @param logger - the logger instance
 * @param message - the log message
 * @param meta - option list of strings/objects
 */
export declare const log: (logger: ExtensionLogger, logEntry: LogEntry, ...meta: (string | number | object)[]) => void;
export {};
