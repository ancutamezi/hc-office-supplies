import type { Definition } from 'typescript-json-schema';
import type { FileData } from '../../common';
import type { MetadataInstanceInterface } from '../../common/decoration/factory';
import type { PageType, PageTypeV4 } from '../../../specification/common';
import type { SapUiAppPageV2 } from '../../../specification/v2';
import type { AnnotationTerm, EntityType } from '@sap-ux/vocabularies-types';
import type { LineItem, SelectionFields } from '@sap-ux/vocabularies-types/vocabularies/UI';
import { ActionTypeV2 } from '../types';
/**
 * Processes a LineItem record of type DataFieldForAction and DataFieldForIntentBasedNavigation during app schema generation
 * @param appSchema - the app specific schema that shall get enhanced
 * @param entityType - the entity type as part of the AVT ConvertedMetadata
 * @param actions - actions definition in schema, parent object
 * @param lineItemProperties - properties of the line item collection: lineItemPath, lineItemRecord, lineItemId
 * @param actionType - type of action
 * @param recordIndex - record index in the collection
 */
export declare function handleActionRecord(appSchema: object, actions: object, lineItemProps: {
    lineItemPath: any;
    lineItemRecord: any;
    lineItemId: any;
    entityType: EntityType;
}, actionType: ActionTypeV2, recordIndex: number): void;
/**
 * Adds the line item records to the app schema (for the list report or an object page section comprising a table)
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConvertedMetadata
 * @param lineItemId - optional: in case of OP the parameter must be passed to distinguish the OP tables;
 *                      in case of LR or ALP no ID is passed, 'LineItems' is taken then.
 * @param customColumnRef - schema reference to custom column definition.
 */
export declare function addLineItemsType(appSchema: Definition, lineItemAnnotation: AnnotationTerm<LineItem>, entityType: EntityType, lineItemId?: string, customColumnRef?: string): void;
/**
 * Adds enum entries of possible leading properties for 'leadingProperty' property in TableCustomColumn properties.
 * @param appSchema - the app specific schema that shall get enhanced
 * @param entityType - the entity type as part of the AVT ConvertedMetadata
 * @param definitionName - definition name of CustomColumn definition
 */
export declare function addListReportLeadingProperties(appSchema: object, entityType: EntityType, definitionName: string): void;
/**
 * Adds enum entries of posible tabKey properties for 'leadingProperty' property in TableCustomColumn properties.
 * @param appSchema - the app specific schema that shall get enhanced
 * @param definitionName - definition name of CustomColumn definition
 * @param page - sapui5 page object
 */
export declare function addTabkeyEnum(appSchema: object, definitionName: string, page?: SapUiAppPageV2): void;
/**
 * Adds enum entries of posible fragment entries.
 * @param {object} appSchema The app specific schema that shall get enhanced.
 * @param {FileData[]} fragments Array of fragments.
 * @param {string[]} appId Application id.
 * @param {string} property Property name.
 * @param {string} definitionName Definition name of CustomColumn definition.
 */
export declare function addFragmentEnum(appSchema: Definition, fragments: FileData[], appId: string, property: string, definitionName: string): void;
/**
 * Adds the custom columns to the line item records of the app schema (for the list report comprising a table).
 * @param {object} appSchema The app specific schema that shall get enhanced.
 * @param {EntityType} entityType The entity type as part of the AVT ConvertedMetadata.
 * @param {SapUiAppPageV2} page Sapui5 page object.
 * @param {object} manifest Application manifest.
 * @param {FileData[]} [fragments] Array of fragments.
 * @param {string} [customColumnsDefinitionName=DefinitionName.CustomColumns] Definition name of Custom Columns definition.
 * @param {string} [customColumnDefinitionName=DefinitionName.CustomColumn] Definition name of Custom Column definition.
 */
export declare function addTableColumnExtensions(appSchema: object, entityType: EntityType, page: SapUiAppPageV2, manifest: object, fragments?: FileData[], customColumnsDefinitionName?: string, customColumnDefinitionName?: string): void;
/**
 * Apply post-processing rules as specified in form of "generate" at the syncRule
 * @param schema - given app schema, to be adapted
 * @param schemaDefinition - the current entry point or definition in the app schema
 * @param pageType - page type
 * @param factory - factory for creating metadata instances
 */
export declare function processMetadata(schema: object, schemaDefinition: object, metaDataDefinition: {
    [key: string]: any;
}, pageType: PageType | PageTypeV4, factory: MetadataInstanceInterface): void;
/**
 * Method updates passed 'enum' array by removing passed matching entries.
 * @param {Array<unknown>} values Array of values.
 * @param {Array<unknown>} valuesToRemove Array of values to remove.
 */
export declare function removeElementsFromEnum(values: Array<unknown>, valuesToRemove: Array<unknown>): void;
/**
 * Adds the selection fields to the app schema, as properties of the Filterbar
 * @param entityType - the entity type as part of the AVT ConvertedMetadata
 * @param appSchema - the app specific schema that shall get enhanced
 * @param selectionFieldsAnnotation - the UI.SelectionField annotation
 */
export declare function addSelectionFields(appSchema: object, selectionFieldsAnnotation: AnnotationTerm<SelectionFields>, entityType: EntityType): void;
/**
 * Add entityProperties to passed a passed enum entry
 * @param {string[]} appSchemaEnum - Enum to be enhanced
 * @param {EntityType} entityType - Given entity type for which entries shall get generated
 */
export declare function addEntityPropertiesToEnum(appSchemaEnum: string[], entityType: EntityType): void;
