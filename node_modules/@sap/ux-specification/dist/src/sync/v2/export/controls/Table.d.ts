/// <reference types="@sapui5/ts-types-esm" />
import type { AnalyticalTable as AnalyticalTableConfig, TableALP as TableALPConfig, CommonTableSettings as CommonTableConfig, DefaultContentView, DefaultFilterMode, GenericColumns, GridTable as GridTableConfig, LoadDataOnAppLaunchSettings, QuickVariantSelectionX as QuickVariantSelectionXInterface, ResponsiveTable as ResponsiveTableConfig, TreeTable as TreeTableConfig, Strategy, FieldPath as FieldPathInterface, QuickVariant, QuickVariantX, CreationFieldKeys, MultiEdit as MultiEditInterface, ToolBar, IgnoredFieldsType } from '../../../../specification/v2';
import { TableTypeV2 } from '../../../../specification/v2';
import type { ControlTypeFunction, DeprecatedProperties } from '../../../common';
import type { PopinLayout } from 'sap/m/library';
import type { smarttable } from 'sap/ui/comp/library';
export declare const getSmartTableControlId: (baseId: string, idBreadcrumbs: string[], _breadcrumbs: string[], controlType: ControlTypeFunction) => string;
export declare function importCreateParameters(manifestSection: object): object;
export declare function exportCreateParameters(manifestSection: unknown, configPart: Fields4Dialog): void;
export declare class CreateWithFilters {
    strategy: Strategy;
}
export declare class MultiEdit implements MultiEditInterface {
    enabled?: boolean;
    annotationPath?: string;
    ignoredFields?: IgnoredFieldsType[];
}
export declare function exportType(manifestSection: unknown, configPart: object): void;
export declare function deleteType(manifestSection: unknown): void;
export declare class DataLoadSettings {
    loadDataOnAppLaunch: LoadDataOnAppLaunchSettings;
}
export declare class FieldPath implements FieldPathInterface {
    path: string;
}
export declare class Fields4Dialog {
    fields: CreationFieldKeys;
}
export declare class QuickVariantSelection {
    showCounts?: boolean;
    variants: {
        [key: number]: QuickVariant;
    };
}
export declare class QuickVariantSelectionX implements QuickVariantSelectionXInterface {
    showCounts?: boolean;
    enableAutoBinding?: boolean;
    variants: {
        [key: number]: QuickVariantX;
    };
}
export declare class CommonTableSettings<COLS = GenericColumns> implements CommonTableConfig<COLS> {
    getDeprecated: () => DeprecatedProperties;
    createWithParameterDialog?: Fields4Dialog;
    showTablePersonalisation?: boolean;
    useExportToExcel?: boolean;
    exportType?: smarttable.ExportType;
    fitContainer?: boolean;
    quickVariantSelection?: QuickVariantSelection;
    quickVariantSelectionX?: QuickVariantSelectionX;
    multiSelect?: boolean;
    selectAll?: boolean;
    selectionLimit?: number;
    dataLoadSettings?: DataLoadSettings;
    condensedTableLayout?: boolean;
    enableTableFilterInPageVariant?: boolean;
    toolBar?: ToolBar;
}
export declare class ResponsiveTable extends CommonTableSettings implements ResponsiveTableConfig {
    type?: TableTypeV2.ResponsiveTable;
    createWithFilters?: CreateWithFilters;
    popinLayout?: PopinLayout;
    includeItemInSelection?: boolean;
    inlineDelete?: boolean;
    showDraftToggle?: boolean;
    growingThreshold?: number;
    multiEdit?: MultiEdit;
}
export declare class TreeTable extends CommonTableSettings implements TreeTableConfig {
    type?: TableTypeV2.TreeTable;
    showDraftToggle?: boolean;
}
export declare class AnalyticalTable extends CommonTableSettings implements AnalyticalTableConfig {
    type?: TableTypeV2.AnalyticalTable;
    qualifier?: string;
    defaultContentView?: DefaultContentView;
    defaultFilterMode?: DefaultFilterMode;
    contentTitle?: string;
    autoHide?: boolean;
    allFiltersAsInParameters?: boolean;
    createWithFilters?: CreateWithFilters;
    showDraftToggle?: boolean;
}
export declare class TableALP extends CommonTableSettings implements TableALPConfig {
    type?: TableTypeV2.AnalyticalTable & TableTypeV2.ResponsiveTable & TableTypeV2.GridTable;
    qualifier?: string;
    defaultContentView?: DefaultContentView;
    defaultFilterMode?: DefaultFilterMode;
    contentTitle?: string;
    autoHide?: boolean;
    allFiltersAsInParameters?: boolean;
}
export declare class ALPResponsiveTable extends TableALP {
    growingThreshold?: number;
}
export declare class ALPGridTable extends TableALP {
}
export declare class ALPAnalyticalTable extends TableALP {
}
export declare class GridTable extends CommonTableSettings implements GridTableConfig {
    type?: TableTypeV2.GridTable;
    createWithFilters?: CreateWithFilters;
    showDraftToggle?: boolean;
}
