import type { TableSettings as TableSettingsIF, Table as TableInterface, TableCreationMode as TableCreationModeIF, ViewTableCreationMode as ViewTableCreationModeIF, PersonalizationType as PersonalizationTypeIF, ViewPersonalizationType as ViewPersonalizationTypeIF, QuickVariantSelectionV4 as QuickVariantSelectionV4IF, ALPChartView as ALPChartIF, LRChartView as LRChartViewIF, ALPTableView as ALPTableIF, LRTableView as LRTableViewIF, TableTypeV4, TableCreationModeType, ViewChartToolBar, SelectionMode, InitialLoadType, AnnotationPathAsObject, MultiTableModeV4 as MultiTableModeIF } from '../../../../specification/v4';
import type { ToolBar } from './ToolBar';
/**
 * sync rule function for export of creationMode.name
 * @param manifestSection - section in manifest comprising the table settings
 * @param configObject - section in config.json describing the table settings
 * @param key - key or property in config.json
 * @param manifestKey - key or property in manifest
 */
export declare function exportCreationModeName(manifestSection: unknown, configObject: unknown, key: string, manifestKey: string): void;
/**
 * common sync rule function for export of personalization properties
 * @param manifestSection - section in manifest comprising the table settings
 * @param configObject - section in config.json describing the table settings
 * @param key - key or property in config.json
 * @param manifestKey - key or property in manifest
 */
export declare function exportPersonalizationProperty(manifestSection: unknown, configObject: unknown, key: string, manifestKey: string): void;
/**
 * sync rule function for the deletion of creationMode.name
 * @param manifestSection - section in manifest comprising the table settings
 * @param manifestKey - key or property in manifest
 */
export declare function deleteCreationModeName(manifestSection: unknown, manifestKey: string): void;
/**
 * common sync rule function for the deletion of any property of personalization
 * @param manifestSection - section in manifest comprising the table settings
 * @param _configObject - page config object
 * @param _key - key or property in page config object
 * @param manifestKey - key or property in manifest
 */
export declare function deletePersonalizationProperty(manifestSection: unknown, _configObject: object, _key: string, manifestKey: string): void;
/**
 * sync rule function for export of creationMode.createAtEnd
 * @param manifestSection - section in manifest comprising the table settings
 * @param configObject - section in config.json describing the table settings
 * @param key - key or property in config.json
 * @param manifestKey - key or property in manifest
 */
export declare function exportCreationModeCreateAtEnd(manifestSection: unknown, configObject: unknown, key: string, manifestKey: string): void;
/**
 * sync rule function for the deletion of creationMode.createAtEnd
 * @param manifestSection - section in manifest comprising the table settings
 * @param manifestKey - key or property in manifest
 */
export declare function deleteCreationModeCreateAtEnd(manifestSection: unknown, manifestKey: string): void;
/**********************************
 * Sync class for TableCreationMode
 */
export declare class TableCreationMode implements TableCreationModeIF {
    name?: TableCreationModeType;
    createAtEnd?: boolean;
}
/**********************************
 * Sync class for TableCreationMode
 */
export declare class ViewTableCreationMode implements ViewTableCreationModeIF {
    name?: TableCreationModeType;
    createAtEnd?: boolean;
}
/************************************
 * Sync class for PersonalizationType
 */
export declare class PersonalizationType implements PersonalizationTypeIF {
    column?: boolean;
    sort?: boolean;
    filter?: boolean;
}
export declare class ViewPersonalizationType implements ViewPersonalizationTypeIF {
    column?: boolean;
    sort?: boolean;
    filter?: boolean;
}
/****************************************
 * Sync class for QuickVariantSelectionV4
 */
export declare class QuickVariantSelectionV4 implements QuickVariantSelectionV4IF {
    paths: AnnotationPathAsObject[];
    hideTableTitle?: boolean;
    showCounts?: boolean;
}
/****************************************
 * Sync class for TableSettings
 */
export declare class TableSettings implements TableSettingsIF {
    type?: TableTypeV4;
    creationMode?: TableCreationMode;
    personalization?: PersonalizationType;
    selectionMode?: SelectionMode;
    selectAll?: boolean;
    selectionLimit?: number;
    enableExport?: boolean;
    quickVariantSelection?: QuickVariantSelectionV4;
    condensedTableLayout?: boolean;
}
/****************************************
 * Sync class for ALPChartView (renamed due to indirection in app schema)
 */
export declare class ALPChart implements ALPChartIF {
    annotationPath: string;
    toolBar?: ViewChartToolBar;
}
/****************************************
 * Sync class for view table settings
 */
export declare class TableViewSettings implements TableSettingsIF {
    type?: TableTypeV4;
    creationMode?: TableCreationMode;
    personalization?: ViewPersonalizationType;
    selectionMode?: SelectionMode;
    selectAll?: boolean;
    selectionLimit?: number;
    enableExport?: boolean;
    quickVariantSelection?: QuickVariantSelectionV4;
    condensedTableLayout?: boolean;
}
/****************************************
 * Sync class for ALPTableView (renamed due to indirection in app schema)
 */
export declare class ALPTable extends TableViewSettings implements ALPTableIF {
    annotationPath: string;
    initialLoad?: InitialLoadType;
    toolBar?: ToolBar;
}
/****************************************
 * Sync class for LRChartView
 */
export declare class LRChartView implements LRChartViewIF {
    key: string;
    index: number;
    annotationPath: string;
    entitySet?: string;
    toolBar?: ViewChartToolBar;
}
/****************************************
 * Sync class for LRTableView
 */
export declare class LRTableView extends TableViewSettings implements LRTableViewIF {
    key: string;
    index: number;
    annotationPath: string;
    keepPreviousPersonalization?: boolean;
    entitySet?: string;
    toolBar?: ToolBar;
}
/**
 * LR multi-view: own class for properties on views' level
 */
export declare class MultiTableModeV4 implements MultiTableModeIF {
    [key: string]: LRTableView | LRChartView | boolean;
    showCounts?: boolean;
}
/****************************************
 * Sync class for Table
 */
export declare class Table extends TableSettings implements TableInterface {
    annotationPath?: string;
    views?: MultiTableModeV4;
    initialLoad?: InitialLoadType;
    toolBar?: ToolBar;
}
