import type { FileData } from '../../common/types';
import { TemplateType } from '../../common/utils';
import type { ExtensionLogger } from '../../../apiTypes';
/**
 * Generates the app specific schema of an object page out of the generic schema for the same page.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySetName - the base entity set of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param {FileData[]} fragments - list of fragment files and their content
 *
 * @returns the app specific JSON schema
 */
export declare function generateObjectPageInterfaceV4(genericSchema: object, entitySet: string, annotations: FileData[], manifest: object, logger?: ExtensionLogger, fragments?: FileData[]): object;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {TemplateType} templateType - the template type allows distinguishing LR and ALP
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySetName - the base entity set of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param manifest - manifest.json of the app
 *
 * @returns the app specific JSON schema
 */
export declare function generateListReportInterfaceV4(templateType: TemplateType, genericSchema: object, entitySetName: string, annotations: FileData[], logger?: ExtensionLogger, manifest?: object): object;
