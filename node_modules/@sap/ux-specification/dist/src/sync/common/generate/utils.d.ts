import type { AnnotationTerm, ConvertedMetadata, EntitySet, EntityType } from '@sap-ux/vocabularies-types';
import type { LineItem } from '@sap-ux/vocabularies-types/vocabularies/UI';
import type { Definition } from 'typescript-json-schema';
import type { FacetConfig, FacetSection, SectionType } from '..';
import type { SectionTypeV2 } from '../../v2/types';
import type { PresentationVariantV4 } from '../../v4/types';
import { UIAnnotationTerms } from '@sap-ux/vocabularies-types/vocabularies/UI';
import { DefinitionName } from '..';
/**
 * Adds an enum filled with existing UI annotations of the given list (validAnnotations)
 * @param {EntityType} entityType
 * @param {UIAnnotationTerms[]} validAnnotations
 * @param {Definition} annoPath - the annotation path property in the app schema where the enum shall be added
 */
export declare function addEnumForValidAnnotations(entityType: EntityType, validAnnotations: UIAnnotationTerms[], annoPath: Definition): void;
/**
 * Adds an enum filled with existing UI annotations for single-tab variants of a table
 * @param {EntityType} entityType
 * @param {Definition} appSchema - app specific JSON schema
 * @param definitionName - name of the definition in the app schema
 */
export declare function addEnumForSingleTabVariant(entityType: EntityType, appSchema: Definition, definitionName: string): void;
/**
 * Adds an enum filled with existing UI annotations for multi-tab variants of a table
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 * @param {EntitySet} entitySet - current entity set of the page or view
 */
export declare function addEnumForMultiTabVariant(appSchema: Definition, definitionName: string, entitySet: EntitySet): void;
/**
 * Adds the enum values for entitySet as part of the multiple view scenario
 * @param {ConvertedMetadata} oDataServiceAVT - combined service metadata, as returned by annotation vocabularies tools
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
export declare function addEnumForVariantEntitySet(oDataServiceAVT: ConvertedMetadata, appSchema: Definition, definitionName: string): void;
/**
 * Adds an enum filled with existing UI annotations for annotationPath property in FilterBar
 * @param {EntityType} entityType
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
export declare function addEnumForFilterBarAnnotationPath(entityType: EntityType, appSchema: Definition, definitionName: string): void;
/**
 * Method adds definition for 'RelatedFacetKeys' as enum with description and adds references to 'RelatedFacetKeys' for custom section definitions.
 * @param {Definition} appSchema App specific schema that potentially gets enhanced
 * @param {string[]>} sectionDefinitions array of section definitions which should be updated with new reference to 'RelatedFacetKeys' enum.
 * @param {FacetSection[]} facetSections Array of facet section objects which is used to generate enum values.
 * @param {Array<keyof Omit<FacetSection, 'custom'>>} idProperties Array of property names which should be looked up in 'FacetSection' object.
 *  Please note that method depends on order and takes first non empty value associated to passed properties.
 */
export declare function addDefinitionForRelatedFacetKeys(appSchema: Definition, sectionDefinitions: string[], facetSections: FacetSection[], idProperties: Array<keyof Omit<FacetSection, 'custom'>>): void;
/**
 * Functions used both by V2 and V4 to add the common definitions for a line item to the app schema
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConvertedMetadata
 * @param lineItemId - line item ID, as comprise in stable ID
 * @param customColumnDefinitionName - (optional) definition name of custom column.
 *        Passed in the V4 case, then additional properties of this type will be allowed.
 * @returns the actions definition plus the annotation path to the given line item
 */
export declare function addCommonLineItemDefinitions(appSchema: Definition, lineItemAnnotation: AnnotationTerm<LineItem>, entityType: EntityType, lineItemId: string, customColumnDefinitionName?: string): {
    actions: Definition;
    footerActions: Definition;
    lineItemPath: string;
};
/**
 * Add schema definitions for fields of createWithParameterDialog
 * @param {object} appSchema - Application-specific schema, to be enhanced
 * @param {EntityType} entityType - Given entity type for which entries shall get generated
 * @param {string=} floorplanSuffix - floorplan specific suffix (optional)
 */
export declare function addFieldsType(appSchema: Definition, entityType: EntityType, floorplanSuffix?: string): void;
export declare enum DataType {
    String = "String",
    Rating = "Rating",
    Progress = "Progress",
    DataPoint = "DataPoint",
    Contact = "Contact",
    Address = "Address",
    Chart = "Chart",
    FieldGroup = "FieldGroup",
    IntentBasedNavigation = "IntentBasedNavigation"
}
/**
 * Determines the dataType of the target that shall be added to a property in schema
 * @param target - the given target
 * @returns - the dataType as string
 */
export declare function determineDataTypeOfTarget(target: any): string | undefined;
/**
 * Determines the dataType that shall be added to a property in schema, for any kind of field like
 * - field of a field group
 * - line item record
 * - selection field
 * @param field - the given field
 * @returns - the dataType as string
 */
export declare function determineDataType(field: object): string | undefined;
/**
 * Adds the dataType to the given schema field definition, if the data type cane be determined
 * @param definition - given schema definition
 * @param field - given field definition = annotation property, at AVT
 */
export declare function addDataTypeToDefinition(definition: object, field: object): void;
/**
 * Receives a facet key and returns the key as used in schema
 * @param facetKey - key of the facet, as used in annotation
 * @returns facetKeyInSchema - key of the facet, as used in schema
 */
export declare function getFacetKeyInSchema(facetKey: string): string;
/**
 * Adds an existing schema definition to a new definition in the app schema
 * @param definition name of definition, as used in schema
 * @param facetKey - key of the facet, as used in annotation
 * @param {Definition} appSchema App schema in general
 * @param {boolean} useDefinitionAsKey If set to false, facet key will solely be used as key, else encapsulated within definition key `definition<facetKey>`
 * @param subDefinitionName - sub definition, if different from the definition (e.g. subsection vs. section)
 * @returns {Definition} part of app schema that has been added and filled
 */
export declare function parseSchemaDefinition(definition: DefinitionName | SectionTypeV2, facetKey: string, appSchema: Definition, useDefinitionAsKey?: boolean, subDefinitionName?: DefinitionName): Definition;
/**
 * Creates a definition link for a facet and definition name
 * @param {DefinitionName} definition - name of definition, as used in schema
 * @param {string} facetKey - key of the facet, as used in annotation
 * @returns definition link of facet, as used in definition
 */
export declare function getFacetDefinitionLink(definition: DefinitionName | SectionTypeV2, facetKey: string): string;
/**
 * Creates and adds a reference link to a definition
 * @param {Definition} schemaPart - part of schema to add $ref to
 * @param {string} schemaRef - reference to be added
 * @param {string} schemaKey - key to be encapsulated within reference as `schemaRef<schemaKey>`
 * @returns reference link of facet, as used in definition
 */
export declare function addDefinitionRef(schemaPart: Definition, schemaRef: string, schemaKey?: string): void;
/**
 * Extracts annotationPath from facet or Chart/LineItem fullyQualifiedName
 * @param facet facet or Chart/LineItem
 * @returns {string} annotationPath
 */
export declare function getFacetAnnotationPath(facet: FacetConfig | PresentationVariantV4 | object): string | undefined;
/**
 * Adds definitions for Address and Contact items in object page sections to the app schema
 * @param {FacetConfig} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 */
export declare function handleAddressContact(facet: FacetConfig, facetKey: string, sections: Definition, appSchema: Definition, sectionPrefix: SectionType, subSectionPrefix?: SectionType, versionPostfix?: string): void;
