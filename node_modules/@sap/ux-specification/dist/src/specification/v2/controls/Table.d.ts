/// <reference types="@sapui5/ts-types-esm" />
import type { SAPUI5_FRAGMENT_CLASS } from '../../common/webapp/manifest/sapUi5';
import type { ToolBar } from './ToolBar';
import type { Action } from './Action';
import type { PopinLayout } from 'sap/m/library';
import type { smarttable } from 'sap/ui/comp/library';
import type { TextAlign } from 'sap/ui/core/library';
/**
 * Column
 * @isViewNode true
 */
export interface TableColumn {
    /**
     * The width property defines the width of the column.
     */
    width?: string;
    /**
     * The hAlign property defines the horizontal alignment of the column content.
     */
    hAlign?: TextAlign;
}
/**
 * Column Action
 * @isViewNode true
 */
export interface TableColumnAction extends Action, TableColumn {
}
/**
 * Custom Column
 * @isViewNode true
 */
export interface TableCustomColumn {
    /**
     * In case the fragment needs to be re-used for multiple tabs, the id property must be set to make the ids unique.
     */
    id?: string;
    /**
     * The label of the custom column, preferably as an i18n key.
     * @i18nClassification COL: Custom column header text
     */
    text?: string;
    /**
     * The column key
     */
    columnKey: string;
    /**
     * The index of the column in the overall collection; if undefined, the custom column will be added at the end of the table.
     */
    columnIndex?: number;
    /**
     * If the content of your custom column refers to a property (such as{Price}), you need to include a corresponding 'leadingProperty' entry in the column definition.
     */
    leadingProperty?: string;
    /**
     * The UI5 control used for your extension
     */
    className: typeof SAPUI5_FRAGMENT_CLASS;
    /**
     * The relative path to your fragment with path segments separated by '.'. The first element is the app ID.
     */
    fragmentName: string;
    /**
     * In case of a responsive table, you additionally need to specify a fragment for the table cells.
     */
    cellsFragmentName?: string;
    /**
     * If you use QuickVariantSelectionX, you need to define the extensions per tab. 'tabKey' is the key provided when defining the QuickVariantSelectionX.
     */
    tabKey?: string;
    /**
     * Type of custom column view extension.
     */
    extensionType: TableColumnExtensionTypeV2;
}
export declare enum customColumnViewTypes {
    XML = "XML"
}
export declare enum TableTypeV2 {
    ResponsiveTable = "ResponsiveTable",
    GridTable = "GridTable",
    AnalyticalTable = "AnalyticalTable",
    TreeTable = "TreeTable"
}
export declare enum TableColumnExtensionTypeV2 {
    ResponsiveTableColumnsExtension = "ResponsiveTableColumnsExtension",
    AnalyticalTableColumnsExtension = "AnalyticalTableColumnsExtension",
    TreeTableColumnsExtension = "TreeTableColumnsExtension",
    GridTableColumnsExtension = "GridTableColumnsExtension"
}
/**
 * Custom Columns
 * @isViewNode true
 */
export declare type TableCustomColumns = Array<TableCustomColumn>;
export interface GenericColumns {
    [key: string]: TableColumn | TableCustomColumns | TableColumnAction;
}
export interface QuickVariant {
    /**
     * A key entry that is used for initializing the corresponding SegmentedButton item. This entry is mandatory.
     */
    key: string;
    /**
     * Use annotationPath to define a specific variant that points to a SelectionVariant or SelectionPresentationVariant annotation.
     */
    annotationPath: string;
}
export interface QuickVariantX extends QuickVariant {
    /**
     * Represents the entity set that will be displayed in this variant
     */
    entitySet: string;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * The 'Select All' button is disabled by default. To enable it, set selectAll to true.
     */
    selectAll?: boolean;
    /**
     * If new data needs to be loaded from the back-end system for this, the number of lines to be loaded is restricted to the specified limit. The default value for this limit is 200. If selectAll is true, the selection limit is not evaluated.
     */
    selectionLimit?: number;
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable | TableTypeV2.ResponsiveTable | TableTypeV2.GridTable | TableTypeV2.TreeTable;
    /**
     * To enable navigation for charts, you have to set the property to "true" and maintain an internal navigation target in the manifest.
     */
    showItemNavigationOnChart?: boolean;
    /**
     *  Used to enable inline deletion in a responsive table of list report and object page
     */
    inlineDelete?: boolean;
}
export interface QuickVariantSelection {
    /**
     * To show the number of records available, set showCounts to true.
     */
    showCounts?: boolean;
    /**
     * The variants section contains a set of entries that point to SelectionVariants or SelectionPresentationVariants defined in the annotations.
     */
    variants: {
        [key: number]: QuickVariant;
    };
}
export interface QuickVariantSelectionX extends QuickVariantSelection {
    /**
     * When set to true, this enables automatic binding of the table with either the tableBindingPath (if it exists) or the entitySet property.
     */
    enableAutoBinding?: boolean;
    /**
     * The variants section contains a set of entries that point to SelectionVariants or SelectionPresentationVariants defined in the annotations.
     */
    variants: {
        [key: number]: QuickVariantX;
    };
}
export interface CreateWithFilters {
    /**
     * For the new create action to use the filter settings as input, set strategy to "extension" and implement the extension function as mentioned in help.sap.com for SAP S/4 HANA, section “Prefilling Fields When Creating a New Entity Using an Extension Point“.
     */
    strategy: Strategy;
}
export declare enum Strategy {
    extension = "extension"
}
export interface MultiEdit {
    /**
     * When multiEdit is enabled, by default the dialog displays editable fields corresponding to columns that are currently displayed in the table.
     */
    enabled?: boolean;
    /**
     * Use annotationPath to define a mass edit dialog that points to a FieldGroup annotation with a qualifier.
     */
    annotationPath?: string;
    /**
     * You can choose to hide certain fields from being displayed in key user adaptation and restrict them from being added to the Mass Edit dialog.
     */
    ignoredFields?: IgnoredFieldsType[];
}
export declare const enum IgnoredFieldsType {
    GENERICPROPERTY = "GENERICPROPERTY"
}
export declare enum DefaultContentView {
    charttable = "charttable",
    chart = "chart",
    table = "table"
}
export declare enum DefaultFilterMode {
    visual = "visual",
    compact = "compact"
}
export declare enum LoadDataOnAppLaunchSettings {
    always = "always",
    never = "never",
    ifAnyFilterExist = "ifAnyFilterExist"
}
export interface DataLoadSettings {
    /**
     * Change the default behavior for autoloading of data.
     * For multi-view scenarios, you can also change the setting enableAutobinding to False under quickVariantSelectionX instead of using the loadDataOnAppLaunch setting.
     */
    loadDataOnAppLaunch: LoadDataOnAppLaunchSettings;
}
export interface CreationFieldKeys {
    [key: string]: FieldPath;
}
export interface FieldPath {
    path: string;
}
export interface Fields4Dialog {
    fields: CreationFieldKeys;
}
export interface CommonTableSettings<COLS = GenericColumns> {
    /**
     * You can enable the creation of objects that have a maximum of 8 data fields through a dialog in the list report page.
     */
    createWithParameterDialog?: Fields4Dialog;
    /**
     * The 'Select All' button is disabled by default. To enable it, set selectAll to true.
     */
    selectAll?: boolean;
    /**
     * If new data needs to be loaded from the back-end system for this, the number of lines to be loaded is restricted to the specified limit. The default value for this limit is 200. If selectAll is true, the selection limit is not evaluated.
     */
    selectionLimit?: number;
    /**
     * The showTablePersonalisation attribute can be set to false to hide the table personalization button.
     */
    showTablePersonalisation?: boolean;
    /**
     * useExportToExcel must be set to true if you want to export data to a spreadsheet application, for example Microsoft Excel.
     */
    useExportToExcel?: boolean;
    /**
     * Specifies the type of export to be used in the SmartTable control. UI5Client is the default option.
     */
    exportType?: smarttable.ExportType;
    /**
     * Set to false if the table does not occupy the entire space available in the container.
     */
    fitContainer?: boolean;
    /**
     * With quickVariantSelection you can switch on the multiple view feature. It links to variants you must have added to your annotations beforehand.
     */
    quickVariantSelection?: QuickVariantSelection;
    /**
     * Switch on the multiple view feature (Multiple table mode with charts) and link to the variants you have added to your annotations.
     */
    quickVariantSelectionX?: QuickVariantSelectionX;
    /**
     * For analytical tables, grid tables and tree tables you can define a condensed table layout by setting condensedTableLayout to true.
     */
    condensedTableLayout?: boolean;
    /**
     * If you have enabled harmonized variant management, by default, you cannot set a filter in the table personalization settings.
     * To enable filtering, set the enableTableFilterInPageVariant property to true.
     */
    enableTableFilterInPageVariant?: boolean;
    /**
     * Change the default behavior for autoloading of data.
     */
    dataLoadSettings?: DataLoadSettings;
    /**
     * Tool Bar
     */
    toolBar?: ToolBar;
    /**
     * Columns
     * @isViewNode true
     */
    columns?: COLS;
}
export interface ResponsiveTableCommonSettings extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.ResponsiveTable;
    /**
     * Set includeItemInSelection to true if you want items to be selectable when they are clicked rather than after the selection control has been set.
     */
    includeItemInSelection?: boolean;
    /**
     * popinLayout defines the layout in which the table pop-in rows are rendered.
     */
    popinLayout?: PopinLayout;
    /**
     * createWithFilters adds a new create action that uses the filter settings as input.
     */
    createWithFilters?: CreateWithFilters;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
    /**
     * growingThreshold defines the number of items to be requested from the model for each grow. This property can only be used if the growing property is set to true.
     */
    growingThreshold?: number;
    /**
     * Allows you to edit a single object or multiple objects using a dialog in the list report page.
     */
    multiEdit?: MultiEdit;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ResponsiveTableWithMultiSelect extends ResponsiveTableCommonSettings {
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ResponsiveTableWithInlineDelete extends ResponsiveTableCommonSettings {
    /**
     *  Used to enable inline deletion in a responsive table of list report and object page
     */
    inlineDelete?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ResponsiveTable extends ResponsiveTableCommonSettings, ResponsiveTableWithMultiSelect, ResponsiveTableWithInlineDelete {
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface TreeTable extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.TreeTable;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface AnalyticalTable extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable;
    /**
     * Represents the SelectionPresentationVariant qualifier. ALP looks for SelectionPresentationVariant with this qualifier and if not found, it looks for PresentationVariant with this qualifier.
     */
    qualifier?: string;
    /**
     * Determines the visualization of content area
     */
    defaultContentView?: DefaultContentView;
    /**
     * Determines the filter mode that is used
     */
    defaultFilterMode?: DefaultFilterMode;
    /**
     * Lets you define title for the content area
     * @i18nClassification TIT: Title for the content area
     */
    contentTitle?: string;
    /**
     * All filter fields will be set as in parameter
     */
    allFiltersAsInParameters?: boolean;
    /**
     * createWithFilters adds a new create action that uses the filter settings as input.
     */
    createWithFilters?: CreateWithFilters;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface TableALPCommonSettings extends CommonTableSettings {
    /**
     * Represents the SelectionPresentationVariant qualifier. ALP looks for SelectionPresentationVariant with this qualifier and if not found, it looks for PresentationVariant with this qualifier.
     */
    qualifier?: string;
    /**
     * Determines the visualization of content area
     */
    defaultContentView?: DefaultContentView;
    /**
     * Determines the filter mode that is used
     */
    defaultFilterMode?: DefaultFilterMode;
    /**
     * Lets you define title for the content area
     * @i18nClassification TIT: Title for the content area
     */
    contentTitle?: string;
    /**
     * This setting allows developer to determine chart / table interaction. 'true' would mean chart act as filter for table, 'false' would mean that matching table rows are highlighted but table is not filtered.
     */
    autoHide?: boolean;
    /**
     * All filter fields will be set as in parameter
     */
    allFiltersAsInParameters?: boolean;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ALPResponsiveTable extends TableALPCommonSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.ResponsiveTable;
    /**
     * growingThreshold defines the number of items to be requested from the model for each grow. This property can only be used if the growing property is set to true.
     */
    growingThreshold?: number;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ALPGridTable extends TableALPCommonSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.GridTable;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface ALPAnalyticalTable extends TableALPCommonSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.AnalyticalTable;
}
export interface TableALP extends ALPResponsiveTable, ALPGridTable, ALPAnalyticalTable {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.ResponsiveTable & TableTypeV2.GridTable & TableTypeV2.AnalyticalTable;
}
/**
 * Table
 * @isViewNode true
 * @controlProperty type
 */
export interface GridTable extends CommonTableSettings {
    /**
     * Use type to define the table type. Note: Grid tables, analytical tables, and tree tables cannot be rendered on smartphones. Instead, responsive tables always show on smartphones.
     */
    type?: TableTypeV2.GridTable;
    /**
     * createWithFilters adds a new create action that uses the filter settings as input.
     */
    createWithFilters?: CreateWithFilters;
    /**
     * Single selection in tables is enabled by default. If you want, you can enable multi-select.
     */
    multiSelect?: boolean;
    /**
     * In the list report and on the object page, you can enable buttons to display and hide draft values. By default, these buttons are hidden. To enable them, set the showDraftToggle flag to true.
     */
    showDraftToggle?: boolean;
}
