export declare const enum DateRangeType {
    DATERANGE = "DATERANGE",
    DATE = "DATE",
    FROM = "FROM",
    TO = "TO",
    DAYS = "DAYS",
    LASTDAYS = "LASTDAYS",
    LASTWEEKS = "LASTWEEKS",
    WEEK = "WEEK",
    LASTMONTHS = "LASTMONTHS",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    LASTQUARTERS = "LASTQUARTERS",
    LASTYEARS = "LASTYEARS",
    LASTYEAR = "LASTYEAR",
    YEAR = "YEAR",
    NEXTDAYS = "NEXTDAYS",
    NEXTWEEKS = "NEXTWEEKS",
    NEXTMONTHS = "NEXTMONTHS",
    NEXTQUARTERS = "NEXTQUARTERS",
    NEXTYEARS = "NEXTYEARS",
    NEXT = "NEXT",
    SPECIFICMONTH = "SPECIFICMONTH",
    YESTERDAY = "YESTERDAY",
    YEARTODATE = "YEARTODATE",
    TODAY = "TODAY",
    TOMORROW = "TOMORROW",
    THISWEEK = "THISWEEK",
    LASTWEEK = "LASTWEEK",
    LAST2WEEKS = "LAST2WEEKS",
    LAST3WEEKS = "LAST3WEEKS",
    LAST4WEEKS = "LAST4WEEKS",
    LAST5WEEKS = "LAST5WEEKS",
    NEXTWEEK = "NEXTWEEK",
    NEXT2WEEKS = "NEXT2WEEKS",
    NEXT3WEEKS = "NEXT3WEEKS",
    NEXT4WEEKS = "NEXT4WEEKS",
    NEXT5WEEKS = "NEXT5WEEKS",
    THISMONTH = "THISMONTH",
    LASTMONTH = "LASTMONTH",
    NEXTMONTH = "NEXTMONTH",
    THISQUARTER = "THISQUARTER",
    LASTQUARTER = "LASTQUARTER",
    NEXTQUARTER = "NEXTQUARTER",
    QUARTER1 = "QUARTER1",
    QUARTER2 = "QUARTER2",
    QUARTER3 = "QUARTER3",
    QUARTER4 = "QUARTER4",
    TODAYFROMTO = "TODAYFROMTO"
}
export declare const enum DefaultDateRangeValueType {
    YESTERDAY = "YESTERDAY",
    TODAY = "TODAY",
    THISWEEK = "THISWEEK",
    LASTWEEK = "LASTWEEK",
    THISMONTH = "THISMONTH",
    TOMORROW = "TOMORROW",
    LASTMONTH = "LASTMONTH",
    THISQUARTER = "THISQUARTER",
    LASTQUARTER = "LASTQUARTER",
    THISYEAR = "THISYEAR",
    LASTYEAR = "LASTYEAR",
    LAST2WEEKS = "LAST2WEEKS",
    LAST3WEEKS = "LAST3WEEKS",
    LAST4WEEKS = "LAST4WEEKS",
    LAST5WEEKS = "LAST5WEEKS",
    YEARTODATE = "YEARTODATE",
    QUARTER1 = "QUARTER1",
    QUARTER2 = "QUARTER2",
    QUARTER3 = "QUARTER3",
    QUARTER4 = "QUARTER4",
    DATETOYEAR = "DATETOYEAR"
}
/**
 * Filter Field
 * @isViewNode true
 */
export declare type SelectionField = {} | SelectionFieldDateSettings;
/**
 * Filter Field for Date Settings
 * @isViewNode true
 */
export interface SelectionFieldDateSettings {
    /**
     * The selectedValues property is a set of standard date range values that you want to include or exclude.
     */
    selectedValues?: DateRangeType[];
    /**
     * The exclude property is set to True by default. This means excluding all values given as selectedValues from the list of date range filters. If the exclude property is set to False, the application shows only selected values in the list of date range filters.
     */
    exclude?: boolean;
    /**
     * This property references a JS class, which you use to modify the date range value list. You can either remove standard data range values or add custom values.
     * The customDateRangeImplementation setting takes priority followed by filter and selectedValues when excluding date range types.
     */
    customDateRangeImplementation?: string;
    /**
     * You can use the filter settings to include and exclude specific date range values.
     */
    filter?: FilterType[];
    /**
     * You can set a default value for semantic date range.
     */
    defaultValue?: DefaultDateRange;
}
/**
 * Filter Fields
 * @isViewNode true
 */
export interface SelectionFields {
    [key: string]: SelectionField;
}
export declare type FilterTypeCategory = {
    /**
     * Choose 'key' to define filter values for single values of the date range type, or 'category' to filter by a whole subset.
     */
    path: 'category';
    /**
     * The 'contains' string specifies a filter describing a set of values of the date range type.
     */
    contains?: string;
    /**
     * Defines a single value of the standard date range type.
     */
    equals?: DateRangeType[];
    /**
     * The exclude property is set to True by default. This means excluding all values given as selectedValues from the list of date range filters. If the exclude property is set to False, the application shows only selected values in the list of date range filters.
     */
    exclude?: boolean;
};
export declare type FilterTypeKey = {
    /**
     * Choose 'key' to define filter values for single values of the date range, or 'category' to filter by a whole subset.
     */
    path: 'key';
    /**
     * The 'contains' string specifies a filter describing a set of values of the date range type.
     */
    contains?: string;
    /**
     * Defines a single value of the standard date range type.
     */
    equals?: DateRangeType[];
    /**
     * The exclude property is set to True by default. This means excluding all values given as selectedValues from the list of date range filters. If the exclude property is set to False, the application shows only selected values in the list of date range filters.
     */
    exclude?: boolean;
};
export declare type FilterType = FilterTypeKey | FilterTypeCategory;
export interface DefaultDateRange {
    /**
     * The operation property is the value that will be set for semantic date range.
     */
    operation: DefaultDateRangeValueType;
}
export interface DateRange {
    /**
     * If set to true all date fields with filter restriction interval will be treated as DateTimeRange filters.
     */
    useDateRange?: boolean;
    /**
     * The selectedValues property is a set of standard date range values that you want to include or exclude.
     */
    selectedValues?: DateRangeType[];
    /**
     * The exclude property is set to True by default. This means excluding all values given as selectedValues from the list of date range filters. If the exclude property is set to False, the application shows only selected values in the list of date range filters.
     */
    exclude?: boolean;
}
export interface CommonFilterBar {
    /**
     * Controls whether smart variant management is active. Default is true.
     */
    smartVariantManagement?: boolean;
    /**
     * If liveMode is set, the search will be automatically triggered when a filter value is set.
     */
    liveMode?: boolean;
    /**
     * If you set the flag to true, then standard variant management is not available in the app. The app name is displayed instead.
     * If you set the flag to false or if the flag is not at all contained in the manifest of the app, the standard variant management is available and can be enabled or disabled.
     */
    variantManagementHidden?: boolean;
    /**
     * You can choose an app-specific title by setting the corresponding value for the subTitleIfVariantMgmtHidden property.
     * @i18nClassification TIT: Subtitle if variant management is hidden
     */
    subTitleIfVariantMgmtHidden?: string;
    /**
     * Use to set date settings for fields in smart filter bar
     */
    dateSettings?: DateRange;
    /**
     * Handles visibility of the Clear button on the FilterBar.
     */
    showClearOnFB?: boolean;
    /**
     * Handles visibility of the Filter button on the FilterBar.
     */
    showFilterConfiguration?: boolean;
    /**
     * Handles visibility of the Restore button on the FilterBar.
     */
    showRestoreOnFB?: boolean;
    /**
     * @isViewNode true
     * Selection Fields
     */
    selectionFields?: SelectionFields;
}
/**
 * Filter Bar
 * @isViewNode true
 */
export interface ListReportFilterBar extends CommonFilterBar {
    /**
     * Lets you to add default values for FilterBar using SelectionVariant annotation
     */
    annotationPath?: string;
}
/**
 * Filter Bar
 * @isViewNode true
 */
export interface AnalyticalListPageFilterBar extends CommonFilterBar {
    /**
     * Go button is displayed for compact filters when this is set to true
     */
    showGoButtonOnFilterBar?: boolean;
    /**
     * Lets you to add default values for FilterBar using SelectionVariant annotation
     */
    filterDefaultsFromSelectionVariant?: boolean;
}
