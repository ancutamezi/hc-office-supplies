import type { AnnotationPathAsObject, TableCreationModeType, TableSettings } from '../controls';
import type { Placement, ObjectPageTableColumn as ObjectPageTableColumnIF, ObjectPageTableColumnAction, TableCustomColumn } from '../webapp/manifest/ManifestSettings';
import type { ObjectPageToolBar } from './ObjectPageToolBar';
export interface PositionOP {
    /**
     * The key of another column to be used as placement anchor.
     */
    anchor?: string;
    /**
     * Define the placement, either before or after the anchor column.
     */
    placement: Placement;
}
export interface TableCustomColumnOP extends TableCustomColumn {
    /**
     *   Defines the position of the column relative to other columns.
     */
    position?: PositionOP;
}
/**
 * Table
 * @isViewNode true
 */
export interface ObjectPageTable extends TableSettingsOP {
    /**
     * By setting enableFullScreen to true you can enable the full screen mode for this table; this will display a new button on the table toolbar allowing the user to open the table in a fullscreen dialog.
     */
    enableFullScreen?: boolean;
    /**
     * In the Object Page tables, it is possible to add several items at a time by copying and pasting data from an excel file, if this property is set to true.
     */
    enablePaste?: boolean;
    /**
     * Tool Bar
     */
    toolBar?: ObjectPageToolBar;
}
/**
 * Table Section
 * @isViewNode true
 */
export interface ObjectPageSectionTableV4 {
    table?: ObjectPageTable;
}
export interface TableCreationModeOP {
    /**
     * The name property of TableCreationMode defines the creation mode; possible values are:
     * - NewPage: The create action leads to a new page.
     * - Inline: The create action leads to a new row at the table.
     * - CreationRow: No create button will be rendered, an empty row is directly given.
     * The default is "NewPage".
     */
    name?: TableCreationModeType;
    /**
     * In case of inline creation mode you can decide if the new row will be created at the end of the table, or direcly after the currently selected table. The default value is "true"
     */
    createAtEnd?: boolean;
}
export interface PersonalizationTypeOP {
    /**
     * Defines whether the user can add and remove columns to a given table.
     */
    column?: boolean;
    /**
     * Defines whether the user can sort a given table.
     */
    sort?: boolean;
    /**
     * Defines whether the user can filter data of a given table.
     */
    filter?: boolean;
}
export interface QuickVariantSelectionV4OP {
    /**
     * List of annotation paths referring to SelectionVariant annotations
     */
    paths: AnnotationPathAsObject[];
    /**
     * You can hide the table and display only the titles of the tabs. To do so, add the hideTableTitle option and set it to true.
     */
    hideTableTitle?: boolean;
    /**
     * You can show the counts of entries of each view. To do so, add the showCounts option and set it to true.
     */
    showCounts?: boolean;
}
export interface GenericColumnsOP {
    [key: string]: ObjectPageTableColumnIF | ObjectPageTableColumnAction | TableCustomColumnOP;
}
export interface TableSettingsOP extends TableSettings {
    /**
     * Defines the page behavior when a new record is created.
     */
    creationMode?: TableCreationModeOP;
    /**
     * Defines the personalization mode, currently only effective if variant management on page is either set to Page or Control.
     * By default all table settings are enabled. You can change this for the different parts of the table by setting the properties "Column", "Sort" and "Filter" accordingly.
     * Omitting a property is treated as false, this allows apps to avoid getting new features like grouping in upcoming releases.
     */
    personalization?: PersonalizationTypeOP;
    /**
     * With quickVariantSelection you can switch on the multiple view feature (single table mode). It links to SelectionVariant (filters) or SelectionPresentationVariant (filters and sorters) you must have added to your annotations beforehand.
     */
    quickVariantSelection?: QuickVariantSelectionV4OP;
    columns?: GenericColumnsOP;
}
