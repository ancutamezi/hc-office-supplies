const cds = require('../../../../cds')
const OData = require('../OData')
const DEBUG = cds.debug('extensibility')

const { alias2ref } = require('../../../../common/utils/csn')
const { BASE_TENANT } = require('../../../../common/utils/extensibilityUtils')

const SYSTEM_SERVICES = ['cds_r.ExtensibilityService', 'cds_r.ModelProviderService']

function createOdataService(service) {
  const name = (service.definition && service.definition.name) || service.name
  const edm = cds.compile.to.edm(service.model, { service: name })
  alias2ref(service, edm)

  const odataService = new OData(edm, service.model, service.options)
  odataService.addCDSServiceToChannel(service)

  return odataService
}

async function createNewService(name, model, options) {
  const { constructor: Service, path } = cds.services[name]
  const service = new Service(name, model, { ...options }) // cloning options to be safe
  if (service.init) await service.prepend(service.init)
  if (options.impl) await service.prepend(options.impl)
  if (path) service.path = path
  DEBUG &&
    DEBUG('Created tenant-specific service:', service.name, '= new', Service.name, {
      _handlers: {
        on: service._handlers.on.map(h => ({ on: h.on, handler: () => {} }))
      }
    })
  return createOdataService(service)
}

const getModelHash = (tenant, features) => {
  if (!features) features = []

  let hash
  if (cds.requires.multitenancy && tenant) {
    hash = tenant
  } else {
    hash = BASE_TENANT
  }

  hash += ':' + features.join(';')

  return hash
}

module.exports = {
  SYSTEM_SERVICES,
  createOdataService,
  createNewService,
  getModelHash
}
