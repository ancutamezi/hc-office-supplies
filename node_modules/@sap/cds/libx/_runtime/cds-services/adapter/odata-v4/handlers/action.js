const cds = require('../../../../cds')

const ODataRequest = require('../ODataRequest')

const {
  Components: { ACTION_EXECUTE_HANDLER }
} = require('../okra/odata-server')

const { getSapMessages } = require('../../../../common/error/frontend')
const { actionAndFunctionQueries, getActionOrFunctionReturnType } = require('../utils/handlerUtils')
const { validateResourcePath } = require('../utils/request')
const readAfterWrite = require('../utils/readAfterWrite')
const { setStatusCodeAndHeader, getKeyProperty } = require('../../../../fiori/utils/handler')
const { toODataResult, postProcess } = require('../utils/result')
const { mergeJson } = require('../../../services/utils/compareJson')

const _isAssocOrCompNotLocalized = (reqTarget, el) => {
  return (
    reqTarget.elements[el].isAssociation && (!reqTarget.texts || reqTarget.elements[el].target !== reqTarget.texts.name)
  )
}

const _postProcessDraftActivate = async (req, result, service) => {
  // update req.data (keys needed in readAfterWrite)
  req.data = result
  const dataInDb = await readAfterWrite(req, service)
  if (dataInDb.length) result = mergeJson(dataInDb[0], result, req.target)

  // add static draft columns
  result.IsActiveEntity = true
  result.HasActiveEntity = false
  result.HasDraftEntity = false

  // remove children from result, excluding localized composition 'text'
  if (!(cds.env.effective.odata.structs || cds.env.features.ucsn_struct_conversion)) {
    for (const k in req.target.elements) {
      if (_isAssocOrCompNotLocalized(req.target, k)) delete result[k]
    }
  }

  return result
}

const _postProcess = async (req, odataReq, odataRes, tx, result) => {
  postProcess(req, odataRes, tx, result)

  // REVISIT: harmonize getactionreturntype functions
  const actionReturnType = getActionOrFunctionReturnType(odataReq.getUriInfo().getPathSegments(), tx.model.definitions)
  if (actionReturnType && actionReturnType.kind === 'entity' && odataReq.getQueryOptions()) {
    result = await actionAndFunctionQueries(req, odataReq, result, tx, actionReturnType)
  }
  return result
}

/**
 * The handler that will be registered with odata-v4.
 *
 * @param {import('../../../services/Service')} service
 * @returns {function}
 */
const action = service => {
  return async (odataReq, odataRes, next) => {
    let req

    try {
      validateResourcePath(odataReq, service)
      req = new ODataRequest(ACTION_EXECUTE_HANDLER, service, odataReq, odataRes)
    } catch (e) {
      return next(e)
    }

    const changeset = odataReq.getAtomicityGroupId()
    const tx = changeset ? odataReq.getBatchApplicationData().txs[changeset] : service.tx(req)
    cds.context = tx

    let result, err

    try {
      result = await tx.dispatch(req)

      // post processing for draftActivate
      if (req.event === 'draftActivate') {
        result = await _postProcessDraftActivate(req, result, service)

        const k = getKeyProperty(req.target.keys)
        setStatusCodeAndHeader(odataRes, { [k]: result[k] }, req.target.name.replace(`${service.name}.`, ''), true)
      }

      result = await _postProcess(req, odataReq, odataRes, tx, result)

      if (changeset) {
        // for passing into commit
        odataReq.getBatchApplicationData().results[changeset].push({ result, req })
      } else {
        await tx.commit(result)
      }
    } catch (e) {
      err = e

      if (changeset) {
        // for passing into rollback
        odataReq.getBatchApplicationData().errors[changeset].push({ error: e, req })
      } else {
        // REVISIT: rollback needed if an error occurred before commit attempted -> how to distinguish?
        await tx.rollback(e).catch(() => {})
      }
    } finally {
      req.messages && odataRes.setHeader('sap-messages', getSapMessages(req.messages, req._.req))

      if (err) next(err)
      else next(null, toODataResult(result, req))
    }
  }
}

module.exports = action
