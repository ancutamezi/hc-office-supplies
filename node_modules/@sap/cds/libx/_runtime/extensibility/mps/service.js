const fs = require('fs')
const path = require('path')

const cds = require('../../cds')
const { exists } = require('./utils')
const { supplementaryFiles } = require('./tar')

const { BASE_TENANT } = require('../../common/utils/extensibilityUtils')

const _getAllFeatures = async function () {
  const features = path.join(global.cds.root, 'fts')
  if (await exists(features)) {
    return (await fs.promises.readdir(features, { withFileTypes: true })).map(dir => path.join(features, dir.name))
  }

  return []
}

const _addExtensions = async function (csn, tenant) {
  const rs = await cds.tx({ tenant }, tx => tx.run(SELECT.from('cds_r.Extensions')))

  if (rs.length !== 0) {
    const extensions = []
    const definitions = {}
    rs.forEach(row => {
      const csn = JSON.parse(row.csn)
      if (csn.extensions) extensions.push(...csn.extensions)
      if (csn.definitions) {
        Object.keys(csn.definitions).forEach(key => {
          definitions[key] = csn.definitions[key]
        })
      }
    })
    const extCsn = cds.compile({
      'base.csn': cds.compile.to.json(csn),
      'ext.csn': cds.compile.to.json({ extensions, definitions })
    })
    // Sources are used to load resources like i18n
    extCsn.$sources = csn.$sources
    extCsn.$location = csn.$location

    return extCsn
  }

  return csn
}

const _isExtended = async function (req) {
  const rs = await cds.tx({ tenant: req.data.tenant }, tx => tx.run('SELECT * from cds_r_Extensions'))
  return rs.length !== 0
}

const _csn4 = async function (req, _flavor) {
  let { tenant, toggles, flavor = _flavor } = req.data
  if (!tenant) tenant = BASE_TENANT

  let features = []
  // Star is only for deployment - not a valid DwC protocol configuration.
  if (toggles && toggles.includes('*')) {
    features = await _getAllFeatures()
  } else if (toggles) {
    features = toggles.map(t => path.join(global.cds.root, 'fts', t))
  }

  let csn = await cds.load(['*', ...features]).then(cds.minify)

  if (cds.requires.extensibility && !(cds.requires.multitenancy && tenant === BASE_TENANT))
    csn = await _addExtensions(csn, tenant)

  if (flavor) csn = cds.compile.for[flavor](csn)

  return csn
}

const _edmx4 = async function (req) {
  const csn = await _csn4(req)
  const { serviceName, locale, odataFlavor } = req.data

  return cds.localize(csn, locale, cds.compile.to.edmx(csn, { service: serviceName, version: odataFlavor }))
}

module.exports = function (srv) {
  srv.on('getCsn', async function (req) {
    return await _csn4(req)
  })

  // REVISIT: Replace by getCsn(..., flavor=node/java)
  srv.on('getOdataCsn', async function (req) {
    return await _csn4(req, 'java')
  })

  srv.on('getEdmx', async function (req) {
    return await _edmx4(req)
  })

  srv.after('getEdmx', function (result, req, res) {
    req._.res && req._.res.set('Content-Type', 'application/xml')
  })

  srv.on('isExtended', async function (req) {
    return await _isExtended(req)
  })

  srv.on('getResources', async function (req) {
    return await supplementaryFiles(req)
  })

  srv.after('getResources', function (_, req) {
    req._.res && req._.res.set('content-type', 'application/octet-stream; charset=binary')
  })
}
