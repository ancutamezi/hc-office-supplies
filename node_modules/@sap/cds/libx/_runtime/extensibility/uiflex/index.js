module.exports = (async () => {
  const cds = require('../../cds')
  const path = require('path')

  if (!cds.requires.db) return
  if (cds.db) return // avoid duplicates

  // do not add extensions in case of multitenancy
  if (!cds.requires.multitenancy) {
    // add extensions
    if (cds.requires.db.credentials && cds.requires.db.credentials.database !== ':memory:') {
      const db = await cds.connect.to({ ...cds.requires.db, model: null, silent: true })
      const rs = await db.read('cds_r.Extensions')
      if (rs.length !== 0) {
        const extensions = []
        rs.forEach(row => extensions.push(...JSON.parse(row.csn).extensions))
        cds.once('loaded', csn => {
          if (cds.model) return // extend cds.model only
          const extended = cds.compile({
            'base.csn': cds.compile.to.json(csn),
            'ext.csn': cds.compile.to.json({ extensions })
          })
          csn.definitions = extended.definitions
        })
      }
      await db.disconnect()
    }

    cds.on('connect', async srv => {
      if (srv.name !== 'db') return

      // deploy in case of in-memory
      if (cds.requires.db.credentials && cds.requires.db.credentials.database === ':memory:') {
        const mf = await cds.load(path.join(__dirname, '../../../..', 'srv/flex.cds'))
        await cds.deploy(mf).to(srv)
      }
    })
  }

  cds.once('served', async () => {
    const { transformExtendedFieldsCREATE, transformExtendedFieldsUPDATE } = require('./handler/transformWRITE')
    const { transformExtendedFieldsREAD } = require('./handler/transformREAD')
    const { transformExtendedFieldsRESULT } = require('./handler/transformRESULT')
    cds.db
      .before('CREATE', transformExtendedFieldsCREATE)
      .before('UPDATE', transformExtendedFieldsUPDATE)
      .before('READ', transformExtendedFieldsREAD)
      .after('READ', transformExtendedFieldsRESULT)
    if ('cds_r.ExtensibilityService' in cds.services) return
    await require('../mps')
    const model = require('path').join(__dirname, '../../../..', 'srv/flex.cds')
    return cds.serve(model, { silent: true }).in(cds.app)
  })
})()
