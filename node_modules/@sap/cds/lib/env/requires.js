const _runtime = '@sap/cds/libx/_runtime'

exports = module.exports = {

  db: undefined,
  messaging: undefined,
  multitenancy: undefined,

  auth: {
    '[development]': { kind: 'mocked-auth' },
    '[production]': { kind: 'jwt-auth' }
  },

}


const _authentication_strategies = {

  "dummy-auth": {
    strategy: 'dummy',
  },
  "basic-auth": {
    kind: "mocked-auth"
  },
  "mocked-auth": {
    strategy: 'mock',
    users: {
      alice: { roles: ['admin'] },
      bob: { roles: ['builder'] },
      '*': true
    }
  },
  "jwt-auth": {
    strategy: 'JWT',
    vcap: { label: 'xsuaa' }
  },
  "xsuaa": {
    strategy: 'xsuaa',
    vcap: { label: 'xsuaa' }
  },

}


const _services = {

  "app-service": {
    // this is the default implementation used for provided services
    impl: `${_runtime}/cds-services/services/Service.js`
  },
  "rest": {
    impl: `${_runtime}/remote/Service.js`
  },
  "odata": {
    impl: `${_runtime}/remote/Service.js`
  },
  "odata-v2": { // REVISIT: we should introduce .version
    impl: `${_runtime}/remote/Service.js`
  },
  "odata-v4": { // REVISIT: we should introduce .version
    impl: `${_runtime}/remote/Service.js`
  },

}


const _databases = {

  "sql": {
    '[development]': { kind: 'sqlite', credentials: { url: ':memory:' } },
    '[production]': { kind: 'hana' },
  },
  "sqlite": _compat_to_use({
    credentials: { url: 'sqlite.db' },
    impl: `${_runtime}/sqlite/Service.js`,
  }),
  "hana": _compat_to_use ({
    impl: `${_runtime}/hana/Service.js`,
  }),
  "hana-cloud": _compat_to_use ({
    kind: 'hana', "deploy-format": "hdbtable",
  }),
  "hana-mt": _compat_to_use ({
    kind: 'hana', "deploy-format": "hdbtable",
    "vcap": {
      "label": "service-manager"
    }
  }),

}


const _messaging = {

  "local-messaging": {
    impl: `${_runtime}/messaging/service.js`,
    local: true
  },
  "file-based-messaging": {
    outbox: {},
    impl: `${_runtime}/messaging/file-based.js`,
    credentials: { file:'~/.cds-msg-box' }
  },
  "default-messaging": {
    "[development]": { kind: "local-messaging" },
    "[hybrid]": { kind: "enterprise-messaging-amqp" },
    "[production]": {
      kind: "enterprise-messaging-amqp",
      "[multitenant]": { kind: "enterprise-messaging-http" }
    }
  },
  "enterprise-messaging": {
    kind: "enterprise-messaging-http",
  },
  "enterprise-messaging-shared": { // for temporary compat only
    kind: "enterprise-messaging-amqp",
  },
  "enterprise-messaging-http": {
    outbox: {},
    deployForProvider: true,
    impl: `${_runtime}/messaging/enterprise-messaging.js`,
    vcap: { label: "enterprise-messaging" },
  },
  "enterprise-messaging-amqp": {
    outbox: {},
    impl: `${_runtime}/messaging/enterprise-messaging-shared.js`,
    vcap: { label: "enterprise-messaging" },
  },
  'message-queuing': {
    outbox: {},
    impl: `${_runtime}/messaging/message-queuing.js`
  },
  "composite-messaging": {
    impl: `${_runtime}/messaging/composite.js`
  },
  "mtx-messaging": {
    kind: "local-messaging",
    "[production]": {
      kind: "redis-messaging"
    }
  },
  "redis-messaging": {
    impl: `${_runtime}/messaging/redis-messaging.js`,
    vcap: { label: "redis-cache" },
    outbox: {}
  },

  "persistent-outbox": {
    model: "@sap/cds/srv/outbox",
    maxAttempts: 20,
    chunkSize: 100
  },

}


const _multitenancy = {
}


const _extensibility = {

  "uiflex": {
    model: "@sap/cds/srv/flex"
  },

}



const _platform_services = {

  "audit-log-service": {
    impl: `${_runtime}/audit/Service.js`,
    // model: 'AuditLogService.cds',
    outbox: {},
    vcap: { label: "auditlog" },
  },

  "audit-log-to-console": {
    kind: "audit-log-service",
    credentials: { logToConsole: true }
  },

  destinations: {
    vcap: {
      label: 'destination'
    }
  },

  approuter: undefined,

}


exports.kinds = {
  ..._authentication_strategies,
  ..._databases,
  ..._services,
  ..._messaging,
  ..._multitenancy,
  ..._extensibility,
  ..._platform_services,
}


function _compat_to_use(o) { return Object.defineProperties (o,{
  // NOTE: Property .use is for compatibility only -> use .dialect instead!
  use: { get(){ return this.dialect || this.kind }, configurable:true, enumerable:true },
})}
