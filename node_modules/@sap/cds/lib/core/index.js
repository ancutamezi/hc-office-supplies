/*
	This is the inner core of cds: its type system, bootstrapped from in-place
	CSN models itself. Besides the actual root types, a set of common and
	recommended scalar types is added to builtin.types.
*/
const classes = Object.assign (
	require('./classes'),
	require('./entities'),
)


/** Type system roots -> can be used with instanceof */
const roots = _roots ({
	context: {},
	type: {},
		scalar: {type:'type'},
			string: {type:'scalar'},
			number: {type:'scalar'},
			boolean: {type:'scalar'},
			date: {type:'scalar'},
		array: {type:'type'},
		struct: {type:'type'},
			aspect: {type:'struct'},
			entity: {type:'struct'},
			event: {type:'struct'},
	Association: {type:'type'},
	Composition: {type:'Association'},
	service: {type:'context'},
})

/**
 * Turns the given CSN definitions into linked definitions with classes.
 * @type <T>(csn:T) => T
 */
 function _roots (defs) {
	const linked = { any: classes.any.prototype }
	for (const t in defs) {
		if (t in classes) {
			linked[t] = classes[t].prototype
			continue
		}
		const c = class extends classes[defs[t].type || 'any'] {}
		linked[t] = Object.defineProperty (c.prototype, 'name', {value:t})
		classes[t] = Object.defineProperty (c, 'name', {value:t})
	}
	return linked
}


/** Construct builtin.types as dictionary of all roots and common types */
const types = _common ({ __proto__: roots,
	UUID: {type:'string',length:36,isUUID:true},
	Boolean: {type:'boolean'},
	Integer: {type:'number'},
		Integer16: {type:'Integer'},
		Integer32: {type:'Integer'},
		Integer64: {type:'Integer'},
	Decimal: {type:'number'},
	DecimalFloat: {type:'number'},
	Float: {type:'number'},
	Double: {type:'number'},
	DateTime: {type:'date'},
	Date: {type:'date'},
	Time: {type:'date'},
	Timestamp: {type:'date'},
	String: {type:'string'},
	Binary: {type:'string'},
	LargeString: {type:'string'},
	LargeBinary: {type:'string'},
})

/**
 * Link all definitions, essentially by: d.__proto__ = resolved (d.type),
 * and prefixes all common types with a namespace 'cds'.
 * @type <T>(csn:T) => T & roots
 */
function _common (defs) {
	const prefixed = {__proto__:defs}
	for (let [name,d] of Object.entries(defs)) {
		defs[name] = Object.defineProperty({ ...d, __proto__: defs[d.type] }, 'name', {value:name})
		Object.defineProperty (prefixed['cds.'+name] = defs[name], '_type', {value:'cds.'+name})
	}
	for (let name of ['Association','Composition']) {
		Object.defineProperty (prefixed['cds.'+name] = defs[name], '_type', {value:'cds.'+name})
	}
	return prefixed
}


module.exports = { types, classes }
