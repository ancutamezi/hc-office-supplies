const fs = require('fs')
const path = require('path')
const tar = require('tar')
const exec = require('child_process').exec

const _createArchive = (files, root) => {
  return tar.c(
    {
      gzip: true,
      preservePaths: false,
      cwd: root
    },
    files
  )
}

const _createArchiveCLI = (files, root, output) => {
  const cmd = 'cd ' + root + ' && tar -czf ' + output + ' ' + files.join(' ')

  return new Promise((resolve, reject) => {
    exec(cmd, err => {
      if (err) reject(err)
      else resolve()
    })
  })
}

const packArchive = (files, root) => {
  _createArchive(files, root)
  const stream = _createArchive(files, root)
  return new Promise((resolve, reject) => {
    const chunks = []
    stream.on('data', data => chunks.push(data))
    stream.on('error', error => reject(error))
    stream.on('end', () => {
      resolve(Buffer.concat(chunks))
    })
  })
}

const packArchiveCLI = async (files, root, output) => {
  await _createArchiveCLI(files, root, output)

  return fs.promises.readFile(path.join(root, output))
}

const unpackArchive = async (tgz, folder) => {
  await tar.x({
    file: tgz,
    gzip: true,
    C: folder
  })
}

const unpackArchiveCLI = async (tgz, folder) => {
  const cmd = 'tar -xzf ' + tgz + ' -C ' + folder

  return new Promise((resolve, reject) => {
    exec(cmd, err => {
      if (err) reject(err)
      else resolve()
    })
  })
}

module.exports = {
  packArchive,
  packArchiveCLI,
  unpackArchive,
  unpackArchiveCLI
}
