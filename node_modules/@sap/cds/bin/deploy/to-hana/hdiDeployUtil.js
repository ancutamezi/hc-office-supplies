const cp = require('child_process');
const path = require('path');
const util = require('util');

const execAsync = util.promisify(cp.exec);

const cds = require('../../../lib');
const { SILENT } = cds.log.levels;
const LOG = cds.log ? cds.log('deploy') : console;

class HdiDeployUtil {

    constructor() {
        this.hdiDeployLibs = new Map();
        this.deployerName = '@sap/hdi-deploy'
        this.deployerVersionSpec = '^4'
    }

    async deployTenant(dbDir, env, logger) {
        await this._executeDeploy(dbDir, env, logger);
    }

    async deploy(dbDir, vcapServices, options = {}) {
        LOG.log();
        LOG.log(`Deploying to HANA from ${dbDir}`);

        const hdiDeployLib = await this._getHdiDeployLib(dbDir);

        let deployerEnv = JSON.parse(JSON.stringify(process.env));
        const hdiDeployOptions = deployerEnv.HDI_DEPLOY_OPTIONS ? JSON.parse(deployerEnv.HDI_DEPLOY_OPTIONS) : {};
        delete hdiDeployOptions.root;

        if (typeof hdiDeployLib.clean_env === 'function') {
            deployerEnv = hdiDeployLib.clean_env(deployerEnv);
        }

        deployerEnv.VCAP_SERVICES = JSON.stringify(vcapServices);

        if (options.autoUndeploy) {
            LOG.log(`Hdi deployer automatically undeploys deleted resources using --auto-undeploy.`);
            hdiDeployOptions.auto_undeploy = true;
        }

        if (Object.entries(hdiDeployOptions).length > 0) {
            deployerEnv.HDI_DEPLOY_OPTIONS = JSON.stringify(hdiDeployOptions);
        }

        await this._executeDeploy(dbDir, deployerEnv);
    }


    async findHdiDeployLib(cwd) {
        const searchPaths = await this._npmSearchPaths(cwd)
        try {
            return require.resolve(path.join(this.deployerName, 'library'), { paths: searchPaths });
        } catch (err) {
            // no luck
        }
    }


    async _getHdiDeployLib(dbDir) {
        let hdiDeployLib = this.hdiDeployLibs.get(dbDir)
        if (!hdiDeployLib) {
            hdiDeployLib = await this._loadHdiDeployLib(dbDir);
            this.hdiDeployLibs.set(dbDir, hdiDeployLib);
        }

        return hdiDeployLib;
    }


    async _loadHdiDeployLib(cwd) {
        const libPath = await this.findHdiDeployLib(cwd)
        if (!libPath) {
            const searchPaths = await this._npmSearchPaths(cwd)
            throw new Error(`Required library '${this.deployerName}' not found in
    ${searchPaths.join('\n    ')}
Add it either as a devDependency using 'npm install -D ${this.deployerName}' or install it globally using 'npm install -g ${this.deployerName}'.`);
        }

        LOG.log(`Using HDI deployer from ${libPath}`)

        // let any error go through and abort deploy
        return require(libPath);
    }


    async _npmSearchPaths(cwd) {
        const npmRootCall = await execAsync('npm root -g');
        const globalNodeModules = npmRootCall.stdout.toString().trim();
        return [cwd, globalNodeModules, '@sap/hdi-deploy']
    }


    async _executeDeploy(dbDir, env, logger) {
        const hdiDeployLib = await this._getHdiDeployLib(dbDir);
        return new Promise((resolve, reject) => {
            const callbacks = {
                stderrCB: error => (logger || LOG).error(error.toString())
            }
            if (LOG.level !== SILENT) {
                callbacks.stdoutCB = (data) => (logger || LOG).log(data.toString());
            }

            hdiDeployLib.deploy(dbDir, env, (error, response) => {
                if (error) {
                    return reject(error);
                }
                if (response && response.exitCode && response.exitCode !== 0) {
                    let message = `HDI deployment failed with exit code ${response.exitCode}`
                    if (response.signal) message += `. ${response.signal}`
                    return reject(new Error(message));
                }
                return resolve();
            }, callbacks
            );
        });
    }
}


module.exports = new HdiDeployUtil();

/* eslint no-console: off */
