// Base Definitions for the Core Compiler

'use strict';

const dictKinds = {
  definitions: 'absolute',
  elements: 'element',
  enum: 'enum',
  foreignKeys: 'key',
  actions: 'action',
  params: 'param',
};

const kindProperties = {
  // TODO: also foreignKeys ?
  namespace: { artifacts: true }, // on-the-fly context
  context: { artifacts: true, normalized: 'namespace' },
  service: { artifacts: true, normalized: 'namespace' },
  entity: { elements: true, actions: true, params: () => false },
  select: { normalized: 'select', elements: true },
  $join: { normalized: 'select' },
  $tableAlias: { normalized: 'alias' }, // table alias in select
  $self: { normalized: 'alias' }, // table alias in select
  $navElement: { normalized: 'element' },
  $inline: { normalized: 'element' }, // column with inline property
  event: { elements: true },
  type: { elements: propExists, enum: propExists },
  aspect: { elements: propExists },
  annotation: { elements: propExists, enum: propExists },
  enum: { normalized: 'element' },
  element: { elements: propExists, enum: propExists, dict: 'elements' },
  mixin: { normalized: 'alias' },
  action: {
    params: () => false, elements: () => false, enum: () => false, dict: 'actions',
  }, // no extend params, only annotate
  function: {
    params: () => false, elements: () => false, enum: () => false, normalized: 'action',
  }, // no extend params, only annotate
  key: { normalized: 'element' },
  param: { elements: () => false, enum: () => false, dict: 'params' },
  source: { artifacts: true },  // TODO -> $source
  using: {},
  extend: {
    isExtension: true,
    noDep: 'special',
    elements: true, /* only for parse-cdl */
    actions: true,  /* only for parse-cdl */
    enum: true,     /* only for parse-cdl */
  },
  annotate: {
    isExtension: true, noDep: 'special', elements: true, enum: true, actions: true, params: true,
  },
  builtin: {},                  // = CURRENT_DATE, TODO: improve
  $parameters: {},              // $parameters in query entities
};

function propExists( prop, parent ) {
  const obj = parent.returns || parent;
  return (obj.items || obj.targetAspect || obj)[prop];
}

module.exports = {
  dictKinds,
  kindProperties,
};
