// For Library Version: 1.92.0

declare namespace sap {
  namespace zen {
    /**
     * @EXPERIMENTAL
     *
     * Design Studio Commons Library. Intended only to be used within S/4 HANA Fiori applications.
     */
    namespace commons {
      namespace layout {
        interface $AbsoluteLayoutSettings extends sap.ui.core.$ControlSettings {
          /**
           * The overall width of the control. When not set, 100% is automatically set.
           */
          width?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The overall height of the control. When not set, 100% is automatically set.
           */
          height?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
           */
          verticalScrolling?:
            | sap.ui.core.Scrolling
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
           */
          horizontalScrolling?:
            | sap.ui.core.Scrolling
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Positioned child controls within the layout
           */
          positions?:
            | sap.zen.commons.layout.PositionContainer[]
            | sap.zen.commons.layout.PositionContainer
            | sap.ui.base.ManagedObject.AggregationBindingInfo;
        }

        interface $MatrixLayoutSettings extends sap.ui.core.$ControlSettings {
          /**
           * CSS width of the matrix layout. If the LayoutFixed = true a adequate width should be provided.
           */
          width?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * CSS height of the matrix layout.
           */
          height?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Sets the table layout. If fixed the width parameter of a column has priority, if not the width of the
           * content of the colums has priority. The default is "fixed". If the fixed layout is used a adequate width
           * of the MatrixLayout should be provided. Otherwise the column width displayed could be different than
           * the given ones because of browser dependend optimazations.
           */
          layoutFixed?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Number of columns. If not specified, the number of columns will be determined from the given cells.
           */
          columns?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Widths of the columns. Use an array to define the widths of the columns. If a column shall have an automatical
           * sizing enter "auto" for this column width.
           */
          widths?:
            | sap.ui.core.CSSSize[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The matrix layout's individual rows.
           */
          rows?:
            | sap.zen.commons.layout.MatrixLayoutRow[]
            | sap.zen.commons.layout.MatrixLayoutRow
            | sap.ui.base.ManagedObject.AggregationBindingInfo;
        }

        interface $MatrixLayoutCellSettings
          extends sap.ui.core.$ElementSettings {}

        interface $MatrixLayoutRowSettings
          extends sap.ui.core.$ElementSettings {
          /**
           * Height of the row.
           */
          height?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The matrix layout row's individual cells.
           */
          cells?:
            | sap.zen.commons.layout.MatrixLayoutCell[]
            | sap.zen.commons.layout.MatrixLayoutCell
            | sap.ui.base.ManagedObject.AggregationBindingInfo;
        }

        interface $PositionContainerSettings
          extends sap.ui.core.$ElementSettings {
          /**
           * Defines the distance to the top of the layout (as specified in HTML)
           */
          top?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the distance to the bottom of the layout (as specified in HTML)
           */
          bottom?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the distance to the left of the layout (as specified in HTML)
           */
          left?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the distance to the right of the layout (as specified in HTML)
           */
          right?:
            | sap.ui.core.CSSSize
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area. The values
           * of the attributes left and right are ignored when this feature is activated.
           */
          centerHorizontally?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates whether this container should be centered vertically within the AbsoluteLayout area. The values
           * of the attributes top and bottom are ignored when this feature is activated.
           */
          centerVertically?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Child control of the position container
           */
          control?: sap.ui.core.Control;
        }

        /**
         * @deprecated (since 1.38)
         *
         * The Absolute Layout positions its child controls absolutely
         */
        class AbsoluteLayout extends sap.ui.core.Control {
          /**
           * Constructor for a new layout/AbsoluteLayout.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$AbsoluteLayoutSettings
          );
          /**
           * Constructor for a new layout/AbsoluteLayout.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$AbsoluteLayoutSettings
          );

          /**
           * Adds the given control and a corresponding position container into the aggregation named 'positions'.
           * Returns 'this' to allow method chaining.
           */
          addContent(
            /**
             * The content to add; if empty, nothing is inserted.
             */
            oContent: sap.ui.core.Control,
            /**
             * JSON-like object which defines the position of the child control in the layout. The object is expected
             * to have one or more from the attribute set top, bottom, left, right; each with a value of type sap.ui.core.CSSSize.
             * If no object is given, the default is left=0px,right=0px
             */
            oPos: object
          ): sap.zen.commons.layout.AbsoluteLayout;
          /**
           * Adds some position to the aggregation {@link #getPositions positions}.
           */
          addPosition(
            /**
             * The position to add; if empty, nothing is inserted
             */
            oPosition: sap.zen.commons.layout.PositionContainer
          ): this;
          /**
           * Destroys all aggregated position containers and their child controls. Returns 'this' to allow method
           * chaining.
           */
          destroyContent(): sap.zen.commons.layout.AbsoluteLayout;
          /**
           * Destroys all the positions in the aggregation {@link #getPositions positions}.
           */
          destroyPositions(): this;
          /**
           * Creates a new subclass of class sap.zen.commons.layout.AbsoluteLayout with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.zen.commons.layout.AbsoluteLayout
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns an array of the controls contained in the aggregated position containers (might be empty).
           */
          getContent(): sap.ui.core.Control[];
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * The overall height of the control. When not set, 100% is automatically set.
           *
           * Default value is `"100%"`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getHorizontalScrolling horizontalScrolling}.
           *
           * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
           *
           * Default value is `Hidden`.
           */
          getHorizontalScrolling(): sap.ui.core.Scrolling;
          /**
           * Returns a metadata object for class sap.zen.commons.layout.AbsoluteLayout.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets content of aggregation {@link #getPositions positions}.
           *
           * Positioned child controls within the layout
           */
          getPositions(): sap.zen.commons.layout.PositionContainer[];
          /**
           * Gets current value of property {@link #getVerticalScrolling verticalScrolling}.
           *
           * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
           *
           * Default value is `Hidden`.
           */
          getVerticalScrolling(): sap.ui.core.Scrolling;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The overall width of the control. When not set, 100% is automatically set.
           *
           * Default value is `'100%'`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Checks for the provided sap.ui.core.Control in the aggregated position containers, and returns the index
           * of the container in the positions aggregation if found, or '-1' otherwise.
           */
          indexOfContent(
            /**
             * The content of which the index is looked for
             */
            oContent: sap.ui.core.Control
          ): int;
          /**
           * Checks for the provided `sap.zen.commons.layout.PositionContainer` in the aggregation {@link #getPositions
           * positions}. and returns its index if found or -1 otherwise.
           */
          indexOfPosition(
            /**
             * The position whose index is looked for
             */
            oPosition: sap.zen.commons.layout.PositionContainer
          ): int;
          /**
           * Inserts the given control and a corresponding position container into the aggregation named 'positions'.
           * Returns 'this' to allow method chaining.
           */
          insertContent(
            /**
             * The content to insert; if empty, nothing is inserted
             */
            oContent: sap.ui.core.Control,
            /**
             * The '0'-based index where the content shall be inserted at. For a negative value of iIndex, the content
             * is inserted at position '0'; for a value greater than the current size of the aggregation, the content
             * is inserted at the last position.
             */
            iIndex: int,
            /**
             * JSON-like object which defines the position of the child control within the layout. The object is expected
             * to have one or more from the attribute set top, bottom, left, right; each with a value of type sap.ui.core.CSSSize.
             * If no object is given, the default is left=0px,right=0px.
             */
            oPos: object
          ): sap.zen.commons.layout.AbsoluteLayout;
          /**
           * Inserts a position into the aggregation {@link #getPositions positions}.
           */
          insertPosition(
            /**
             * The position to insert; if empty, nothing is inserted
             */
            oPosition: sap.zen.commons.layout.PositionContainer,
            /**
             * The `0`-based index the position should be inserted at; for a negative value of `iIndex`, the position
             * is inserted at position 0; for a value greater than the current size of the aggregation, the position
             * is inserted at the last position
             */
            iIndex: int
          ): this;
          /**
           * Removes all aggregated position containers. Returns an array of the controls contained in the removed
           * position containers (might be empty).
           */
          removeAllContent(): sap.ui.core.Control[];
          /**
           * Removes all the controls from the aggregation {@link #getPositions positions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllPositions(): sap.zen.commons.layout.PositionContainer[];
          /**
           * Removes the given control and its corresponding position container from the aggregation named 'positions'.
           */
          removeContent(
            /**
             * The content control to remove, its ID, or the index of the corresponding position container in the 'positions'
             * aggregation.
             */
            oContent: object
          ): sap.ui.core.Control;
          /**
           * Removes a position from the aggregation {@link #getPositions positions}.
           */
          removePosition(
            /**
             * The position to remove or its index or id
             */
            vPosition: int | string | sap.zen.commons.layout.PositionContainer
          ): sap.zen.commons.layout.PositionContainer;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * The overall height of the control. When not set, 100% is automatically set.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `"100%"`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight?: sap.ui.core.CSSSize
          ): this;
          /**
           * Sets a new value for property {@link #getHorizontalScrolling horizontalScrolling}.
           *
           * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Hidden`.
           */
          setHorizontalScrolling(
            /**
             * New value for property `horizontalScrolling`
             */
            sHorizontalScrolling?: sap.ui.core.Scrolling
          ): this;
          /**
           * Allows to set or change the position information of the given child control
           */
          setPositionOfChild(
            /**
             * The child control for which to change the position information; if empty or not aggregated, nothing is
             * changed
             */
            oControl: sap.ui.core.Control,
            /**
             * JSON-like object which defines the position of the child control. The object is expected to have one
             * or more from the attribute set top, bottom, left, right; each with a value of type sap.ui.core.CSSSize.
             * If no object is given, the default is used which is left=0px,right=0px.
             */
            oPos: object
          ): boolean;
          /**
           * Sets a new value for property {@link #getVerticalScrolling verticalScrolling}.
           *
           * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Hidden`.
           */
          setVerticalScrolling(
            /**
             * New value for property `verticalScrolling`
             */
            sVerticalScrolling?: sap.ui.core.Scrolling
          ): this;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The overall width of the control. When not set, 100% is automatically set.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `'100%'`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth?: sap.ui.core.CSSSize
          ): this;
        }
        /**
         * @deprecated (since 1.38) - Instead, use the `sap.ui.layout.Grid` control.
         */
        class MatrixLayout extends sap.ui.core.Control {
          /**
           * Constructor for a new layout/MatrixLayout.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$MatrixLayoutSettings
          );
          /**
           * Constructor for a new layout/MatrixLayout.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$MatrixLayoutSettings
          );

          /**
           * Adds some row to the aggregation {@link #getRows rows}.
           */
          addRow(
            /**
             * The row to add; if empty, nothing is inserted
             */
            oRow: sap.zen.commons.layout.MatrixLayoutRow
          ): this;
          /**
           * Creates a new matrix layout row and appends it to this matrix layout.
           *
           * Each argument must be either a matrix layout cell, which is added to the row "as is", or an arbitrary
           * content control, which is wrapped with a new (default) matrix layout cell first and then added to the
           * row.
           */
          createRow(
            /**
             * to add
             */
            rowContent:
              | sap.ui.core.Control
              | sap.zen.commons.layout.MatrixLayoutCell
              | string
          ): sap.zen.commons.layout.MatrixLayout;
          /**
           * Destroys all the rows in the aggregation {@link #getRows rows}.
           */
          destroyRows(): this;
          /**
           * Creates a new subclass of class sap.zen.commons.layout.MatrixLayout with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.zen.commons.layout.MatrixLayout>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getColumns columns}.
           *
           * Number of columns. If not specified, the number of columns will be determined from the given cells.
           */
          getColumns(): int;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * CSS height of the matrix layout.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getLayoutFixed layoutFixed}.
           *
           * Sets the table layout. If fixed the width parameter of a column has priority, if not the width of the
           * content of the colums has priority. The default is "fixed". If the fixed layout is used a adequate width
           * of the MatrixLayout should be provided. Otherwise the column width displayed could be different than
           * the given ones because of browser dependend optimazations.
           *
           * Default value is `true`.
           */
          getLayoutFixed(): boolean;
          /**
           * Returns a metadata object for class sap.zen.commons.layout.MatrixLayout.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets content of aggregation {@link #getRows rows}.
           *
           * The matrix layout's individual rows.
           */
          getRows(): sap.zen.commons.layout.MatrixLayoutRow[];
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * CSS width of the matrix layout. If the LayoutFixed = true a adequate width should be provided.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getWidths widths}.
           *
           * Widths of the columns. Use an array to define the widths of the columns. If a column shall have an automatical
           * sizing enter "auto" for this column width.
           */
          getWidths(): sap.ui.core.CSSSize[];
          /**
           * Checks for the provided `sap.zen.commons.layout.MatrixLayoutRow` in the aggregation {@link #getRows rows}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfRow(
            /**
             * The row whose index is looked for
             */
            oRow: sap.zen.commons.layout.MatrixLayoutRow
          ): int;
          /**
           * Inserts a row into the aggregation {@link #getRows rows}.
           */
          insertRow(
            /**
             * The row to insert; if empty, nothing is inserted
             */
            oRow: sap.zen.commons.layout.MatrixLayoutRow,
            /**
             * The `0`-based index the row should be inserted at; for a negative value of `iIndex`, the row is inserted
             * at position 0; for a value greater than the current size of the aggregation, the row is inserted at the
             * last position
             */
            iIndex: int
          ): this;
          /**
           * Removes all the controls from the aggregation {@link #getRows rows}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllRows(): sap.zen.commons.layout.MatrixLayoutRow[];
          /**
           * Removes a row from the aggregation {@link #getRows rows}.
           */
          removeRow(
            /**
             * The row to remove or its index or id
             */
            vRow: int | string | sap.zen.commons.layout.MatrixLayoutRow
          ): sap.zen.commons.layout.MatrixLayoutRow;
          /**
           * Sets a new value for property {@link #getColumns columns}.
           *
           * Number of columns. If not specified, the number of columns will be determined from the given cells.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setColumns(
            /**
             * New value for property `columns`
             */
            iColumns?: int
          ): this;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * CSS height of the matrix layout.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight?: sap.ui.core.CSSSize
          ): this;
          /**
           * Sets a new value for property {@link #getLayoutFixed layoutFixed}.
           *
           * Sets the table layout. If fixed the width parameter of a column has priority, if not the width of the
           * content of the colums has priority. The default is "fixed". If the fixed layout is used a adequate width
           * of the MatrixLayout should be provided. Otherwise the column width displayed could be different than
           * the given ones because of browser dependend optimazations.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setLayoutFixed(
            /**
             * New value for property `layoutFixed`
             */
            bLayoutFixed?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * CSS width of the matrix layout. If the LayoutFixed = true a adequate width should be provided.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth?: sap.ui.core.CSSSize
          ): this;
          /**
           * Sets a new value for property {@link #getWidths widths}.
           *
           * Widths of the columns. Use an array to define the widths of the columns. If a column shall have an automatical
           * sizing enter "auto" for this column width.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidths(
            /**
             * New value for property `widths`
             */
            sWidths?: sap.ui.core.CSSSize[]
          ): this;
        }
        /**
         * @deprecated (since 1.38) - Instead, use the `sap.ui.layout.Grid` control.
         *
         * Non-control element used as part of a matrix layout's inner structure.
         */
        class MatrixLayoutCell extends sap.ui.core.Element {
          /**
           * Constructor for a new layout/MatrixLayoutCell.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$MatrixLayoutCellSettings
          );
          /**
           * Constructor for a new layout/MatrixLayoutCell.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$MatrixLayoutCellSettings
          );

          /**
           * The string given as "sStyleClass" will be added to the "class" attribute of this element's root HTML
           * element.
           *
           * This method is intended to be used to mark controls as being of a special type for which special styling
           * can be provided using CSS selectors that reference this style class name.
           *
           *
           * ```javascript
           *
           * Example:
           * myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
           *
           * ...and in CSS:
           * .myRedTextButton {
           * color: red;
           * }
           * ```
           *
           *
           * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then make
           * the text in this particular button red.
           *
           * Only characters allowed inside HTML attributes are allowed. Quotes are not allowed and this method will
           * ignore any strings containing quotes. Strings containing spaces are interpreted as ONE custom style class
           * (even though CSS selectors interpret them as different classes) and can only removed later by calling
           * removeStyleClass() with exactly the same (space-containing) string as parameter. Multiple calls with
           * the same sStyleClass will have no different effect than calling once. If sStyleClass is null, the call
           * is ignored.
           *
           * Returns `this` to allow method chaining
           */
          addStyleClass(
            /**
             * the CSS class name to be added
             */
            sStyleClass: string
          ): sap.zen.commons.layout.MatrixLayoutCell;
          /**
           * Returns true if the given style class string is valid and if this Element has this style class set via
           * a previous call to addStyleClass().
           */
          hasStyleClass(
            /**
             * the style to check for
             */
            sStyleClass: string
          ): boolean;
          /**
           * Removes the given string from the list of custom style classes that have been set previously. Regular
           * style classes like "sapUiBtn" cannot be removed.
           *
           * Returns `this` to allow method chaining
           */
          removeStyleClass(
            /**
             * the style to be removed
             */
            sStyleClass: string
          ): sap.zen.commons.layout.MatrixLayoutCell;
        }
        /**
         * @deprecated (since 1.89.0)
         *
         * Non-control element used as part of a matrix layout's inner structure.
         */
        class MatrixLayoutRow extends sap.ui.core.Element {
          /**
           * Constructor for a new layout/MatrixLayoutRow.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$MatrixLayoutRowSettings
          );
          /**
           * Constructor for a new layout/MatrixLayoutRow.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$MatrixLayoutRowSettings
          );

          /**
           * Adds some cell to the aggregation {@link #getCells cells}.
           */
          addCell(
            /**
             * The cell to add; if empty, nothing is inserted
             */
            oCell: sap.zen.commons.layout.MatrixLayoutCell
          ): this;
          /**
           * The string given as "sStyleClass" will be added to the "class" attribute of this element's root HTML
           * element.
           *
           * This method is intended to be used to mark controls as being of a special type for which special styling
           * can be provided using CSS selectors that reference this style class name.
           *
           *
           * ```javascript
           *
           * Example:
           * myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
           *
           * ...and in CSS:
           * .myRedTextButton {
           * color: red;
           * }
           * ```
           *
           *
           * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then make
           * the text in this particular button red.
           *
           * Only characters allowed inside HTML attributes are allowed. Quotes are not allowed and this method will
           * ignore any strings containing quotes. Strings containing spaces are interpreted as ONE custom style class
           * (even though CSS selectors interpret them as different classes) and can only removed later by calling
           * removeStyleClass() with exactly the same (space-containing) string as parameter. Multiple calls with
           * the same sStyleClass will have no different effect than calling once. If sStyleClass is null, the call
           * is ignored.
           *
           * Returns `this` to allow method chaining
           */
          addStyleClass(
            /**
             * the CSS class name to be added
             */
            sStyleClass: string
          ): sap.zen.commons.layout.MatrixLayoutRow;
          /**
           * Destroys all the cells in the aggregation {@link #getCells cells}.
           */
          destroyCells(): this;
          /**
           * Creates a new subclass of class sap.zen.commons.layout.MatrixLayoutRow with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.zen.commons.layout.MatrixLayoutRow
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getCells cells}.
           *
           * The matrix layout row's individual cells.
           */
          getCells(): sap.zen.commons.layout.MatrixLayoutCell[];
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * Height of the row.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Returns a metadata object for class sap.zen.commons.layout.MatrixLayoutRow.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Returns true if the given style class string is valid and if this Element has this style class set via
           * a previous call to addStyleClass().
           */
          hasStyleClass(
            /**
             * the style to check for
             */
            sStyleClass: string
          ): boolean;
          /**
           * Checks for the provided `sap.zen.commons.layout.MatrixLayoutCell` in the aggregation {@link #getCells
           * cells}. and returns its index if found or -1 otherwise.
           */
          indexOfCell(
            /**
             * The cell whose index is looked for
             */
            oCell: sap.zen.commons.layout.MatrixLayoutCell
          ): int;
          /**
           * Inserts a cell into the aggregation {@link #getCells cells}.
           */
          insertCell(
            /**
             * The cell to insert; if empty, nothing is inserted
             */
            oCell: sap.zen.commons.layout.MatrixLayoutCell,
            /**
             * The `0`-based index the cell should be inserted at; for a negative value of `iIndex`, the cell is inserted
             * at position 0; for a value greater than the current size of the aggregation, the cell is inserted at
             * the last position
             */
            iIndex: int
          ): this;
          /**
           * Removes all the controls from the aggregation {@link #getCells cells}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllCells(): sap.zen.commons.layout.MatrixLayoutCell[];
          /**
           * Removes a cell from the aggregation {@link #getCells cells}.
           */
          removeCell(
            /**
             * The cell to remove or its index or id
             */
            vCell: int | string | sap.zen.commons.layout.MatrixLayoutCell
          ): sap.zen.commons.layout.MatrixLayoutCell;
          /**
           * Removes the given string from the list of custom style classes that have been set previously. Regular
           * style classes like "sapUiBtn" cannot be removed.
           *
           * Returns `this` to allow method chaining
           */
          removeStyleClass(
            /**
             * the style to be removed
             */
            sStyleClass: string
          ): sap.zen.commons.layout.MatrixLayoutRow;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * Height of the row.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight?: sap.ui.core.CSSSize
          ): this;
        }
        /**
         * @deprecated (since 1.89)
         *
         * Is used to specify the position of a control in the AbsoluteLayout
         */
        class PositionContainer extends sap.ui.core.Element {
          /**
           * Constructor for a new layout/PositionContainer.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$PositionContainerSettings
          );
          /**
           * Constructor for a new layout/PositionContainer.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: sap.zen.commons.layout.$PositionContainerSettings
          );

          /**
           * Destroys the control in the aggregation {@link #getControl control}.
           */
          destroyControl(): this;
          /**
           * Creates a new subclass of class sap.zen.commons.layout.PositionContainer with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.zen.commons.layout.PositionContainer
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getBottom bottom}.
           *
           * Defines the distance to the bottom of the layout (as specified in HTML)
           */
          getBottom(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getCenterHorizontally centerHorizontally}.
           *
           * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area. The values
           * of the attributes left and right are ignored when this feature is activated.
           *
           * Default value is `false`.
           */
          getCenterHorizontally(): boolean;
          /**
           * Gets current value of property {@link #getCenterVertically centerVertically}.
           *
           * Indicates whether this container should be centered vertically within the AbsoluteLayout area. The values
           * of the attributes top and bottom are ignored when this feature is activated.
           *
           * Default value is `false`.
           */
          getCenterVertically(): boolean;
          /**
           * Gets content of aggregation {@link #getControl control}.
           *
           * Child control of the position container
           */
          getControl(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getLeft left}.
           *
           * Defines the distance to the left of the layout (as specified in HTML)
           */
          getLeft(): sap.ui.core.CSSSize;
          /**
           * Returns a metadata object for class sap.zen.commons.layout.PositionContainer.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getRight right}.
           *
           * Defines the distance to the right of the layout (as specified in HTML)
           */
          getRight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getTop top}.
           *
           * Defines the distance to the top of the layout (as specified in HTML)
           */
          getTop(): sap.ui.core.CSSSize;
          /**
           * Sets a new value for property {@link #getBottom bottom}.
           *
           * Defines the distance to the bottom of the layout (as specified in HTML)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBottom(
            /**
             * New value for property `bottom`
             */
            sBottom?: sap.ui.core.CSSSize
          ): this;
          /**
           * Sets a new value for property {@link #getCenterHorizontally centerHorizontally}.
           *
           * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area. The values
           * of the attributes left and right are ignored when this feature is activated.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setCenterHorizontally(
            /**
             * New value for property `centerHorizontally`
             */
            bCenterHorizontally?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getCenterVertically centerVertically}.
           *
           * Indicates whether this container should be centered vertically within the AbsoluteLayout area. The values
           * of the attributes top and bottom are ignored when this feature is activated.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setCenterVertically(
            /**
             * New value for property `centerVertically`
             */
            bCenterVertically?: boolean
          ): this;
          /**
           * Sets the aggregated {@link #getControl control}.
           */
          setControl(
            /**
             * The control to set
             */
            oControl: sap.ui.core.Control
          ): this;
          /**
           * Sets a new value for property {@link #getLeft left}.
           *
           * Defines the distance to the left of the layout (as specified in HTML)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLeft(
            /**
             * New value for property `left`
             */
            sLeft?: sap.ui.core.CSSSize
          ): this;
          /**
           * Sets a new value for property {@link #getRight right}.
           *
           * Defines the distance to the right of the layout (as specified in HTML)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setRight(
            /**
             * New value for property `right`
             */
            sRight?: sap.ui.core.CSSSize
          ): this;
          /**
           * Sets a new value for property {@link #getTop top}.
           *
           * Defines the distance to the top of the layout (as specified in HTML)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTop(
            /**
             * New value for property `top`
             */
            sTop?: sap.ui.core.CSSSize
          ): this;
          /**
           * Updates the position properties of the container according to the given position in JSON style.
           */
          updatePosition(
            /**
             * JSON-like object which defines the position of the child control in the absolute layout. The object is
             * expected to have one or more out of the attributes top, bottom, left, right (each with a value of type
             * sap.ui.core.CSSSize). If no object is given, nothing is updated.
             */
            oPos: object
          ): void;
        }
      }

      interface $CellSettings extends sap.ui.core.$ElementSettings {
        /**
         * The value that is displayed in the cell
         */
        displayValue?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The celltype of the cell. (HEADER, TITLE, RESULT, ...)
         */
        cellType?:
          | sap.zen.commons.CellType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Column of the `Cell`
         */
        column?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Icon to be displayed in the `Cell`
         */
        icon?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Help Id of the `Cell`. Intended to be used by WebAssist/Enable Now.
         */
        helpId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The value state of the `Cell`. This property is used for entry ready cells.
         */
        valueState?:
          | sap.ui.core.ValueState
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The row of the `Cell`.
         */
        row?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The indent level of the `Cell`.
         */
        displayLevel?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates whether the `Cell` is input enabled.
         */
        inputEnabled?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The semantic class of the Cell. The css class associated to the class is put into the cells td. The Grid
         * Aggregation `semanticStyles` associates a semantic style to a css style.
         */
        semanticClass?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Alert Level of the cell for exeptional reporting
         */
        alertLevel?:
          | sap.zen.commons.AlertLevel
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $GridSettings extends sap.ui.core.$ControlSettings {
        /**
         * Maximum of rows to be displayed in the Grid
         */
        maxRows?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Available rows in which the user can scroll
         */
        virtualRows?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Uniform height of a row in the Grid.
         */
        rowHeight?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Maximum of columns to be displayed in the Grid.
         */
        maxColumns?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Available columns in which the user can scroll
         */
        virtualColumns?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicator whether the grid should support data entry
         */
        input?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Number of fixed header rows
         */
        fixedRows?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Number of fixed header columns
         */
        fixedColumns?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * offset column
         */
        offsetColumn?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * offset row
         */
        offsetRow?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Property for different table formats
         */
        format?:
          | sap.zen.commons.Format
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Cells to be displayed
         */
        cells?:
          | sap.zen.commons.Cell[]
          | sap.zen.commons.Cell
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Sematic Styles to be applied for cell, representing a given member
         */
        semanticStyles?:
          | sap.zen.commons.SemanticStyle[]
          | sap.zen.commons.SemanticStyle
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Fired when the user scrolls out of the area between available rows and virtual rows
         */
        requestMoreRows?: Function;

        /**
         * Fired when the user scrolls out of the area between available columns and virtual columns
         */
        requestMoreColumns?: Function;

        /**
         * Is fired on click, the Pivot table displays the context menu
         */
        rightClick?: Function;

        /**
         * Is fired on hover, when the user enters the cell
         */
        cellEnter?: Function;

        /**
         * Is fired on hover, when the user leaves the cell
         */
        cellLeave?: Function;

        /**
         * Is fired on click on an icon (typically a collapse or expand) symbol
         */
        drill?: Function;
      }

      interface $SemanticStyleSettings extends sap.ui.core.$ElementSettings {
        /**
         * The semantic class
         */
        semanticClass?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The associated css class
         */
        cssClass?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * @SINCE 1.0.0
       * @EXPERIMENTAL (since 1.89)
       *
       * Cell of a Grid.
       */
      class Cell extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Cell. settings.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new element
           */
          mSettings?: sap.zen.commons.$CellSettings
        );
        /**
         * Creates and initializes a new Cell. settings.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new element
           */
          mSettings?: sap.zen.commons.$CellSettings
        );

        /**
         * Creates a new subclass of class sap.zen.commons.Cell with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.commons.Cell>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAlertLevel alertLevel}.
         *
         * The Alert Level of the cell for exeptional reporting
         */
        getAlertLevel(): sap.zen.commons.AlertLevel;
        /**
         * Gets current value of property {@link #getCellType cellType}.
         *
         * The celltype of the cell. (HEADER, TITLE, RESULT, ...)
         *
         * Default value is `STANDARD`.
         */
        getCellType(): sap.zen.commons.CellType;
        /**
         * Gets current value of property {@link #getColumn column}.
         *
         * The Column of the `Cell`
         *
         * Default value is `0`.
         */
        getColumn(): int;
        /**
         * Gets current value of property {@link #getDisplayLevel displayLevel}.
         *
         * The indent level of the `Cell`.
         */
        getDisplayLevel(): int;
        /**
         * Gets current value of property {@link #getDisplayValue displayValue}.
         *
         * The value that is displayed in the cell
         */
        getDisplayValue(): string;
        /**
         * Gets current value of property {@link #getHelpId helpId}.
         *
         * The Help Id of the `Cell`. Intended to be used by WebAssist/Enable Now.
         */
        getHelpId(): string;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * The Icon to be displayed in the `Cell`
         */
        getIcon(): string;
        /**
         * Gets current value of property {@link #getInputEnabled inputEnabled}.
         *
         * Indicates whether the `Cell` is input enabled.
         */
        getInputEnabled(): boolean;
        /**
         * Returns a metadata object for class sap.zen.commons.Cell.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getRow row}.
         *
         * The row of the `Cell`.
         *
         * Default value is `0`.
         */
        getRow(): int;
        /**
         * Gets current value of property {@link #getSemanticClass semanticClass}.
         *
         * The semantic class of the Cell. The css class associated to the class is put into the cells td. The Grid
         * Aggregation `semanticStyles` associates a semantic style to a css style.
         */
        getSemanticClass(): string;
        /**
         * Gets current value of property {@link #getValueState valueState}.
         *
         * The value state of the `Cell`. This property is used for entry ready cells.
         */
        getValueState(): sap.ui.core.ValueState;
        /**
         * Sets a new value for property {@link #getAlertLevel alertLevel}.
         *
         * The Alert Level of the cell for exeptional reporting
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAlertLevel(
          /**
           * New value for property `alertLevel`
           */
          sAlertLevel: sap.zen.commons.AlertLevel
        ): this;
        /**
         * Sets a new value for property {@link #getCellType cellType}.
         *
         * The celltype of the cell. (HEADER, TITLE, RESULT, ...)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `STANDARD`.
         */
        setCellType(
          /**
           * New value for property `cellType`
           */
          sCellType?: sap.zen.commons.CellType
        ): this;
        /**
         * Sets a new value for property {@link #getColumn column}.
         *
         * The Column of the `Cell`
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setColumn(
          /**
           * New value for property `column`
           */
          iColumn?: int
        ): this;
        /**
         * Sets a new value for property {@link #getDisplayLevel displayLevel}.
         *
         * The indent level of the `Cell`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDisplayLevel(
          /**
           * New value for property `displayLevel`
           */
          iDisplayLevel: int
        ): this;
        /**
         * Sets a new value for property {@link #getDisplayValue displayValue}.
         *
         * The value that is displayed in the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDisplayValue(
          /**
           * New value for property `displayValue`
           */
          sDisplayValue: string
        ): this;
        /**
         * Sets a new value for property {@link #getHelpId helpId}.
         *
         * The Help Id of the `Cell`. Intended to be used by WebAssist/Enable Now.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHelpId(
          /**
           * New value for property `helpId`
           */
          sHelpId: string
        ): this;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * The Icon to be displayed in the `Cell`
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon: string
        ): this;
        /**
         * Sets a new value for property {@link #getInputEnabled inputEnabled}.
         *
         * Indicates whether the `Cell` is input enabled.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setInputEnabled(
          /**
           * New value for property `inputEnabled`
           */
          bInputEnabled: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getRow row}.
         *
         * The row of the `Cell`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setRow(
          /**
           * New value for property `row`
           */
          iRow?: int
        ): this;
        /**
         * Sets a new value for property {@link #getSemanticClass semanticClass}.
         *
         * The semantic class of the Cell. The css class associated to the class is put into the cells td. The Grid
         * Aggregation `semanticStyles` associates a semantic style to a css style.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSemanticClass(
          /**
           * New value for property `semanticClass`
           */
          sSemanticClass: string
        ): this;
        /**
         * Sets a new value for property {@link #getValueState valueState}.
         *
         * The value state of the `Cell`. This property is used for entry ready cells.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setValueState(
          /**
           * New value for property `valueState`
           */
          sValueState: sap.ui.core.ValueState
        ): this;
      }
      /**
       * @EXPERIMENTAL (since 1.89)
       *
       * Enables users to view and edit data in a grid. The grid is mimicking the familiar display of spreadsheets.
       *
       * Overview:
       *
       * The user can view the data in the grid, trigger actions via a context menu, enter data into input ready
       * cells.
       *
       * Usage:
       *
       * The `Grid` is mainly intended as a helper control for the `PivotTable`.
       */
      class Grid extends sap.ui.core.Control {
        /**
         * Constructor for a new `Grid`.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.zen.commons.$GridSettings
        );
        /**
         * Constructor for a new `Grid`.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.zen.commons.$GridSettings
        );

        /**
         * Adds some cell to the aggregation {@link #getCells cells}.
         */
        addCell(
          /**
           * The cell to add; if empty, nothing is inserted
           */
          oCell: sap.zen.commons.Cell
        ): this;
        /**
         * Adds some semanticStyle to the aggregation {@link #getSemanticStyles semanticStyles}.
         */
        addSemanticStyle(
          /**
           * The semanticStyle to add; if empty, nothing is inserted
           */
          oSemanticStyle: sap.zen.commons.SemanticStyle
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:cellEnter cellEnter} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on hover, when the user enters the cell
         */
        attachCellEnter(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:cellEnter cellEnter} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on hover, when the user enters the cell
         */
        attachCellEnter(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:cellLeave cellLeave} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on hover, when the user leaves the cell
         */
        attachCellLeave(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:cellLeave cellLeave} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on hover, when the user leaves the cell
         */
        attachCellLeave(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drill drill} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on click on an icon (typically a collapse or expand) symbol
         */
        attachDrill(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drill drill} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on click on an icon (typically a collapse or expand) symbol
         */
        attachDrill(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:requestMoreColumns requestMoreColumns} event
         * of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Fired when the user scrolls out of the area between available columns and virtual columns
         */
        attachRequestMoreColumns(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:requestMoreColumns requestMoreColumns} event
         * of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Fired when the user scrolls out of the area between available columns and virtual columns
         */
        attachRequestMoreColumns(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:requestMoreRows requestMoreRows} event of this
         * `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Fired when the user scrolls out of the area between available rows and virtual rows
         */
        attachRequestMoreRows(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:requestMoreRows requestMoreRows} event of this
         * `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Fired when the user scrolls out of the area between available rows and virtual rows
         */
        attachRequestMoreRows(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:rightClick rightClick} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on click, the Pivot table displays the context menu
         */
        attachRightClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:rightClick rightClick} event of this `sap.zen.commons.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.commons.Grid` itself.
         *
         * Is fired on click, the Pivot table displays the context menu
         */
        attachRightClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.commons.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Binds aggregation {@link #getCells cells} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindCells(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.AggregationBindingInfo
        ): this;
        /**
         * Binds aggregation {@link #getSemanticStyles semanticStyles} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindSemanticStyles(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.AggregationBindingInfo
        ): this;
        /**
         * Destroys all the cells in the aggregation {@link #getCells cells}.
         */
        destroyCells(): this;
        /**
         * Destroys all the semanticStyles in the aggregation {@link #getSemanticStyles semanticStyles}.
         */
        destroySemanticStyles(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:cellEnter cellEnter} event of this `sap.zen.commons.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCellEnter(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:cellLeave cellLeave} event of this `sap.zen.commons.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCellLeave(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:drill drill} event of this `sap.zen.commons.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDrill(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:requestMoreColumns requestMoreColumns} event
         * of this `sap.zen.commons.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRequestMoreColumns(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:requestMoreRows requestMoreRows} event of
         * this `sap.zen.commons.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRequestMoreRows(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:rightClick rightClick} event of this `sap.zen.commons.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRightClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.zen.commons.Grid with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.commons.Grid>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:cellEnter cellEnter} to attached listeners.
         */
        fireCellEnter(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The cell which the user entered
             */
            cell?: sap.zen.commons.Cell;
            /**
             * The dom element which the user entered
             */
            element?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:cellLeave cellLeave} to attached listeners.
         */
        fireCellLeave(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The cell which the user left
             */
            cell?: sap.zen.commons.Cell;
          }
        ): this;
        /**
         * Fires event {@link #event:drill drill} to attached listeners.
         */
        fireDrill(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The cell with the icon
             */
            cell?: sap.zen.commons.Cell;
          }
        ): this;
        /**
         * Fires event {@link #event:requestMoreColumns requestMoreColumns} to attached listeners.
         */
        fireRequestMoreColumns(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Number of current column
             */
            currentColumn?: int;
            /**
             * Promise Resolver to be resolved or rejected when data was fetched
             */
            defered?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:requestMoreRows requestMoreRows} to attached listeners.
         */
        fireRequestMoreRows(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Number of current row
             */
            currentRow?: int;
            /**
             * Promise Resolver to be resolved or rejected when data was fetched
             */
            defered?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:rightClick rightClick} to attached listeners.
         */
        fireRightClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The cell on which the user clicked
             */
            cell?: sap.zen.commons.Cell;
            /**
             * The link which renders the clicked cell
             */
            link?: sap.m.Link;
          }
        ): this;
        /**
         * Gets content of aggregation {@link #getCells cells}.
         *
         * Cells to be displayed
         */
        getCells(): sap.zen.commons.Cell[];
        /**
         * Gets current value of property {@link #getFixedColumns fixedColumns}.
         *
         * Number of fixed header columns
         *
         * Default value is `0`.
         */
        getFixedColumns(): int;
        /**
         * Gets current value of property {@link #getFixedRows fixedRows}.
         *
         * Number of fixed header rows
         *
         * Default value is `0`.
         */
        getFixedRows(): int;
        /**
         * Gets current value of property {@link #getFormat format}.
         *
         * Property for different table formats
         *
         * Default value is `ExcelStyle`.
         */
        getFormat(): sap.zen.commons.Format;
        /**
         * Gets current value of property {@link #getInput input}.
         *
         * Indicator whether the grid should support data entry
         *
         * Default value is `false`.
         */
        getInput(): boolean;
        /**
         * Gets current value of property {@link #getMaxColumns maxColumns}.
         *
         * Maximum of columns to be displayed in the Grid.
         *
         * Default value is `20`.
         */
        getMaxColumns(): int;
        /**
         * Gets current value of property {@link #getMaxRows maxRows}.
         *
         * Maximum of rows to be displayed in the Grid
         *
         * Default value is `15`.
         */
        getMaxRows(): int;
        /**
         * Returns a metadata object for class sap.zen.commons.Grid.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getOffsetColumn offsetColumn}.
         *
         * offset column
         *
         * Default value is `0`.
         */
        getOffsetColumn(): int;
        /**
         * Gets current value of property {@link #getOffsetRow offsetRow}.
         *
         * offset row
         *
         * Default value is `0`.
         */
        getOffsetRow(): int;
        /**
         * Gets current value of property {@link #getRowHeight rowHeight}.
         *
         * Uniform height of a row in the Grid.
         *
         * Default value is `25`.
         */
        getRowHeight(): int;
        /**
         * Gets content of aggregation {@link #getSemanticStyles semanticStyles}.
         *
         * Sematic Styles to be applied for cell, representing a given member
         */
        getSemanticStyles(): sap.zen.commons.SemanticStyle[];
        /**
         * Gets current value of property {@link #getVirtualColumns virtualColumns}.
         *
         * Available columns in which the user can scroll
         */
        getVirtualColumns(): int;
        /**
         * Gets current value of property {@link #getVirtualRows virtualRows}.
         *
         * Available rows in which the user can scroll
         */
        getVirtualRows(): int;
        /**
         * Checks for the provided `sap.zen.commons.Cell` in the aggregation {@link #getCells cells}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfCell(
          /**
           * The cell whose index is looked for
           */
          oCell: sap.zen.commons.Cell
        ): int;
        /**
         * Checks for the provided `sap.zen.commons.SemanticStyle` in the aggregation {@link #getSemanticStyles
         * semanticStyles}. and returns its index if found or -1 otherwise.
         */
        indexOfSemanticStyle(
          /**
           * The semanticStyle whose index is looked for
           */
          oSemanticStyle: sap.zen.commons.SemanticStyle
        ): int;
        /**
         * Inserts a cell into the aggregation {@link #getCells cells}.
         */
        insertCell(
          /**
           * The cell to insert; if empty, nothing is inserted
           */
          oCell: sap.zen.commons.Cell,
          /**
           * The `0`-based index the cell should be inserted at; for a negative value of `iIndex`, the cell is inserted
           * at position 0; for a value greater than the current size of the aggregation, the cell is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a semanticStyle into the aggregation {@link #getSemanticStyles semanticStyles}.
         */
        insertSemanticStyle(
          /**
           * The semanticStyle to insert; if empty, nothing is inserted
           */
          oSemanticStyle: sap.zen.commons.SemanticStyle,
          /**
           * The `0`-based index the semanticStyle should be inserted at; for a negative value of `iIndex`, the semanticStyle
           * is inserted at position 0; for a value greater than the current size of the aggregation, the semanticStyle
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getCells cells}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllCells(): sap.zen.commons.Cell[];
        /**
         * Removes all the controls from the aggregation {@link #getSemanticStyles semanticStyles}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllSemanticStyles(): sap.zen.commons.SemanticStyle[];
        /**
         * Removes a cell from the aggregation {@link #getCells cells}.
         */
        removeCell(
          /**
           * The cell to remove or its index or id
           */
          vCell: int | string | sap.zen.commons.Cell
        ): sap.zen.commons.Cell;
        /**
         * Removes a semanticStyle from the aggregation {@link #getSemanticStyles semanticStyles}.
         */
        removeSemanticStyle(
          /**
           * The semanticStyle to remove or its index or id
           */
          vSemanticStyle: int | string | sap.zen.commons.SemanticStyle
        ): sap.zen.commons.SemanticStyle;
        /**
         * Sets a new value for property {@link #getFixedColumns fixedColumns}.
         *
         * Number of fixed header columns
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setFixedColumns(
          /**
           * New value for property `fixedColumns`
           */
          iFixedColumns?: int
        ): this;
        /**
         * Sets a new value for property {@link #getFixedRows fixedRows}.
         *
         * Number of fixed header rows
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setFixedRows(
          /**
           * New value for property `fixedRows`
           */
          iFixedRows?: int
        ): this;
        /**
         * Sets a new value for property {@link #getFormat format}.
         *
         * Property for different table formats
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `ExcelStyle`.
         */
        setFormat(
          /**
           * New value for property `format`
           */
          sFormat?: sap.zen.commons.Format
        ): this;
        /**
         * Sets a new value for property {@link #getInput input}.
         *
         * Indicator whether the grid should support data entry
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setInput(
          /**
           * New value for property `input`
           */
          bInput?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getMaxColumns maxColumns}.
         *
         * Maximum of columns to be displayed in the Grid.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `20`.
         */
        setMaxColumns(
          /**
           * New value for property `maxColumns`
           */
          iMaxColumns?: int
        ): this;
        /**
         * Sets a new value for property {@link #getMaxRows maxRows}.
         *
         * Maximum of rows to be displayed in the Grid
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `15`.
         */
        setMaxRows(
          /**
           * New value for property `maxRows`
           */
          iMaxRows?: int
        ): this;
        /**
         * Sets a new value for property {@link #getOffsetColumn offsetColumn}.
         *
         * offset column
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setOffsetColumn(
          /**
           * New value for property `offsetColumn`
           */
          iOffsetColumn?: int
        ): this;
        /**
         * Sets a new value for property {@link #getOffsetRow offsetRow}.
         *
         * offset row
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setOffsetRow(
          /**
           * New value for property `offsetRow`
           */
          iOffsetRow?: int
        ): this;
        /**
         * Sets a new value for property {@link #getRowHeight rowHeight}.
         *
         * Uniform height of a row in the Grid.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `25`.
         */
        setRowHeight(
          /**
           * New value for property `rowHeight`
           */
          iRowHeight?: int
        ): this;
        /**
         * Sets a new value for property {@link #getVirtualColumns virtualColumns}.
         *
         * Available columns in which the user can scroll
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualColumns(
          /**
           * New value for property `virtualColumns`
           */
          iVirtualColumns: int
        ): this;
        /**
         * Sets a new value for property {@link #getVirtualRows virtualRows}.
         *
         * Available rows in which the user can scroll
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualRows(
          /**
           * New value for property `virtualRows`
           */
          iVirtualRows: int
        ): this;
        /**
         * Unbinds aggregation {@link #getCells cells} from model data.
         */
        unbindCells(): this;
        /**
         * Unbinds aggregation {@link #getSemanticStyles semanticStyles} from model data.
         */
        unbindSemanticStyles(): this;
      }
      /**
       * @SINCE 1.89
       * @EXPERIMENTAL (since 1.89)
       *
       * Semantic Style of a Grid.
       */
      class SemanticStyle extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Semantic Style. settings.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new element
           */
          mSettings?: sap.zen.commons.$SemanticStyleSettings
        );
        /**
         * Creates and initializes a new Semantic Style. settings.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new element, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new element
           */
          mSettings?: sap.zen.commons.$SemanticStyleSettings
        );

        /**
         * Creates a new subclass of class sap.zen.commons.SemanticStyle with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.commons.SemanticStyle>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCssClass cssClass}.
         *
         * The associated css class
         */
        getCssClass(): string;
        /**
         * Returns a metadata object for class sap.zen.commons.SemanticStyle.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getSemanticClass semanticClass}.
         *
         * The semantic class
         */
        getSemanticClass(): string;
        /**
         * Sets a new value for property {@link #getCssClass cssClass}.
         *
         * The associated css class
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCssClass(
          /**
           * New value for property `cssClass`
           */
          sCssClass: string
        ): this;
        /**
         * Sets a new value for property {@link #getSemanticClass semanticClass}.
         *
         * The semantic class
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSemanticClass(
          /**
           * New value for property `semanticClass`
           */
          sSemanticClass: string
        ): this;
      }
      /**
       * @EXPERIMENTAL (since 1.89)
       *
       * Alert Level.
       */
      enum AlertLevel {
        /**
         * Bad 1
         */
        BAD_1 = "7",
        /**
         * Bad 2
         */
        BAD_2 = "8",
        /**
         * Bad 3
         */
        BAD_3 = "9",
        /**
         * Critical 1
         */
        CRITICAL_1 = "4",
        /**
         * Critical 2
         */
        CRITICAL_2 = "5",
        /**
         * Critical 3
         */
        CRITICAL_3 = "6",
        /**
         * Good 1
         */
        GOOD_1 = "1",
        /**
         * Good 2
         */
        GOOD_2 = "2",
        /**
         * Good 3
         */
        GOOD_3 = "3",
        /**
         * Normal
         */
        NORMAL = "0",
      }
      /**
       * @EXPERIMENTAL (since 1.89)
       *
       * Types of a grid cell.
       */
      enum CellType {
        /**
         * A data cell, representing value with a critical flavour
         */
        CRITICAL = "Critical",
        /**
         * An empty data cell
         */
        EMPTY = "Empty",
        /**
         * A header cell, representing a member of a (virtual) dimension
         */
        HEADER = "Header",
        /**
         * A data cell, representing value with a negative flavour
         */
        NEGATIVE = "Negative",
        /**
         * A data cell, representing value with a positive flavour
         */
        POSITIVE = "Positive",
        /**
         * A result cell, representing an aggregated value
         */
        RESULT = "Result",
        /**
         * A result cell, representing an aggregated value with a critical flavour
         */
        RESULT_CRITICAL = "ResultCritical",
        /**
         * A virtual member of a dimension indicating an aggregation of members
         */
        RESULT_HEADER = "ResultHeader",
        /**
         * A result cell, representing an aggregated value with a negative flavour
         */
        RESULT_NEGATIVE = "ResultNegative",
        /**
         * A result cell, representing an aggregated value with a positive flavour
         */
        RESULT_POSITIVE = "ResultPositive",
        /**
         * A data cell, representing value
         */
        STANDARD = "Standard",
        /**
         * A title cell, representing a dimension
         */
        TITLE = "Title",
      }
      /**
       * @EXPERIMENTAL (since 1.89)
       *
       * Format to be applied to a `Grid`
       */
      enum Format {
        /**
         * Basic grid format
         */
        Basic = "Basic",
        /**
         * mimicking hichert
         */
        BusinessStyle = "BusinessStyle",
        /**
         * mimicking spreadsheet
         */
        ExcelStyle = "ExcelStyle",
      }
      /**
       * @deprecated (since 1.89.0)
       *
       * Horizontal alignment, e.g. of a layout cell's content within the cell's borders. Note that some values
       * depend on the current locale's writing direction while others do not.
       */
      enum HAlign {
        /**
         * Aligned towards the beginning of a line, in the current locale's writing direction.
         */
        Begin = "Begin",
        /**
         * Horizontally centered.
         */
        Center = "Center",
        /**
         * Aligned towards the end of a line, in the current locale's writing direction.
         */
        End = "End",
        /**
         * Left aligned, regardless of the current locale's writing direction.
         */
        Left = "Left",
        /**
         * Right aligned, regardless of the current locale's writing direction.
         */
        Right = "Right",
      }
      /**
       * @deprecated (since 1.89)
       * @EXPERIMENTAL
       *
       * Padding, e.g. of a layout cell's content within the cell's borders. Note that all options except "None"
       * include a padding of 2px at the top and bottom, and differ only in the presence of a 4px padding towards
       * the beginning or end of a line, in the current locale's writing direction.
       */
      enum Padding {
        /**
         * Top and bottom padding of 2px. Padding of 4px towards the beginning of a line, in the current locale's
         * writing direction, but none towards its end.
         */
        Begin = "Begin",
        /**
         * Top and bottom padding of 2px. Padding of 4px towards both the beginning and end of a line.
         */
        Both = "Both",
        /**
         * Top and bottom padding of 2px. Padding of 4px towards the end of a line, in the current locale's writing
         * direction, but none towards its beginning.
         */
        End = "End",
        /**
         * Top and bottom padding of 2px. No padding towards neither the beginning nor end of a line.
         */
        Neither = "Neither",
        /**
         * No padding at all.
         */
        None = "None",
      }
      /**
       * @deprecated (since 1.89.0)
       *
       * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of defined width, with or
       * without a vertical line in its middle.
       */
      enum Separation {
        /**
         * A large (63px) vertical gutter without a vertical line.
         */
        Large = "Large",
        /**
         * A large (63px) vertical gutter with a vertical line in its middle.
         */
        LargeWithLine = "LargeWithLine",
        /**
         * A medium (31px) vertical gutter without a vertical line.
         */
        Medium = "Medium",
        /**
         * A medium (31px) vertical gutter with a vertical line in its middle.
         */
        MediumWithLine = "MediumWithLine",
        /**
         * No gutter at all (0px), and without a vertical line, of course.
         */
        None = "None",
        /**
         * A small (17px) vertical gutter without a vertical line.
         */
        Small = "Small",
        /**
         * A small (17px) vertical gutter with a vertical line in its middle.
         */
        SmallWithLine = "SmallWithLine",
      }
      /**
       * @deprecated (since 1.89.0)
       *
       * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
       */
      enum VAlign {
        /**
         * Aligned at the bottom.
         */
        Bottom = "Bottom",
        /**
         * Vertically centered.
         */
        Middle = "Middle",
        /**
         * Aligned at the top.
         */
        Top = "Top",
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/zen/commons/AlertLevel": undefined;

    "sap/zen/commons/Cell": undefined;

    "sap/zen/commons/CellType": undefined;

    "sap/zen/commons/Format": undefined;

    "sap/zen/commons/Grid": undefined;

    "sap/zen/commons/HAlign": undefined;

    "sap/zen/commons/layout/AbsoluteLayout": undefined;

    "sap/zen/commons/layout/MatrixLayout": undefined;

    "sap/zen/commons/layout/MatrixLayoutCell": undefined;

    "sap/zen/commons/layout/MatrixLayoutRow": undefined;

    "sap/zen/commons/layout/PositionContainer": undefined;

    "sap/zen/commons/library": undefined;

    "sap/zen/commons/Padding": undefined;

    "sap/zen/commons/SemanticStyle": undefined;

    "sap/zen/commons/Separation": undefined;

    "sap/zen/commons/VAlign": undefined;
  }
}
