// For Library Version: 1.92.0

declare namespace sap {
  namespace ui {
    /**
     * SAP UI library: sap.ui.vbm
     */
    namespace vbm {
      interface $AdapterSettings extends sap.ui.core.$ElementSettings {
        /**
         * The GeoMap control associated with the Adapter. The adapter would invoke methods and subscribe to events
         * on this GeoMap instance
         */
        map?: sap.ui.vbm.GeoMap | string;

        /**
         * The event is raised when a when the Adapter receives an event from GeoMap control. It is intended to
         * unify the various GeoMap events as provided by VBI.
         */
        submit?: Function;
      }

      interface $Adapter3DSettings extends sap.ui.core.$ElementSettings {
        /**
         * The {@link sap.ui.vbm.Viewport Viewport} control associated with the Adapter3D. The Adapter3D would invoke
         * methods and subscribe to events on this {@link sap.ui.vbm.Viewport Viewport} instance.
         */
        viewport?: sap.ui.vbm.Viewport | string;

        /**
         * This event is fired when interactions in the viewport happen.
         */
        submit?: Function;
      }

      interface $AnalyticMapSettings extends sap.ui.vbm.$GeoMapSettings {
        /**
         * Regions that are different from the defaults. It is possible to specify the tooltip and color for regions.
         * The region code must match the GeoJSON id2 identifier.
         */
        regions?:
          | sap.ui.vbm.Region[]
          | sap.ui.vbm.Region
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * The event is raised when there is a click or a tap on a region.
         */
        regionClick?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a region.
         */
        regionContextMenu?: Function;

        /**
         * Raised when regions get selected
         */
        regionSelect?: Function;

        /**
         * Event is raised when regions get deselected
         */
        regionDeselect?: Function;
      }

      interface $AreaSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position array for the Area. For single part areas the format is "lon0;lat0;0.0;...;lonN,latN,0.0".
         * For multi part areas you need to provide an array of arrays of the above position string: "[['lon0...'],['lon0...']]"
         * (sequence of single and double quotes is important). **Single and Multi part areas must not be mixed
         * within one Areas aggregation.**
         *  Finally each area part can have multiple exclusions/holes. In that case the position list of excluded
         * areas has follow the list of the base shape: "['lon0...', 'exLon0...']".
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The fill color of the Area.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the Area.
         */
        colorBorder?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the dashing style of the area border using an array.
         */
        borderDash?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * This event is raised when the edge of an Area is clicked.
         */
        edgeClick?: Function;

        /**
         * This event is raised when the edge of an Area is right clicked.
         */
        edgeContextMenu?: Function;
      }

      interface $AreasSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Area object aggregation
         */
        items?:
          | sap.ui.vbm.Area[]
          | sap.ui.vbm.Area
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * This event is raised when the edge of an Area is clicked.
         */
        edgeClick?: Function;

        /**
         * This event is raised when the edge of an Area is right clicked.
         */
        edgeContextMenu?: Function;
      }

      interface $BoxSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position of the Box. The format is "lon;lat;0".
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The scale of the box. The format is "x-Scale;y-Scale;z-Scale" whereas z-Scale is currently ignored.
         */
        scale?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color of the box.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the box.
         */
        colorBorder?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $BoxesSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        scaleChangeable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Box object aggregation
         */
        items?:
          | sap.ui.vbm.Box[]
          | sap.ui.vbm.Box
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $CircleSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position of the circle.
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The pixel radius of the circle.
         */
        radius?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color of the circle.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the circle.
         */
        colorBorder?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Number of circle slices. The property is required only when the PlugIn is used.
         */
        slices?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $CirclesSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if radius may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        radiusChangeable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * circle object aggregation
         */
        items?:
          | sap.ui.vbm.Circle[]
          | sap.ui.vbm.Circle
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $ClusterSettings extends sap.ui.core.$ControlSettings {
        /**
         * Set the color of the control. If a type is set then the semantic color of the type is taken instead.
         */
        color?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set the icon of the control. If a type is set then the semantic icon of the type can be overwritten with
         * this property. If no icon and no type is set then the icon for the semantic type 'inactive' is taken.
         */
        icon?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set the text of the control.
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * semantic type for cluster. The type specifies the icon and the color of the cluster control.
         */
        type?:
          | sap.ui.vbm.SemanticType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ClusterBaseSettings extends sap.ui.core.$ElementSettings {
        /**
         * Flag controlling the visibility of the area convered by a cluster object.
         */
        areaAlwaysVisible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Fill color for the area covered by a cluster object
         */
        areaColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Border color for the area covered by a cluster object
         */
        areaColorBorder?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Name of property of the visualization control receiving the number of clustered objects. This setting
         * applys only if aggregation vizTemplate is used.
         */
        textProperty?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Settings for the text placed on the given Spot telling the number of clustered objects. This setting
         * applys only if aggregation vizVo is used. If omitted the number of clustered object will **not** be shown!
         */
        textSettings?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Clustering rule, describing which visual objects should be considered for clustering
         */
        rule?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Optional: Instance of a control, which is used as template for visualizing cluster objects. This is the
         * prefered choise.
         */
        vizTemplate?: sap.ui.core.Control;

        /**
         * Optional: Instance of a spot, which is used as template for visualizing cluster objects
         */
        vizVo?: sap.ui.vbm.Spot;

        /**
         * Hidden aggregation for cluster visualization controls
         */
        clusterVos?:
          | sap.ui.core.Control[]
          | sap.ui.core.Control
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Hidden aggregation for host container VOs
         */
        clusterContainers?:
          | sap.ui.vbm.ClusterContainer[]
          | sap.ui.vbm.ClusterContainer
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * The event is raised when there is a click action on a Cluster Object.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a Cluster.
         */
        contextMenu?: Function;
      }

      interface $ClusterContainerSettings
        extends sap.ui.vbm.$ContainerSettings {}

      interface $ClusterDistanceSettings
        extends sap.ui.vbm.$ClusterBaseSettings {
        /**
         * Distance in pixels between cluster objects. This distance is used as parameter during the clustering.
         * The visualization objects are placed in center of gravity of the covered objects. Thus the actual distance
         * between them may vary.
         */
        distance?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ClusterGridSettings extends sap.ui.vbm.$ClusterBaseSettings {
        /**
         * Size of grid cells in pixels. Format is "distanceX;distanceY"
         */
        gridSize?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Minimal number of objects covered by grid cell fullfilling the cluster rule until clustering is applied.
         */
        limit?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Minimal total number of objects covered by grid cell until clustering is applied.
         */
        limitTotal?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Ordering index of given cluster in the sequence of all grid based clusters
         */
        orderIndex?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Offset for the visualization object from the center of the grid cell. This can be used to show multiple
         * visualization objects in on grid cell without overlapping. Format is "offsetX;offsetY"
         */
        offset?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Space between grid cells if cell area is shown
         */
        cellSpacing?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ClusterTreeSettings extends sap.ui.vbm.$ClusterBaseSettings {
        /**
         * Indicates whether the split of a cluster object into sub clusterers or visual objects should be animated
         */
        animateClusterSplit?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ContainerSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position for the Container. The format is "lon;lat;0".
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Alignment of the container to its position:
         * 	0: center 1: top center 2: top right 3: center right 4: bottom right 5: bottom center
         * 6: bottom left 7: center left 8: top left
         */
        alignment?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The control that should be placed in the container.
         */
        item?: sap.ui.core.Control;
      }

      interface $ContainersSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Container object aggregation
         */
        items?:
          | sap.ui.vbm.Container[]
          | sap.ui.vbm.Container
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $DragSourceSettings extends sap.ui.core.$ElementSettings {
        /**
         * Drag type
         */
        type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $DropTargetSettings extends sap.ui.core.$ElementSettings {
        /**
         * Drop type
         */
        type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $FeatureSettings extends sap.ui.core.$ElementSettings {
        /**
         * The color, this should be provided in the rgba(r,g,b,a) format.
         */
        color?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The Feature ID. Used to match with the feature in the GeoJSON given to the parent (FeatureCollection).
         */
        featureId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The event is raised when there is a click action on a Feature.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a Feature.
         */
        contextMenu?: Function;
      }

      interface $FeatureCollectionSettings
        extends sap.ui.vbm.$GeoJsonLayerSettings {
        /**
         * Feature object aggregation
         */
        items?:
          | sap.ui.vbm.Feature[]
          | sap.ui.vbm.Feature
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * The event is raised when there is a click action on an aggregated Feature. Clicks on other Features from
         * the GeoJSON are ignored.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on an aggregated Feature. Clicks
         * on other Features from the GeoJSON are ignored.
         */
        contextMenu?: Function;
      }

      interface $GeoCircleSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position of the geocircle. The format is "lon;lat;0".
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the geocirle.
         */
        colorBorder?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The radius in meters of the geocirle.
         */
        radius?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color of the geocirle.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The number of slices of the geocircle.
         */
        slices?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $GeoCirclesSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if radius may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        radiusChangeable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * GeoCircle element aggregation
         */
        items?:
          | sap.ui.vbm.GeoCircle[]
          | sap.ui.vbm.GeoCircle
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $GeoJsonLayerSettings extends sap.ui.core.$ElementSettings {
        /**
         * Source URL for GeoJSON
         */
        srcURL?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * GeoJSON object according to the {@link http://geojson.org/geojson-spec.html#geojson-objects|specification}
         * or array of such objects
         */
        data?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Default line width for LineStrings
         */
        defaultLineWidth?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Default Fill color for GeoJSON features (Polygons and LineStrings)
         */
        defaultFillColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Default border color for GeoJSON features, if applicable (Polygons and LineStrings)
         */
        defaultBorderColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Feature object aggregation
         */
        items?:
          | sap.ui.vbm.Feature[]
          | sap.ui.vbm.Feature
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * The event is raised when there is a click action on an aggregated Feature. Clicks on other Features from
         * the GeoJSON are ignored.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on an aggregated Feature. Clicks
         * on other Features from the GeoJSON are ignored.
         */
        contextMenu?: Function;
      }

      interface $GeoMapSettings extends sap.ui.vbm.$VBISettings {
        /**
         * This is the map configuration for the geo map. The map configuration defines the used maps, the layering
         * of the maps and the servers that can be used to request the map tiles.
         */
        mapConfiguration?:
          | object
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Toggles the visibility of the legend
         */
        legendVisible?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the visibility of the scale. Only supported on initialization!
         */
        scaleVisible?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the visibility of the navigation control. Only supported on initialization!
         */
        navcontrolVisible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Initial position of the Map. Set is only supported on initialization! Format is "<longitude>;<latitude>;0".
         */
        initialPosition?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Initial zoom. Value needs to be positive whole number. Set is only supported on initialization!
         */
        initialZoom?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Center position of the Map. Format is "<longitude>;<latitude>".
         */
        centerPosition?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Zoomlevel for the Map. Value needs to be positive whole number.
         */
        zoomlevel?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Name of the map layer stack (provided in mapConfiguration) which is used for map rendering. If not set
         * the layer stack with the name 'Default' is chosen. Property can be changed at runtime to switch between
         * map layer stack.
         */
        refMapLayerStack?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Visual Frame object. Defining a frame {minX, maxX, minY, maxY, maxLOD, minLOD} to which the scene display
         * is restricted.
         */
        visualFrame?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @deprecated - This property should not longer be used. Its functionality has been replaced by the `clusters`
         * aggregation.
         */
        clustering?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Disable Map Zooming. This setting works only upon initialization and cannot be changed later on.
         */
        disableZoom?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Disable Map Paning. This setting works only upon initialization and cannot be changed later on.
         */
        disablePan?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Enable Animation of Map Zoom. Works in combination of setZoomlevel.
         */
        enableAnimation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Aggregation of visual object types. A VO aggregation can be considered to be a table of VOs of a common
         * type.
         */
        vos?:
          | sap.ui.vbm.VoAbstract[]
          | sap.ui.vbm.VoAbstract
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Aggregation of GeoJSON layers. Object from a GeoJSON layer will be behind all other Visual Objects from
         * the `vos` aggregation. In case of multiple GeoJSON layers the objects are orderer with the layers they
         * belong to.
         */
        geoJsonLayers?:
          | sap.ui.vbm.GeoJsonLayer[]
          | sap.ui.vbm.GeoJsonLayer
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         */
        featureCollections?:
          | sap.ui.vbm.FeatureCollection[]
          | sap.ui.vbm.FeatureCollection
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Aggregation of resources. The images for e.g. Spots have to be provided as resources.
         */
        resources?:
          | sap.ui.vbm.Resource[]
          | sap.ui.vbm.Resource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Legend for the Map
         */
        legend?: sap.ui.vbm.Legend;

        /**
         * Aggregation of clusters.
         */
        clusters?:
          | sap.ui.vbm.ClusterBase[]
          | sap.ui.vbm.ClusterBase
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Raised when the map is clicked.
         */
        click?: Function;

        /**
         * Raised when the map is right clicked/longPressed(tap and hold).
         */
        contextMenu?: Function;

        /**
         * Raised when something is dropped on the map.
         */
        drop?: Function;

        /**
         * This event is raised when a multi selection of visual objects has occurred
         */
        select?: Function;

        /**
         * this event is raised on zoom in or zoom out.
         */
        zoomChanged?: Function;

        /**
         * this event is raised on map move.
         */
        centerChanged?: Function;

        /**
         * this event is raised on map key down
         */
        keyDown?: Function;

        /**
         * this event is raised on map key press
         */
        keyPress?: Function;

        /**
         * this event is raised on map key up
         */
        keyUp?: Function;
      }

      interface $HeatmapSettings extends sap.ui.vbm.$VoAbstractSettings {
        /**
         * Gradient Definition. Can be either provided as Ressource - then it is type string.
         *  Or as Array [n0,c0,n1,c1,...,nk,ck] (ni > ni-1; ci respective colors) with an arbitrary number of color
         * stops as in the following
         *  Example: [0,'rgba(0,255,0,1)',220,'rgba(255,255,0,1)',255,'rgba(255,0,0,1)']
         */
        gradient?: any[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Opacity of the heatmap.
         */
        opacity?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Behavior of the HeatPoint, 0 Density Map, 2: Heat Map, 1: Intermediate.
         */
        behavior?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Scaling factor for the sample values.
         */
        valueScale?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Scaling factor for the sample radiuses.
         */
        radiusScale?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Exponent for the alphaChannel
         *  aE = 1 : alpha Channel remains linear
         *  0 < aE < 1 : (e.g. aE=0.5 "square root") sub linear alpha channeling (lower value colors remain longer
         * visible; range appears wider)
         *  aE > 1 (e.g. aE=2: "squared") above linear alpha channeling ( lower value colors remain shortly visible;
         * range appears chopped)
         */
        alphaExponent?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Exponent for the color
         *  aE = 1 : Linear Gradient
         *  0 < aE < 1 : Sublinear Gradient; i.E. with cE=0.5 point values are square rooted before usage [share
         * of lower value cols will decrease]
         *  aE > 1 : Higher Level Gradient; i.E. with cE=2 point values are squared before usage [share of lower
         * value cols will increase]
         */
        colorExponent?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * HeatPoint object aggregation
         */
        items?:
          | sap.ui.vbm.HeatPoint[]
          | sap.ui.vbm.HeatPoint
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $HeatPointSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position of a sample element of the heatmap. Should be bound. The format is "lon;lat;0"
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Heat Value of the sample element of the heatmap. May be bound.
         */
        value?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Radius of the sample values. May be bound
         */
        radius?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $LegendSettings extends sap.ui.core.$ElementSettings {
        /**
         * The caption of the legend.
         */
        caption?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * LegendItem object aggregation
         */
        items?:
          | sap.ui.vbm.LegendItem[]
          | sap.ui.vbm.LegendItem
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * The event is raised when there is a click action on a legend.
         */
        click?: Function;
      }

      interface $LegendItemSettings extends sap.ui.core.$ElementSettings {
        /**
         * The color of the legend marker.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The image for the legend marker.
         */
        image?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The semantic spot type for the legend marker.
         */
        semanticSpotType?:
          | sap.ui.vbm.SemanticType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The text of the legend item.
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The event is raised when there is a click action on a legend item.
         */
        click?: Function;
      }

      interface $PieSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position of the Pie.
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The scaling of the Pie. The scale must be a vector "x-Scale;y-Scale;z-Scale", but currently only the
         * x scaling is applied to the Pie.
         */
        scale?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * PieItem object aggregation. A PieItem holds the data for one slice in a Pie.
         */
        items?:
          | sap.ui.vbm.PieItem[]
          | sap.ui.vbm.PieItem
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $PieItemSettings extends sap.ui.core.$ElementSettings {
        /**
         * The name of the Pie item.
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The value of the Pie item.
         */
        value?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color of the Pie Item.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @deprecated - This event should no longer be used. Click event from Pie and Pies now includes Pie Item
         * index when event occurs.
         */
        click?: Function;
      }

      interface $PiesSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        scaleChangeable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Pie object aggregation
         */
        items?:
          | sap.ui.vbm.Pie[]
          | sap.ui.vbm.Pie
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $RegionSettings extends sap.ui.core.$ElementSettings {
        /**
         * The color, this must be provided in the rgba(r,g,b,a) format.
         */
        color?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The region code.
         */
        code?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * set to true if the element is selected
         */
        select?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        labelText?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Type for semantic labels. A given semantic type will overrule color settings and add an icon.
         */
        labelType?:
          | sap.ui.vbm.SemanticType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        labelBgColor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        labelBorderColor?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual objects label arrow. For left/right/top/bottom aligned labels an additional arrow points to
         * the label's object.
         */
        labelArrow?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The event is raised when there is a click action on a region.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a region.
         */
        contextMenu?: Function;
      }

      interface $ResourceSettings extends sap.ui.core.$ElementSettings {
        /**
         * Value of the resource. Base64 endode binary.
         */
        value?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * URL to an image. It is important that the image data is readable fom the visual business control. Therefore
         * e.g. images coming from a local drive or cross domains are not allowed. The preferred way is to use the
         * Base64 encoded data provided using the value property.
         */
        src?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Name of the resource. The name should be always used when a resource is referenced.
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RouteSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position array of the route. The format is "lon0;lat0;0;...lonN;latN;0".
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color of the route.
         */
        color?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The start point type of the route.
         * 	0: no startpoint 1: arrow head as startpoint
         */
        start?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The end point type of the route.
         * 	0: no endpoint 1: arrow as endpoint
         */
        end?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The width of the route line. With width 0 no line is drawn.
         */
        linewidth?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color for the line dots of a route.
         */
        dotcolor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the line dots of a route.
         */
        dotbordercolor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the route.
         */
        colorBorder?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the dashing style of the route using an array. The first value gives the length of the stroke
         * and the second the length of the gap. Thus "1;1", would result in a doted line. However, strokes are
         * painted with rounded endings. Thus the actual stroke length depends also on the line width. As a sample
         * a stroke of 1 pixel length and a line width of 6 will result in at least 6 pixels total length. In that
         * case the line dashing should be set to "1;6" for an equal length of stroke and gap!
         *  The line dashing array can be extended to achive more complex pattern, e.g. "1;1;5;2" and so on.
         */
        lineDash?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The diameter of a dot in a route.
         */
        dotwidth?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @EXPERIMENTAL (since 1.32.0)
         *
         * Defines the type of the route, default is 'Straight'. Other types are 'Geodesic' which show the shortest
         * path between two points, e.g. flightroutes
         */
        routetype?:
          | sap.ui.vbm.RouteType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if intermediate triangles along the route should show the direction only applicable if arrow
         * head is defined ( start and/or end ) it is not recommended to use line dots in addition because the direction
         * indicators generate additional line points at their head and base positions
         */
        directionIndicator?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * DragSource aggregation
         */
        dragSource?:
          | sap.ui.vbm.DragSource[]
          | sap.ui.vbm.DragSource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * DropTarget aggregation
         */
        dropTarget?:
          | sap.ui.vbm.DropTarget[]
          | sap.ui.vbm.DropTarget
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $RoutesSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Route object aggregation
         */
        items?:
          | sap.ui.vbm.Route[]
          | sap.ui.vbm.Route
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * DragSource aggregation
         */
        dragSource?:
          | sap.ui.vbm.DragSource[]
          | sap.ui.vbm.DragSource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * DropTarget aggregation
         */
        dropTarget?:
          | sap.ui.vbm.DropTarget[]
          | sap.ui.vbm.DropTarget
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * The event is raised when there is a click action on a Route.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a Route.
         */
        contextMenu?: Function;

        /**
         * The event is raised when something is dropped on a Route.
         */
        drop?: Function;
      }

      interface $SpotSettings extends sap.ui.vbm.$VoBaseSettings {
        /**
         * The position of the spot. The format is "lon;lat;0"
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The text that is displayed on the spot. The text should not exceed a few characters. Note that either
         * text or icon may be displayed ( not both together ).
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The image for the spot. This must be a reference to a resource.
         */
        image?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Alignment of the spot to its position:
         * 	0: center 1: top center 2: top right 3: center right 4: bottom right 5: bottom center
         * 6: bottom left 7: center left 8: top left
         */
        alignment?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The scale of the spot. The format is "x-Scale;y-Scale;z-Scale". The z-Scale is curretly ignored.
         */
        scale?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The image for the spot when selected. This must be a reference to a resource.
         */
        imageSelected?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The icon to be rendered on the spot. Note that either text or icon may be displayed ( not both together
         * ). Use the CharCode-Id of SAPUI5-Icons (e.g.: "\ue146")
         */
        icon?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The color of the content ( icon or text ).
         */
        contentColor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The offset from the center of the image where to place the content ( text or icon ) in x;y- direction
         */
        contentOffset?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The font of the spot's text. If icon is used then the font is automatically set to"SAP-icons".
         */
        contentFont?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The font size to be used for text or icon
         */
        contentSize?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Spot type for semantic spots. A given semantic type will overrule settings for image, scale, and content.
         */
        type?:
          | sap.ui.vbm.SemanticType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * DragSource aggregation
         */
        dragSource?:
          | sap.ui.vbm.DragSource[]
          | sap.ui.vbm.DragSource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * DropTarget aggregation
         */
        dropTarget?:
          | sap.ui.vbm.DropTarget[]
          | sap.ui.vbm.DropTarget
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $SpotsSettings extends sap.ui.vbm.$VoAggregationSettings {
        /**
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        posChangeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         */
        scaleChangeable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * spot object aggregation
         */
        items?:
          | sap.ui.vbm.Spot[]
          | sap.ui.vbm.Spot
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * DragSource aggregation
         */
        dragSource?:
          | sap.ui.vbm.DragSource[]
          | sap.ui.vbm.DragSource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * DropTarget aggregation
         */
        dropTarget?:
          | sap.ui.vbm.DropTarget[]
          | sap.ui.vbm.DropTarget
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $VBISettings extends sap.ui.core.$ControlSettings {
        /**
         * Set the width of the control.
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set the height of the control.
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @deprecated - This property should not longer be used. Its functionality is covered by method `load`.
         */
        config?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * When true, the ActiveX plugin version of Visual Business will be used for rendering. For that the plugin
         * needs to be installed on the client. Default (false) the control renders on canvas.
         */
        plugin?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines whether the rectangular selection mode is active or not
         */
        rectangularSelection?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines whether the lasso selection mode is active or not
         */
        lassoSelection?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines whether the rectangular zoom mode is active or not
         */
        rectZoom?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Allow repeating of keyboard events when key is pressed and hold.
         */
        allowKeyEventRepeat?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Miminum delay between keyboard events. Used to reduce frequency of keyboard events.
         */
        keyEventDelay?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Enable Test for Overlapped Objects for selection and context menu
         */
        enableOverlappingTest?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Text to be read out for the Control when used in accessibility mode (Screen reader)
         */
        ariaLabel?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
         */
        ariaDescribedBy?: Array<sap.ui.core.Control | string>;

        /**
         * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledBy).
         */
        ariaLabelledBy?: Array<sap.ui.core.Control | string>;

        /**
         * High level API. Submit event is raised.
         */
        submit?: Function;

        /**
         * High level API. ThumbnailClick event is raised.
         */
        thumbnailClick?: Function;

        /**
         * Low level API. Rendering of the canvas content is reqested. This event can be used to do custom rendering
         * into the Visual Business overlay canvas. This function is not supported in plugin mode.
         */
        render?: Function;

        /**
         * Low level API. Tracking mode is set or reset. This function is not supported in plugin mode.
         */
        changeTrackingMode?: Function;

        /**
         * Low level API. The canvas is zoomed. This function is not supported in plugin mode.
         */
        zoom?: Function;

        /**
         * Low level API. The canvas was moved. This function is not supported in plugin mode.
         */
        move?: Function;

        /**
         * The event is raised before a Visual Business window is opened. It is intended to be used to place arbitrary
         * content in e.g. a Detail Window. This event is not supported in plugin mode.
         */
        openWindow?: Function;

        /**
         * The event is raised before a Visual Business window is closed. This function is not supported in plugin
         * mode.
         */
        closeWindow?: Function;

        /**
         * The event is raised when a Visual Business container VO instance is created. It is intended to be used
         * to place arbitrary content in e.g. other controls. This event is not supported in plugin mode.
         */
        containerCreated?: Function;

        /**
         * The event is raised before a Visual Business container VO instance is destroyed. This function is not
         * supported in plugin mode.
         */
        containerDestroyed?: Function;
      }

      interface $ViewportSettings extends sap.ui.core.$ControlSettings {
        /**
         * Viewport width
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Viewport height
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Camera history length (read only)
         */
        cameraHistoryLength?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Camera history position
         */
        cameraHistoryPos?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * This event is fired when camera positioning changed (whole movement has been finished)
         */
        cameraChange?: Function;
      }

      interface $VoAbstractSettings extends sap.ui.core.$ElementSettings {}

      interface $VoAggregationSettings extends sap.ui.vbm.$VoAbstractSettings {
        /**
         * Selection cardinality: minimum selected elements ("0" or "1" )
         */
        minSel?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Selection cardinality: maximum selectable elements ( valid values are "0", "1", and "n" )
         */
        maxSel?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If you want to add custom data to VO instances and make the GeoMap control aware of it, e.g. for basing
         * clustering rules on it, you can provide an array of property names specifying the keys to consider.
         */
        customProperties?:
          | string[]
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * This event is raised when a Design handle is moved.
         */
        handleMoved?: Function;

        /**
         * This event is raised when a Design handle is right clicked.
         */
        handleContextMenu?: Function;

        /**
         * This event is raised when a Design handle is clicked.
         */
        handleClick?: Function;

        /**
         * This event is raised when aggregated elements get selected
         */
        select?: Function;

        /**
         * This event is raised when aggregated elements get deselected
         */
        deselect?: Function;

        /**
         * The event is raised when there is a click action on a VO.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a VO.
         */
        contextMenu?: Function;

        /**
         * The event is raised when something is dropped on a VO.
         */
        drop?: Function;
      }

      interface $VoBaseSettings extends sap.ui.core.$ElementSettings {
        /**
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs to have a unique and stable identifier.
         */
        key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Scaling factor applied when visual object is hovered. This is only supported on selected VOs, which do
         * not present a defined geo area.
         */
        hotScale?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color change applied when visual object is hovered. The format is RHLSA(<hue>;<lightness>;<saturation>;<opacity>).
         * The hue shift is given in degree (0 to 360). The other parameters are given as multipliers, where 1 means
         * the component remains unchanged.
         *  Beside the delta color approach it is also possible to specify an absolute color in the usual CSS color
         * formats (except named colors).
         */
        hotDeltaColor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color change applied when visual object is selected. This can be explicit or a relative one. See above.
         */
        selectColor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual object should keep its size when the map is zoomed. Default value is 'true'. Only meaningful
         * for some VOs.
         */
        fxsize?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual object is not rotated when the map is rotated. The property is only required when the PlugIn
         * is used and only meaningful for some VOs.
         */
        fxdir?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual object builds an entity/group with other VO elements when it is hovered. The property is not
         * supported when the PlugIn is used.
         */
        entity?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual objects label text. Providing a label text required, but also sufficient the get a label displayed.
         */
        labelText?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Type for semantic labels. A given semantic type will overrule color settings and add an icon.
         */
        labelType?:
          | sap.ui.vbm.SemanticType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual objects label background color. The default value is white.
         */
        labelBgColor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual objects label border color. The default is no border.
         */
        labelBorderColor?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual objects label arrow. For left/right/top/bottom aligned labels an additional arrow points to
         * the label's object.
         */
        labelArrow?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The visual objects label position. This property determines the positioning of the label relative to
         * the VO it belongs to. Possible values are:
         * 	 - 0: centered
         * 	 - 1: top
         * 	 - 2: top right
         * 	 - 3: right
         * 	 - 4: bottom right
         * 	 - 5: bottom
         * 	 - 6: bottom left
         * 	 - 7: left
         * 	 - 8: top left  The default alignment is VO specific.
         *  For multiple position based VOs, like Route, or Area the label is dynamically positioned. If the current
         * display of a VO consists of multiple disconnected parts, each part gets an own label.
         */
        labelPos?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if VO is changeable. Which properties are actually changeable can be controlled on the related
         * VO aggregation.
         */
        changeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Data to be dragged. This property allows you to provide an arbitrary data string, which is transfered
         * to the target in a drag'n drop operation
         */
        dragData?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if the element is selected
         */
        select?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The event is raised when there is a click action on a visual object.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on a visual object.
         */
        contextMenu?: Function;

        /**
         * This event is raised when the design handle is moved.
         */
        handleMoved?: Function;

        /**
         * This event is raised when the design handle is right clicked.
         */
        handleContextMenu?: Function;

        /**
         * This event is raised when the design handle is clicked.
         */
        handleClick?: Function;

        /**
         * The event is raised when something is dropped on the object.
         */
        drop?: Function;
      }

      /**
       * @EXPERIMENTAL (since 1.48.0)
       *
       * Provides the ability to load VBI JSON into {@link sap.ui.vbm.GeoMap sap.ui.vbm.GeoMap} control.
       */
      class Adapter extends sap.ui.core.Element {
        /**
         * Constructor for a new GeoMap Adapter.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new object
           */
          mSettings?: sap.ui.vbm.$AdapterSettings
        );
        /**
         * Constructor for a new GeoMap Adapter.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new object
           */
          mSettings?: sap.ui.vbm.$AdapterSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.ui.vbm.Adapter`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Adapter` itself.
         *
         * The event is raised when a when the Adapter receives an event from GeoMap control. It is intended to
         * unify the various GeoMap events as provided by VBI.
         */
        attachSubmit(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Adapter` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.ui.vbm.Adapter`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Adapter` itself.
         *
         * The event is raised when a when the Adapter receives an event from GeoMap control. It is intended to
         * unify the various GeoMap events as provided by VBI.
         */
        attachSubmit(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Adapter` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:submit submit} event of this `sap.ui.vbm.Adapter`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSubmit(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Adapter with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Adapter>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:submit submit} to attached listeners.
         */
        fireSubmit(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            data?: string;
          }
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getMap map}, or `null`.
         */
        getMap(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.ui.vbm.Adapter.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Parses and process sections of the VBI JSON and loads them into JSON Model bound to the GeoMap
         */
        load(
          /**
           * VBI JSON to be loaded into the GeoMap control.
           */
          data: string | object
        ): Promise<any>;
        /**
         * Sets the associated {@link #getMap map}.
         */
        setMap(
          /**
           * ID of an element which becomes the new target of this map association; alternatively, an element instance
           * may be given
           */
          oMap: sap.ui.core.ID | sap.ui.vbm.GeoMap
        ): this;
      }
      /**
       * Provides the ability to load VBI JSON into {@link sap.ui.vbm.Viewport sap.ui.vbm.Viewport} control.
       */
      class Adapter3D extends sap.ui.core.Element {
        /**
         * Constructor for a new Visual Business Adapter 3D.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new object
           */
          mSettings?: sap.ui.vbm.$Adapter3DSettings
        );
        /**
         * Constructor for a new Visual Business Adapter 3D.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new object
           */
          mSettings?: sap.ui.vbm.$Adapter3DSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.ui.vbm.Adapter3D`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Adapter3D` itself.
         *
         * This event is fired when interactions in the viewport happen.
         */
        attachSubmit(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Adapter3D` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.ui.vbm.Adapter3D`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Adapter3D` itself.
         *
         * This event is fired when interactions in the viewport happen.
         */
        attachSubmit(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Adapter3D` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:submit submit} event of this `sap.ui.vbm.Adapter3D`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSubmit(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Adapter3D with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Adapter3D>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:submit submit} to attached listeners.
         */
        fireSubmit(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * A string in the VBI JSON format.
             */
            data?: string;
          }
        ): this;
        /**
         * Returns a metadata object for class sap.ui.vbm.Adapter3D.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * ID of the element which is the current target of the association {@link #getViewport viewport}, or `null`.
         */
        getViewport(): sap.ui.core.ID;
        /**
         * Processes the various sections from the VBI JSON.
         *
         * The Resources, DataTypes, Scenes and Data sections from the VBI JSON are sequentially processed.
         */
        load(
          /**
           * The VBI JSON.
           */
          data: object | string
        ): Promise<any>;
        /**
         * Sets the associated {@link #getViewport viewport}.
         */
        setViewport(
          /**
           * ID of an element which becomes the new target of this viewport association; alternatively, an element
           * instance may be given
           */
          oViewport: sap.ui.core.ID | sap.ui.vbm.Viewport
        ): this;
      }
      /**
       * The AnalyticMap control. This control renders a Map based on a GeoJSON source. The GeoJSON file is searched
       * in the following places in the given sequence:
       * 	 <server>:<port>/sap/bc/vbi/geojson/L0.json  ./media/analyticmap/L0.json  Further
       * it is possible to specify a different URL by setting static attribute sap.ui.vbm.AnalyticMap.GeoJSONURL.
       *  The Features from the GeoJSON get rendered as neutral background in gray. They are not active, but may
       * report a name via tooltip. Each feature is expected to have a property id or id2, where as id2 should
       * be an ISO country according to ISO 3166-2.
       *  By adding Region elements to the regions aggregation it is possible to make feature from the GeoJSON
       * interactive. Region elements need to match by ISO code.
       */
      class AnalyticMap extends sap.ui.vbm.GeoMap {
        /**
         * Constructor for a new AnalyticMap.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$AnalyticMapSettings
        );
        /**
         * Constructor for a new AnalyticMap.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$AnalyticMapSettings
        );

        /**
         * Adds some region to the aggregation {@link #getRegions regions}.
         */
        addRegion(
          /**
           * The region to add; if empty, nothing is inserted
           */
          oRegion: sap.ui.vbm.Region
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionClick regionClick} event of this `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * The event is raised when there is a click or a tap on a region.
         */
        attachRegionClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionClick regionClick} event of this `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * The event is raised when there is a click or a tap on a region.
         */
        attachRegionClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionContextMenu regionContextMenu} event of
         * this `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a region.
         */
        attachRegionContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionContextMenu regionContextMenu} event of
         * this `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a region.
         */
        attachRegionContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionDeselect regionDeselect} event of this
         * `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * Event is raised when regions get deselected
         */
        attachRegionDeselect(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionDeselect regionDeselect} event of this
         * `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * Event is raised when regions get deselected
         */
        attachRegionDeselect(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionSelect regionSelect} event of this `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * Raised when regions get selected
         */
        attachRegionSelect(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:regionSelect regionSelect} event of this `sap.ui.vbm.AnalyticMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.AnalyticMap` itself.
         *
         * Raised when regions get selected
         */
        attachRegionSelect(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.AnalyticMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the regions in the aggregation {@link #getRegions regions}.
         */
        destroyRegions(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:regionClick regionClick} event of this `sap.ui.vbm.AnalyticMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRegionClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:regionContextMenu regionContextMenu} event
         * of this `sap.ui.vbm.AnalyticMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRegionContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:regionDeselect regionDeselect} event of this
         * `sap.ui.vbm.AnalyticMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRegionDeselect(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:regionSelect regionSelect} event of this `sap.ui.vbm.AnalyticMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRegionSelect(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.AnalyticMap with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.GeoMap.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.AnalyticMap>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:regionClick regionClick} to attached listeners.
         */
        fireRegionClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The regions code.
             */
            code?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:regionContextMenu regionContextMenu} to attached listeners.
         */
        fireRegionContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The regions code.
             */
            code?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:regionDeselect regionDeselect} to attached listeners.
         */
        fireRegionDeselect(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:regionSelect regionSelect} to attached listeners.
         */
        fireRegionSelect(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Returns a metadata object for class sap.ui.vbm.AnalyticMap.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets content of aggregation {@link #getRegions regions}.
         *
         * Regions that are different from the defaults. It is possible to specify the tooltip and color for regions.
         * The region code must match the GeoJSON id2 identifier.
         */
        getRegions(): sap.ui.vbm.Region[];
        /**
         * Returns Infos for Regions like name, bounding box and midpoint
         */
        getRegionsInfo(
          /**
           * Array of region codes. The region code must match the geo json tag.
           */
          aCodes: string[]
        ): any[];
        /**
         * Checks for the provided `sap.ui.vbm.Region` in the aggregation {@link #getRegions regions}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfRegion(
          /**
           * The region whose index is looked for
           */
          oRegion: sap.ui.vbm.Region
        ): int;
        /**
         * Inserts a region into the aggregation {@link #getRegions regions}.
         */
        insertRegion(
          /**
           * The region to insert; if empty, nothing is inserted
           */
          oRegion: sap.ui.vbm.Region,
          /**
           * The `0`-based index the region should be inserted at; for a negative value of `iIndex`, the region is
           * inserted at position 0; for a value greater than the current size of the aggregation, the region is inserted
           * at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getRegions regions}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllRegions(): sap.ui.vbm.Region[];
        /**
         * Removes a region from the aggregation {@link #getRegions regions}.
         */
        removeRegion(
          /**
           * The region to remove or its index or id
           */
          vRegion: int | string | sap.ui.vbm.Region
        ): sap.ui.vbm.Region;
        /**
         * Zoom to one ore more regions.
         */
        zoomToRegions(
          /**
           * Array of region codes. The region codes must match the geo json tags.
           */
          aCodes: string[],
          /**
           * Correction for the calculated zoom factor. You can either a factor, the calculated zoom is multplied
           * with or a array with pixels to be added as border in the sequence [left, top,right, bottom].
           */
          oCorr: object
        ): void;
      }
      /**
       * Specific Visual Object element for an Area. An Area is a filled polygon, which border is given
       * as a list of geo-coordinates. Areas can have multiple disjunct parts as well as each part can have an
       * arbitrary number of exclusions/holes.
       *  The inner part and the edges of areas are interactive and fire events on click.
       *  Since the actual size of an area depends on the zoom level it might be only partly visible. Thus detail
       * windows will open at the click position.
       */
      class Area extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Area.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$AreaSettings
        );
        /**
         * Constructor for a new Area.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$AreaSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vbm.Area`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Area` itself.
         *
         * This event is raised when the edge of an Area is clicked.
         */
        attachEdgeClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Area` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vbm.Area`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Area` itself.
         *
         * This event is raised when the edge of an Area is clicked.
         */
        attachEdgeClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Area` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vbm.Area`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Area` itself.
         *
         * This event is raised when the edge of an Area is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Area` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vbm.Area`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Area` itself.
         *
         * This event is raised when the edge of an Area is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Area` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeClick edgeClick} event of this `sap.ui.vbm.Area`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeContextMenu edgeContextMenu} event of
         * this `sap.ui.vbm.Area`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Area with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Area>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:edgeClick edgeClick} to attached listeners.
         */
        fireEdgeClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:edgeContextMenu edgeContextMenu} to attached listeners.
         */
        fireEdgeContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Gets current value of property {@link #getBorderDash borderDash}.
         *
         * Defines the dashing style of the area border using an array.
         */
        getBorderDash(): string;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The fill color of the Area.
         */
        getColor(): string;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the Area.
         */
        getColorBorder(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Area.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position array for the Area. For single part areas the format is "lon0;lat0;0.0;...;lonN,latN,0.0".
         * For multi part areas you need to provide an array of arrays of the above position string: "[['lon0...'],['lon0...']]"
         * (sequence of single and double quotes is important). **Single and Multi part areas must not be mixed
         * within one Areas aggregation.**
         *  Finally each area part can have multiple exclusions/holes. In that case the position list of excluded
         * areas has follow the list of the base shape: "['lon0...', 'exLon0...']".
         */
        getPosition(): string;
        /**
         * Sets a new value for property {@link #getBorderDash borderDash}.
         *
         * Defines the dashing style of the area border using an array.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setBorderDash(
          /**
           * New value for property `borderDash`
           */
          sBorderDash: string
        ): this;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The fill color of the Area.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the Area.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position array for the Area. For single part areas the format is "lon0;lat0;0.0;...;lonN,latN,0.0".
         * For multi part areas you need to provide an array of arrays of the above position string: "[['lon0...'],['lon0...']]"
         * (sequence of single and double quotes is important). **Single and Multi part areas must not be mixed
         * within one Areas aggregation.**
         *  Finally each area part can have multiple exclusions/holes. In that case the position list of excluded
         * areas has follow the list of the base shape: "['lon0...', 'exLon0...']".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Area instances.
       */
      class Areas extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Areas.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$AreasSettings
        );
        /**
         * Constructor for a new Areas.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$AreasSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Area
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vbm.Areas`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Areas` itself.
         *
         * This event is raised when the edge of an Area is clicked.
         */
        attachEdgeClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Areas` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vbm.Areas`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Areas` itself.
         *
         * This event is raised when the edge of an Area is clicked.
         */
        attachEdgeClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Areas` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vbm.Areas`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Areas` itself.
         *
         * This event is raised when the edge of an Area is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Areas` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vbm.Areas`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Areas` itself.
         *
         * This event is raised when the edge of an Area is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Areas` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeClick edgeClick} event of this `sap.ui.vbm.Areas`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeContextMenu edgeContextMenu} event of
         * this `sap.ui.vbm.Areas`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Areas with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Areas>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:edgeClick edgeClick} to attached listeners.
         */
        fireEdgeClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.Area;
            /**
             * The number of the edge where the click occured. Edges are numbered zero based: e.g. edge from point 1
             * to point 2 has number 0
             */
            edge?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:edgeContextMenu edgeContextMenu} to attached listeners.
         */
        fireEdgeContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.Area;
            /**
             * The number of the edge where the click occured. Edges are numbered zero based: e.g. edge from point 1
             * to point 2 has number 0
             */
            edge?: int;
          }
        ): this;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Area object aggregation
         */
        getItems(): sap.ui.vbm.Area[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Areas.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.Area` in the aggregation {@link #getItems items}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Area
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Area,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Area[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Area
        ): sap.ui.vbm.Area;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
      }
      /**
       * Specific Visual Object element for a Box. A Box is a rectangle, which is positioned with its centerpoint
       * at the given position. The ratio between width and height can be controlled with property scale.
       * Depending on the property fxsize a box has an absolute or relative size.
       *  Since the actual size of a box may depend on the zoom level it might be only partly visible. Thus detail
       * windows will open at the click position.
       */
      class Box extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Box.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$BoxSettings
        );
        /**
         * Constructor for a new Box.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$BoxSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.Box with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Box>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color of the box.
         *
         * Default value is `'RGB(255;0;0)'`.
         */
        getColor(): string;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the box.
         *
         * Default value is `'RGB(255;0;0)'`.
         */
        getColorBorder(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Box.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position of the Box. The format is "lon;lat;0".
         *
         * Default value is `'0;0;0'`.
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getScale scale}.
         *
         * The scale of the box. The format is "x-Scale;y-Scale;z-Scale" whereas z-Scale is currently ignored.
         *
         * Default value is `'1;1;1'`.
         */
        getScale(): string;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color of the box.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(255;0;0)'`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the box.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(255;0;0)'`.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder?: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position of the Box. The format is "lon;lat;0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0;0;0'`.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getScale scale}.
         *
         * The scale of the box. The format is "x-Scale;y-Scale;z-Scale" whereas z-Scale is currently ignored.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1;1;1'`.
         */
        setScale(
          /**
           * New value for property `scale`
           */
          sScale?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Box instances.
       */
      class Boxes extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Boxes.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$BoxesSettings
        );
        /**
         * Constructor for a new Boxes.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$BoxesSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Box
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Boxes with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Boxes>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Box object aggregation
         */
        getItems(): sap.ui.vbm.Box[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Boxes.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Gets current value of property {@link #getScaleChangeable scaleChangeable}.
         *
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getScaleChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.Box` in the aggregation {@link #getItems items}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Box
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Box,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Box[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Box
        ): sap.ui.vbm.Box;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getScaleChangeable scaleChangeable}.
         *
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setScaleChangeable(
          /**
           * New value for property `scaleChangeable`
           */
          bScaleChangeable?: boolean
        ): this;
      }
      /**
       * Specific Visual Object element for an Circle. A Circle is positioned with its centerpoint at the
       * given position. The detail window will open at the center of the circle.
       */
      class Circle extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Circle.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$CircleSettings
        );
        /**
         * Constructor for a new Circle.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$CircleSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.Circle with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Circle>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color of the circle.
         *
         * Default value is `'RGBA(0,0,128,128)'`.
         */
        getColor(): string;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the circle.
         *
         * Default value is `'RGB(0,0,0)'`.
         */
        getColorBorder(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Circle.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position of the circle.
         *
         * Default value is `'0;0;0'`.
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getRadius radius}.
         *
         * The pixel radius of the circle.
         *
         * Default value is `'20'`.
         */
        getRadius(): string;
        /**
         * Gets current value of property {@link #getSlices slices}.
         *
         * Number of circle slices. The property is required only when the PlugIn is used.
         */
        getSlices(): string;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color of the circle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGBA(0,0,128,128)'`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the circle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(0,0,0)'`.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder?: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position of the circle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0;0;0'`.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getRadius radius}.
         *
         * The pixel radius of the circle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'20'`.
         */
        setRadius(
          /**
           * New value for property `radius`
           */
          sRadius?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSlices slices}.
         *
         * Number of circle slices. The property is required only when the PlugIn is used.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSlices(
          /**
           * New value for property `slices`
           */
          sSlices?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Circle elements.
       */
      class Circles extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Circles.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$CirclesSettings
        );
        /**
         * Constructor for a new Circles.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$CirclesSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Circle
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Circles with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Circles>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * circle object aggregation
         */
        getItems(): sap.ui.vbm.Circle[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Circles.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Gets current value of property {@link #getRadiusChangeable radiusChangeable}.
         *
         * Set to true if radius may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getRadiusChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.Circle` in the aggregation {@link #getItems items}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Circle
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Circle,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Circle[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Circle
        ): sap.ui.vbm.Circle;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getRadiusChangeable radiusChangeable}.
         *
         * Set to true if radius may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setRadiusChangeable(
          /**
           * New value for property `radiusChangeable`
           */
          bRadiusChangeable?: boolean
        ): this;
      }
      /**
       * Cluster control to visualize clustered objects on a map. The Cluster control does not cluster anything
       * itself, instead it only shows a predefined image. The image can be configured with the properties type,
       * color, icon and text. If a text is given it is shown in the upper right corner
       * of the control with a rounded border around. With the color property any color can be chosen.
       * The type property overwrites a property color with semantic color of the type and provides
       * a particular semantic icon in the middle of the control. With the icon property an icon can be
       * defined and may overrule the semantic icon; if no icon is defined ( and no type) then the semantic icon
       * for type inactive is chosen.
       */
      class Cluster extends sap.ui.core.Control {
        /**
         * Constructor for a new Cluster.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterSettings
        );
        /**
         * Constructor for a new Cluster.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.Cluster with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Cluster>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * Set the color of the control. If a type is set then the semantic color of the type is taken instead.
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * Set the icon of the control. If a type is set then the semantic icon of the type can be overwritten with
         * this property. If no icon and no type is set then the icon for the semantic type 'inactive' is taken.
         */
        getIcon(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Cluster.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Set the text of the control.
         */
        getText(): string;
        /**
         * Gets current value of property {@link #getType type}.
         *
         * semantic type for cluster. The type specifies the icon and the color of the cluster control.
         *
         * Default value is `None`.
         */
        getType(): sap.ui.vbm.SemanticType;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * Set the color of the control. If a type is set then the semantic color of the type is taken instead.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * Set the icon of the control. If a type is set then the semantic icon of the type can be overwritten with
         * this property. If no icon and no type is set then the icon for the semantic type 'inactive' is taken.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon?: string
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * Set the text of the control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
        /**
         * Sets a new value for property {@link #getType type}.
         *
         * semantic type for cluster. The type specifies the icon and the color of the cluster control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `None`.
         */
        setType(
          /**
           * New value for property `type`
           */
          sType?: sap.ui.vbm.SemanticType
        ): this;
      }
      /**
       * Abtract base class for Clustering types. This element implements the common part for all specific Cluster
       * elements. It must not be used directly, but is the base for further extension.
       *  There are two optional aggregations: `vizTemplate` and `vizVo` determining how cluster objects should
       * be visualized. Only the one or the other should be provided.
       *  With aggregation `vizTemplate` you can provide an arbitrary SAPUI5 control for the actual visualization.
       * If you want this control to display the number of clustered object you need to provide the name of the
       * receiving property of the template via property `textProperty`. For interaction with the cluster you
       * can either use the events provided by the visualization template or, if it does not provide appropriate
       * events, the cluster element events `click` and `contextMenu`. The event handler will receive an instance
       * of `sap.ui.vbm.ClusterContainer`.
       *  With aggregation `vizVo` you provide an instance of `sap.ui.vbm.Spot` as visualization object. Spots
       * are based on an image. The text for the number of clustered objects needs to be placed over the image.
       * The actual color, font, size, and positioning of the text can be influence via property `textSettings`.
       * For interaction with the cluster you can use the events provided by the spot.
       */
      class ClusterBase extends sap.ui.core.Element {
        /**
         * Constructor for a new ClusterBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterBaseSettings
        );
        /**
         * Constructor for a new ClusterBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterBaseSettings
        );

        /**
         * Adds some clusterContainer to the aggregation {@link #getClusterContainers clusterContainers}.
         */
        addClusterContainer(
          /**
           * The clusterContainer to add; if empty, nothing is inserted
           */
          oClusterContainer: sap.ui.vbm.ClusterContainer
        ): this;
        /**
         * Adds some clusterVo to the aggregation {@link #getClusterVos clusterVos}.
         */
        addClusterVo(
          /**
           * The clusterVo to add; if empty, nothing is inserted
           */
          oClusterVo: sap.ui.core.Control
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.ClusterBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.ClusterBase` itself.
         *
         * The event is raised when there is a click action on a Cluster Object.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.ClusterBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.ClusterBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.ClusterBase` itself.
         *
         * The event is raised when there is a click action on a Cluster Object.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.ClusterBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.ClusterBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.ClusterBase` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a Cluster.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.ClusterBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.ClusterBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.ClusterBase` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a Cluster.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.ClusterBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the clusterContainers in the aggregation {@link #getClusterContainers clusterContainers}.
         */
        destroyClusterContainers(): this;
        /**
         * Destroys all the clusterVos in the aggregation {@link #getClusterVos clusterVos}.
         */
        destroyClusterVos(): this;
        /**
         * Destroys the vizTemplate in the aggregation {@link #getVizTemplate vizTemplate}.
         */
        destroyVizTemplate(): this;
        /**
         * Destroys the vizVo in the aggregation {@link #getVizVo vizVo}.
         */
        destroyVizVo(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.ClusterBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.ClusterBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.ClusterBase with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.ClusterBase>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * ID of the clicked cluster object. Can serve as input for GeoMap function getInfoForCluster
             */
            clusterID?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * ID of the clicked cluster object. Can serve as input for GeoMap function getInfoForCluster
             */
            clusterID?: string;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Gets current value of property {@link #getAreaAlwaysVisible areaAlwaysVisible}.
         *
         * Flag controlling the visibility of the area convered by a cluster object.
         *
         * Default value is `false`.
         */
        getAreaAlwaysVisible(): boolean;
        /**
         * Gets current value of property {@link #getAreaColor areaColor}.
         *
         * Fill color for the area covered by a cluster object
         *
         * Default value is `"rgba(200,0,0,0.2)"`.
         */
        getAreaColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getAreaColorBorder areaColorBorder}.
         *
         * Border color for the area covered by a cluster object
         *
         * Default value is `"rgba(220,220,220,0.5)"`.
         */
        getAreaColorBorder(): sap.ui.core.CSSColor;
        /**
         * Gets content of aggregation {@link #getClusterContainers clusterContainers}.
         *
         * Hidden aggregation for host container VOs
         */
        getClusterContainers(): sap.ui.vbm.ClusterContainer[];
        /**
         * Gets content of aggregation {@link #getClusterVos clusterVos}.
         *
         * Hidden aggregation for cluster visualization controls
         */
        getClusterVos(): sap.ui.core.Control[];
        /**
         * Returns a metadata object for class sap.ui.vbm.ClusterBase.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getRule rule}.
         *
         * Clustering rule, describing which visual objects should be considered for clustering
         */
        getRule(): string;
        /**
         * Gets current value of property {@link #getTextProperty textProperty}.
         *
         * Name of property of the visualization control receiving the number of clustered objects. This setting
         * applys only if aggregation vizTemplate is used.
         *
         * Default value is `"text"`.
         */
        getTextProperty(): string;
        /**
         * Gets current value of property {@link #getTextSettings textSettings}.
         *
         * Settings for the text placed on the given Spot telling the number of clustered objects. This setting
         * applys only if aggregation vizVo is used. If omitted the number of clustered object will **not** be shown!
         */
        getTextSettings(): object;
        /**
         * Gets content of aggregation {@link #getVizTemplate vizTemplate}.
         *
         * Optional: Instance of a control, which is used as template for visualizing cluster objects. This is the
         * prefered choise.
         */
        getVizTemplate(): sap.ui.core.Control;
        /**
         * Gets content of aggregation {@link #getVizVo vizVo}.
         *
         * Optional: Instance of a spot, which is used as template for visualizing cluster objects
         */
        getVizVo(): sap.ui.vbm.Spot;
        /**
         * Checks for the provided `sap.ui.vbm.ClusterContainer` in the aggregation {@link #getClusterContainers
         * clusterContainers}. and returns its index if found or -1 otherwise.
         */
        indexOfClusterContainer(
          /**
           * The clusterContainer whose index is looked for
           */
          oClusterContainer: sap.ui.vbm.ClusterContainer
        ): int;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getClusterVos clusterVos}. and
         * returns its index if found or -1 otherwise.
         */
        indexOfClusterVo(
          /**
           * The clusterVo whose index is looked for
           */
          oClusterVo: sap.ui.core.Control
        ): int;
        /**
         * Inserts a clusterContainer into the aggregation {@link #getClusterContainers clusterContainers}.
         */
        insertClusterContainer(
          /**
           * The clusterContainer to insert; if empty, nothing is inserted
           */
          oClusterContainer: sap.ui.vbm.ClusterContainer,
          /**
           * The `0`-based index the clusterContainer should be inserted at; for a negative value of `iIndex`, the
           * clusterContainer is inserted at position 0; for a value greater than the current size of the aggregation,
           * the clusterContainer is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a clusterVo into the aggregation {@link #getClusterVos clusterVos}.
         */
        insertClusterVo(
          /**
           * The clusterVo to insert; if empty, nothing is inserted
           */
          oClusterVo: sap.ui.core.Control,
          /**
           * The `0`-based index the clusterVo should be inserted at; for a negative value of `iIndex`, the clusterVo
           * is inserted at position 0; for a value greater than the current size of the aggregation, the clusterVo
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Open a context menu
         */
        openContextMenu(
          /**
           * Type of VO
           */
          sType: string,
          /**
           * VO instance for which the Context Menu should be opened
           */
          oContainer: sap.ui.vbm.ClusterContainer,
          /**
           * the context menu to be opened
           */
          oMenu: sap.ui.unified.Menu
        ): void;
        /**
         * Open a Detail Window. This function can only be used with a Spot as Cluster visualization object!
         */
        openDetailWindow(
          /**
           * Spot instance for which the Detail Window should be opened
           */
          oSpotInst: sap.ui.vbm.Spot,
          /**
           * Parameter object
           */
          oParams: {
            /**
             * Text for Detail Window caption
             */
            caption: string;
            /**
             * position offset in x-direction from the anchor point
             */
            offsetX: string;
            /**
             * position offset in y-direction from the anchor point
             */
            offsetY: string;
          }
        ): void;
        /**
         * Removes all the controls from the aggregation {@link #getClusterContainers clusterContainers}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllClusterContainers(): sap.ui.vbm.ClusterContainer[];
        /**
         * Removes all the controls from the aggregation {@link #getClusterVos clusterVos}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllClusterVos(): sap.ui.core.Control[];
        /**
         * Removes a clusterContainer from the aggregation {@link #getClusterContainers clusterContainers}.
         */
        removeClusterContainer(
          /**
           * The clusterContainer to remove or its index or id
           */
          vClusterContainer: int | string | sap.ui.vbm.ClusterContainer
        ): sap.ui.vbm.ClusterContainer;
        /**
         * Removes a clusterVo from the aggregation {@link #getClusterVos clusterVos}.
         */
        removeClusterVo(
          /**
           * The clusterVo to remove or its index or id
           */
          vClusterVo: int | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets a new value for property {@link #getAreaAlwaysVisible areaAlwaysVisible}.
         *
         * Flag controlling the visibility of the area convered by a cluster object.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setAreaAlwaysVisible(
          /**
           * New value for property `areaAlwaysVisible`
           */
          bAreaAlwaysVisible?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getAreaColor areaColor}.
         *
         * Fill color for the area covered by a cluster object
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(200,0,0,0.2)"`.
         */
        setAreaColor(
          /**
           * New value for property `areaColor`
           */
          sAreaColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getAreaColorBorder areaColorBorder}.
         *
         * Border color for the area covered by a cluster object
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(220,220,220,0.5)"`.
         */
        setAreaColorBorder(
          /**
           * New value for property `areaColorBorder`
           */
          sAreaColorBorder?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getRule rule}.
         *
         * Clustering rule, describing which visual objects should be considered for clustering
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRule(
          /**
           * New value for property `rule`
           */
          sRule?: string
        ): this;
        /**
         * Sets a new value for property {@link #getTextProperty textProperty}.
         *
         * Name of property of the visualization control receiving the number of clustered objects. This setting
         * applys only if aggregation vizTemplate is used.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"text"`.
         */
        setTextProperty(
          /**
           * New value for property `textProperty`
           */
          sTextProperty?: string
        ): this;
        /**
         * Set the settings for the text placed on the Spot for number of clustered objects
         */
        setTextSettings(
          /**
           * Settings object
           */
          oSettings: object
        ): undefined;
        /**
         * Sets the aggregated {@link #getVizTemplate vizTemplate}.
         */
        setVizTemplate(
          /**
           * The vizTemplate to set
           */
          oVizTemplate: sap.ui.core.Control
        ): this;
        /**
         * Sets the aggregated {@link #getVizVo vizVo}.
         */
        setVizVo(
          /**
           * The vizVo to set
           */
          oVizVo: sap.ui.vbm.Spot
        ): this;
      }
      /**
       * Specific Visual Object element acting as a container for cluster visualization objects. A ClusterContainer
       * is positioned at a calculated position on the map. It aggregates a visualization controls, which will
       * then move with the map.
       *  **Since a ClusterContainer is not a real visual object most features borrowed from VoBase and
       * event Container will not work. There is no label, no edit mode, and no drop support. Events like
       * click may only be fired if the aggregated control is not handling them. The properties are not changeable
       * as well as the aggregated item. Only read access is possible**
       */
      class ClusterContainer extends sap.ui.vbm.Container {
        /**
         * Constructor for a new ClusterContainer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vbm.Container#constructor
         * sap.ui.vbm.Container} can be used.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterContainerSettings
        );
        /**
         * Constructor for a new ClusterContainer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vbm.Container#constructor
         * sap.ui.vbm.Container} can be used.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterContainerSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.ClusterContainer with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.Container.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.ClusterContainer>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vbm.ClusterContainer.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
      }
      /**
       * Cluster definition element for distance based clusters. Visual objects are clustered based on the visible
       * distance between them. Objects get aggregated to a cluster object as long as they are inside the given
       * distance range to the start object. The start object for a cluster is not specifically defined, just
       * the next object not belonging to a cluster is taken. The visualization objects are placed in the center
       * of gravity of the covered objects. Thus the actual distance between them may vary.
       *  This clustering is fast, but the results may not be very convincing.
       */
      class ClusterDistance extends sap.ui.vbm.ClusterBase {
        /**
         * Constructor for a new ClusterDistance.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterDistanceSettings
        );
        /**
         * Constructor for a new ClusterDistance.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterDistanceSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.ClusterDistance with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.ClusterBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.ClusterDistance>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDistance distance}.
         *
         * Distance in pixels between cluster objects. This distance is used as parameter during the clustering.
         * The visualization objects are placed in center of gravity of the covered objects. Thus the actual distance
         * between them may vary.
         *
         * Default value is `"128"`.
         */
        getDistance(): int;
        /**
         * Returns a metadata object for class sap.ui.vbm.ClusterDistance.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Sets a new value for property {@link #getDistance distance}.
         *
         * Distance in pixels between cluster objects. This distance is used as parameter during the clustering.
         * The visualization objects are placed in center of gravity of the covered objects. Thus the actual distance
         * between them may vary.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"128"`.
         */
        setDistance(
          /**
           * New value for property `distance`
           */
          iDistance?: int
        ): this;
      }
      /**
       * Cluster definition element for grid based clusters. Visual objects are clustered based on a grid. It
       * is possible to have multiple grid based clusters. The visualization object is placed in the center of
       * the grid cell plus a given offset.
       */
      class ClusterGrid extends sap.ui.vbm.ClusterBase {
        /**
         * Constructor for a new ClusterGrid.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterGridSettings
        );
        /**
         * Constructor for a new ClusterGrid.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterGridSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.ClusterGrid with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.ClusterBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.ClusterGrid>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCellSpacing cellSpacing}.
         *
         * Space between grid cells if cell area is shown
         *
         * Default value is `"4"`.
         */
        getCellSpacing(): int;
        /**
         * Gets current value of property {@link #getGridSize gridSize}.
         *
         * Size of grid cells in pixels. Format is "distanceX;distanceY"
         *
         * Default value is `"256;256"`.
         */
        getGridSize(): string;
        /**
         * Gets current value of property {@link #getLimit limit}.
         *
         * Minimal number of objects covered by grid cell fullfilling the cluster rule until clustering is applied.
         *
         * Default value is `2`.
         */
        getLimit(): int;
        /**
         * Gets current value of property {@link #getLimitTotal limitTotal}.
         *
         * Minimal total number of objects covered by grid cell until clustering is applied.
         *
         * Default value is `2`.
         */
        getLimitTotal(): int;
        /**
         * Returns a metadata object for class sap.ui.vbm.ClusterGrid.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getOffset offset}.
         *
         * Offset for the visualization object from the center of the grid cell. This can be used to show multiple
         * visualization objects in on grid cell without overlapping. Format is "offsetX;offsetY"
         *
         * Default value is `"0;0"`.
         */
        getOffset(): string;
        /**
         * Gets current value of property {@link #getOrderIndex orderIndex}.
         *
         * Ordering index of given cluster in the sequence of all grid based clusters
         */
        getOrderIndex(): int;
        /**
         * Sets a new value for property {@link #getCellSpacing cellSpacing}.
         *
         * Space between grid cells if cell area is shown
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"4"`.
         */
        setCellSpacing(
          /**
           * New value for property `cellSpacing`
           */
          iCellSpacing?: int
        ): this;
        /**
         * Sets a new value for property {@link #getGridSize gridSize}.
         *
         * Size of grid cells in pixels. Format is "distanceX;distanceY"
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"256;256"`.
         */
        setGridSize(
          /**
           * New value for property `gridSize`
           */
          sGridSize?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLimit limit}.
         *
         * Minimal number of objects covered by grid cell fullfilling the cluster rule until clustering is applied.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `2`.
         */
        setLimit(
          /**
           * New value for property `limit`
           */
          iLimit?: int
        ): this;
        /**
         * Sets a new value for property {@link #getLimitTotal limitTotal}.
         *
         * Minimal total number of objects covered by grid cell until clustering is applied.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `2`.
         */
        setLimitTotal(
          /**
           * New value for property `limitTotal`
           */
          iLimitTotal?: int
        ): this;
        /**
         * Sets a new value for property {@link #getOffset offset}.
         *
         * Offset for the visualization object from the center of the grid cell. This can be used to show multiple
         * visualization objects in on grid cell without overlapping. Format is "offsetX;offsetY"
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0;0"`.
         */
        setOffset(
          /**
           * New value for property `offset`
           */
          sOffset?: string
        ): this;
        /**
         * Sets a new value for property {@link #getOrderIndex orderIndex}.
         *
         * Ordering index of given cluster in the sequence of all grid based clusters
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setOrderIndex(
          /**
           * New value for property `orderIndex`
           */
          iOrderIndex?: int
        ): this;
      }
      /**
       * Cluster definition element for tree clusters. Complex clustering based on Voronoi diagrams. The actual
       * clustering is based on the areas in the Voronoi diagram and cluster objects get aggregated to a hierarchy
       * over several levels of detail.
       */
      class ClusterTree extends sap.ui.vbm.ClusterBase {
        /**
         * Constructor for a new ClusterTree.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterTreeSettings
        );
        /**
         * Constructor for a new ClusterTree.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ClusterTreeSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.ClusterTree with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.ClusterBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.ClusterTree>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAnimateClusterSplit animateClusterSplit}.
         *
         * Indicates whether the split of a cluster object into sub clusterers or visual objects should be animated
         *
         * Default value is `true`.
         */
        getAnimateClusterSplit(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vbm.ClusterTree.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Sets a new value for property {@link #getAnimateClusterSplit animateClusterSplit}.
         *
         * Indicates whether the split of a cluster object into sub clusterers or visual objects should be animated
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setAnimateClusterSplit(
          /**
           * New value for property `animateClusterSplit`
           */
          bAnimateClusterSplit?: boolean
        ): this;
      }
      /**
       * Specific Visual Object element acting as a container for other controls. A Container is positioned at
       * the given position on the map. It can aggregate other controls, which will then move with the map.
       *  **Since a Container is not a real visual object most features borrowed from VoBase will not work.
       * There is no label, no edit mode, and no drop support. Events like click will only be fired if the aggregated
       * control is not handling them.**
       */
      class Container extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ContainerSettings
        );
        /**
         * Constructor for a new Container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ContainerSettings
        );

        /**
         * Destroys the item in the aggregation {@link #getItem item}.
         */
        destroyItem(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Container with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Container>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAlignment alignment}.
         *
         * Alignment of the container to its position:
         * 	0: center 1: top center 2: top right 3: center right 4: bottom right 5: bottom center
         * 6: bottom left 7: center left 8: top left
         *
         * Default value is `'0'`.
         */
        getAlignment(): string;
        /**
         * Gets content of aggregation {@link #getItem item}.
         *
         * The control that should be placed in the container.
         */
        getItem(): sap.ui.core.Control;
        /**
         * Returns a metadata object for class sap.ui.vbm.Container.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position for the Container. The format is "lon;lat;0".
         */
        getPosition(): string;
        /**
         * Sets a new value for property {@link #getAlignment alignment}.
         *
         * Alignment of the container to its position:
         * 	0: center 1: top center 2: top right 3: center right 4: bottom right 5: bottom center
         * 6: bottom left 7: center left 8: top left
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0'`.
         */
        setAlignment(
          /**
           * New value for property `alignment`
           */
          sAlignment?: string
        ): this;
        /**
         * Sets the aggregated {@link #getItem item}.
         */
        setItem(
          /**
           * The item to set
           */
          oItem: sap.ui.core.Control
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position for the Container. The format is "lon;lat;0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Container instances.
       */
      class Containers extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Containers.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ContainersSettings
        );
        /**
         * Constructor for a new Containers.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ContainersSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Container
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Containers with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Containers>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Container object aggregation
         */
        getItems(): sap.ui.vbm.Container[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Containers.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Checks for the provided `sap.ui.vbm.Container` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Container
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Container,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Container[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Container
        ): sap.ui.vbm.Container;
      }
      /**
       * DragSource Aggregation element
       */
      class DragSource extends sap.ui.core.Element {
        /**
         * Constructor for a new DragSource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$DragSourceSettings
        );
        /**
         * Constructor for a new DragSource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$DragSourceSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.DragSource with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.DragSource>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vbm.DragSource.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getType type}.
         *
         * Drag type
         */
        getType(): string;
        /**
         * Sets a new value for property {@link #getType type}.
         *
         * Drag type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setType(
          /**
           * New value for property `type`
           */
          sType?: string
        ): this;
      }
      /**
       * DropTarget Aggregation element
       */
      class DropTarget extends sap.ui.core.Element {
        /**
         * Constructor for a new DropTarget.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$DropTargetSettings
        );
        /**
         * Constructor for a new DropTarget.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$DropTargetSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.DropTarget with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.DropTarget>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vbm.DropTarget.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getType type}.
         *
         * Drop type
         */
        getType(): string;
        /**
         * Sets a new value for property {@link #getType type}.
         *
         * Drop type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setType(
          /**
           * New value for property `type`
           */
          sType?: string
        ): this;
      }
      /**
       * The Feature element can be added to the items aggregation of a FeatureCollection. By matching
       * the id it allows to redefine the color of a GeoJSON feature and adds interactivity.
       */
      class Feature extends sap.ui.core.Element {
        /**
         * Constructor for a new Feature.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$FeatureSettings
        );
        /**
         * Constructor for a new Feature.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$FeatureSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Feature`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Feature` itself.
         *
         * The event is raised when there is a click action on a Feature.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Feature` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Feature`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Feature` itself.
         *
         * The event is raised when there is a click action on a Feature.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Feature` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Feature`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Feature` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a Feature.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Feature` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Feature`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Feature` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a Feature.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Feature` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.Feature`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Feature`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Feature with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Feature>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Menu object to be used with openContextMenu().
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color, this should be provided in the rgba(r,g,b,a) format.
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getFeatureId featureId}.
         *
         * The Feature ID. Used to match with the feature in the GeoJSON given to the parent (FeatureCollection).
         */
        getFeatureId(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Feature.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Open the context menu
         */
        openContextMenu(
          /**
           * the context menu to be opened
           */
          oMenu: object
        ): void;
        /**
         * Open a Detail Window for the Feature at click position
         */
        openDetailWindow(
          /**
           * caption of detail window
           */
          sCaption: string,
          /**
           * position offset in x-direction from the anchor point
           */
          sOffsetX: string,
          /**
           * position offset in y-direction from the anchor point
           */
          sOffsetY: string
        ): void;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color, this should be provided in the rgba(r,g,b,a) format.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getFeatureId featureId}.
         *
         * The Feature ID. Used to match with the feature in the GeoJSON given to the parent (FeatureCollection).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFeatureId(
          /**
           * New value for property `featureId`
           */
          sFeatureId?: string
        ): this;
      }
      /**
       * FeatureCollection aggregation container. A FeatureCollection can render the content of an assigned GeoJSON.
       * The naming is associated to the GeoJSON standard. All features found in the GeoJSON are rendered as separated
       * objects. From the possible feature types only
       * 	Polygon and Multipolygon  are supported so far. The feature type support will be extended in
       * the upcoming releases.
       *  All features from the GeoJSON will be rendered with the given default colors and are inactive. They
       * do not react on mouse over, except with tooltip, or raise any events on click or right click.
       *  By adding Feature elements to the items aggregation you can make the match (by id) feature from
       * the GeoJSON interactive and give it alternative colors.
       */
      class FeatureCollection extends sap.ui.vbm.GeoJsonLayer {
        /**
         * Constructor for a new FeatureCollection.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$FeatureCollectionSettings
        );
        /**
         * Constructor for a new FeatureCollection.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$FeatureCollectionSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Feature
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.FeatureCollection`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.FeatureCollection` itself.
         *
         * The event is raised when there is a click action on an aggregated Feature. Clicks on other Features from
         * the GeoJSON are ignored.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.FeatureCollection` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.FeatureCollection`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.FeatureCollection` itself.
         *
         * The event is raised when there is a click action on an aggregated Feature. Clicks on other Features from
         * the GeoJSON are ignored.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.FeatureCollection` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.FeatureCollection`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.FeatureCollection` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an aggregated Feature. Clicks
         * on other Features from the GeoJSON are ignored.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.FeatureCollection` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.FeatureCollection`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.FeatureCollection` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an aggregated Feature. Clicks
         * on other Features from the GeoJSON are ignored.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.FeatureCollection` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.FeatureCollection`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.FeatureCollection`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.FeatureCollection with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.GeoJsonLayer.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.FeatureCollection>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Id of clicked Feature
             */
            featureId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Id of clicked Feature
             */
            featureId?: string;
          }
        ): this;
        /**
         * Returns Properties for Features like name, bounding box, and midpoint
         */
        getFeaturesInfo(
          /**
           * Array of Feature Ids. The Feature Id must match the GeoJSON tag.
           */
          aFeatureIds: string[]
        ): any[];
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Feature object aggregation
         */
        getItems(): sap.ui.vbm.Feature[];
        /**
         * Returns a metadata object for class sap.ui.vbm.FeatureCollection.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Checks for the provided `sap.ui.vbm.Feature` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Feature
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Feature,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Feature[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Feature
        ): sap.ui.vbm.Feature;
      }
      /**
       * Specific Visual Object element for a GeoCircle. A GeoCircle is positioned with its centerpoint
       * at the given position. Since the actual size of a geocircle may depend on the zoom level it might
       * be only partly visible. Thus detail windows will open at the click position.
       */
      class GeoCircle extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new GeoCircle.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoCircleSettings
        );
        /**
         * Constructor for a new GeoCircle.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoCircleSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.GeoCircle with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.GeoCircle>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color of the geocirle.
         *
         * Default value is `'RGB(0,0,0)'`.
         */
        getColor(): string;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the geocirle.
         *
         * Default value is `'RGB(0,0,0)'`.
         */
        getColorBorder(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.GeoCircle.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position of the geocircle. The format is "lon;lat;0".
         *
         * Default value is `'0;0;0'`.
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getRadius radius}.
         *
         * The radius in meters of the geocirle.
         *
         * Default value is `'10000'`.
         */
        getRadius(): string;
        /**
         * Gets current value of property {@link #getSlices slices}.
         *
         * The number of slices of the geocircle.
         *
         * Default value is `'20'`.
         */
        getSlices(): string;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color of the geocirle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(0,0,0)'`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the geocirle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(0,0,0)'`.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder?: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position of the geocircle. The format is "lon;lat;0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0;0;0'`.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getRadius radius}.
         *
         * The radius in meters of the geocirle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'10000'`.
         */
        setRadius(
          /**
           * New value for property `radius`
           */
          sRadius?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSlices slices}.
         *
         * The number of slices of the geocircle.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'20'`.
         */
        setSlices(
          /**
           * New value for property `slices`
           */
          sSlices?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for GeoCircle elements.
       */
      class GeoCircles extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new GeoCircles.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoCirclesSettings
        );
        /**
         * Constructor for a new GeoCircles.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoCirclesSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.GeoCircle
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.GeoCircles with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.GeoCircles>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * GeoCircle element aggregation
         */
        getItems(): sap.ui.vbm.GeoCircle[];
        /**
         * Returns a metadata object for class sap.ui.vbm.GeoCircles.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Gets current value of property {@link #getRadiusChangeable radiusChangeable}.
         *
         * Set to true if radius may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getRadiusChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.GeoCircle` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.GeoCircle
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.GeoCircle,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.GeoCircle[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.GeoCircle
        ): sap.ui.vbm.GeoCircle;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getRadiusChangeable radiusChangeable}.
         *
         * Set to true if radius may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setRadiusChangeable(
          /**
           * New value for property `radiusChangeable`
           */
          bRadiusChangeable?: boolean
        ): this;
      }
      /**
       * GeoJsonLayer aggregation container. A GeoJsonLayer can render the content of an assigned GeoJSON. The
       * naming is associated to the GeoJSON standard. All features found in the GeoJSON are rendered as separated
       * objects. From the possible feature types only
       * 	Polygon and Multipolygon, LineString, and Point  are supported so far. The feature type
       * support will be extended in the upcoming releases.
       *  All features from the GeoJSON will be rendered with the given default colors and are inactive. They
       * do not react on mouse over, except with tooltip, or raise any events on click or right click.
       *  By adding Feature elements to the items aggregation you can make the match (by id) feature from
       * the GeoJSON interactive and give it alternative colors.
       *  The GeoJSON can be given as a URL using property srcURL, directly as object using property data,
       * or as a combination of both.
       */
      class GeoJsonLayer extends sap.ui.core.Element {
        /**
         * Constructor for a new GeoJsonLayer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoJsonLayerSettings
        );
        /**
         * Constructor for a new GeoJsonLayer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoJsonLayerSettings
        );

        /**
         * Add GeoJSON object to the layer
         */
        addData(
          /**
           * GeoJSON object or an array of those
           */
          aData: object
        ): void;
        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Feature
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.GeoJsonLayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoJsonLayer` itself.
         *
         * The event is raised when there is a click action on an aggregated Feature. Clicks on other Features from
         * the GeoJSON are ignored.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoJsonLayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.GeoJsonLayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoJsonLayer` itself.
         *
         * The event is raised when there is a click action on an aggregated Feature. Clicks on other Features from
         * the GeoJSON are ignored.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoJsonLayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.GeoJsonLayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoJsonLayer` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an aggregated Feature. Clicks
         * on other Features from the GeoJSON are ignored.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoJsonLayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.GeoJsonLayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoJsonLayer` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an aggregated Feature. Clicks
         * on other Features from the GeoJSON are ignored.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoJsonLayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.GeoJsonLayer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.GeoJsonLayer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.GeoJsonLayer with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.GeoJsonLayer>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Id of clicked Feature
             */
            featureId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Id of clicked Feature
             */
            featureId?: string;
          }
        ): this;
        /**
         * Gets current value of property {@link #getData data}.
         *
         * GeoJSON object according to the {@link http://geojson.org/geojson-spec.html#geojson-objects|specification}
         * or array of such objects
         */
        getData(): object;
        /**
         * Gets current value of property {@link #getDefaultBorderColor defaultBorderColor}.
         *
         * Default border color for GeoJSON features, if applicable (Polygons and LineStrings)
         *
         * Default value is `"rgba(255, 255, 255, 1.0)"`.
         */
        getDefaultBorderColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getDefaultFillColor defaultFillColor}.
         *
         * Default Fill color for GeoJSON features (Polygons and LineStrings)
         *
         * Default value is `"rgba(186, 193, 196, 0.5)"`.
         */
        getDefaultFillColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getDefaultLineWidth defaultLineWidth}.
         *
         * Default line width for LineStrings
         *
         * Default value is `5`.
         */
        getDefaultLineWidth(): int;
        /**
         * Returns Properties for Features like name, bounding box, and midpoint
         */
        getFeaturesInfo(
          /**
           * Array of Feature Ids. The Feature Id must match the GeoJSON tag.
           */
          aFeatureIds: string[]
        ): any[];
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Feature object aggregation
         */
        getItems(): sap.ui.vbm.Feature[];
        /**
         * Returns a metadata object for class sap.ui.vbm.GeoJsonLayer.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getSrcURL srcURL}.
         *
         * Source URL for GeoJSON
         */
        getSrcURL(): string;
        /**
         * Checks for the provided `sap.ui.vbm.Feature` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Feature
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Feature,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * open the context menu
         */
        openContextMenu(
          /**
           * VO instance for which the Detail Window should be opened
           */
          oFeature: sap.ui.vbm.Feature,
          /**
           * the context menu to be opened
           */
          oMenu: object
        ): void;
        /**
         * open a Detail Window
         */
        openDetailWindow(
          /**
           * VO instance for which the Detail Window should be opened
           */
          oFeature: sap.ui.vbm.Feature,
          /**
           * Parameter object
           */
          oParams: {
            /**
             * Text for Detail Window caption
             */
            caption: string;
            /**
             * position offset in x-direction from the anchor point
             */
            offsetX: string;
            /**
             * position offset in y-direction from the anchor point
             */
            offsetY: string;
          }
        ): void;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Feature[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Feature
        ): sap.ui.vbm.Feature;
        /**
         * Sets a new value for property {@link #getData data}.
         *
         * GeoJSON object according to the {@link http://geojson.org/geojson-spec.html#geojson-objects|specification}
         * or array of such objects
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setData(
          /**
           * New value for property `data`
           */
          oData?: object
        ): this;
        /**
         * Sets a new value for property {@link #getDefaultBorderColor defaultBorderColor}.
         *
         * Default border color for GeoJSON features, if applicable (Polygons and LineStrings)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(255, 255, 255, 1.0)"`.
         */
        setDefaultBorderColor(
          /**
           * New value for property `defaultBorderColor`
           */
          sDefaultBorderColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getDefaultFillColor defaultFillColor}.
         *
         * Default Fill color for GeoJSON features (Polygons and LineStrings)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(186, 193, 196, 0.5)"`.
         */
        setDefaultFillColor(
          /**
           * New value for property `defaultFillColor`
           */
          sDefaultFillColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getDefaultLineWidth defaultLineWidth}.
         *
         * Default line width for LineStrings
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `5`.
         */
        setDefaultLineWidth(
          /**
           * New value for property `defaultLineWidth`
           */
          iDefaultLineWidth?: int
        ): this;
        /**
         * Sets a new value for property {@link #getSrcURL srcURL}.
         *
         * Source URL for GeoJSON
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSrcURL(
          /**
           * New value for property `srcURL`
           */
          sSrcURL?: string
        ): this;
      }
      /**
       * Map control with the option to position multiple visual objects on top of a map. The GeoMap control shows
       * an image based map loaded from one or more configurable external providers. Per default a map from MapQuest is used. Other map providers can be configured via property
       * mapConfiguration. Multiple maps can be mashed up into one map layer stack. If multiple map layer
       * stacks are provided via configuration it is possible to switch between them during runtime. The control
       * supports the display of copyright information for the visible maps.
       *  On top of the map the GeoMap control provides a navigation control, a scale, and a legend. Each of them
       * can be switched off separately.
       *  It is possible to set the initial position and zoom for the map display. Further the control allows
       * to restrict the potentially visible map area and zoom range.
       *  Different visual objects can be placed on the map. Visual objects are grouped in VO aggregations and
       * an arbitrary number of VO aggregations can be assigned to the vos aggregation.
       *  The second aggregation featureCollections allows the use of GeoJSON as source for visual objects.
       */
      class GeoMap extends sap.ui.vbm.VBI {
        /**
         * Constructor for a new GeoMap.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoMapSettings
        );
        /**
         * Constructor for a new GeoMap.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$GeoMapSettings
        );

        /**
         * Adds some cluster to the aggregation {@link #getClusters clusters}.
         */
        addCluster(
          /**
           * The cluster to add; if empty, nothing is inserted
           */
          oCluster: sap.ui.vbm.ClusterBase
        ): this;
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Adds some featureCollection to the aggregation {@link #getFeatureCollections featureCollections}.
         */
        addFeatureCollection(
          /**
           * The featureCollection to add; if empty, nothing is inserted
           */
          oFeatureCollection: sap.ui.vbm.FeatureCollection
        ): this;
        /**
         * Adds some geoJsonLayer to the aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         */
        addGeoJsonLayer(
          /**
           * The geoJsonLayer to add; if empty, nothing is inserted
           */
          oGeoJsonLayer: sap.ui.vbm.GeoJsonLayer
        ): this;
        /**
         * Adds some resource to the aggregation {@link #getResources resources}.
         */
        addResource(
          /**
           * The resource to add; if empty, nothing is inserted
           */
          oResource: sap.ui.vbm.Resource
        ): this;
        /**
         * Adds some vo to the aggregation {@link #getVos vos}.
         */
        addVo(
          /**
           * The vo to add; if empty, nothing is inserted
           */
          oVo: sap.ui.vbm.VoAbstract
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:centerChanged centerChanged} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map move.
         */
        attachCenterChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:centerChanged centerChanged} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map move.
         */
        attachCenterChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * Raised when the map is clicked.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * Raised when the map is clicked.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * Raised when the map is right clicked/longPressed(tap and hold).
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * Raised when the map is right clicked/longPressed(tap and hold).
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * Raised when something is dropped on the map.
         */
        attachDrop(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * Raised when something is dropped on the map.
         */
        attachDrop(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyDown keyDown} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map key down
         */
        attachKeyDown(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyDown keyDown} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map key down
         */
        attachKeyDown(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyPress keyPress} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map key press
         */
        attachKeyPress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyPress keyPress} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map key press
         */
        attachKeyPress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyUp keyUp} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map key up
         */
        attachKeyUp(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyUp keyUp} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on map key up
         */
        attachKeyUp(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * This event is raised when a multi selection of visual objects has occurred
         */
        attachSelect(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * This event is raised when a multi selection of visual objects has occurred
         */
        attachSelect(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on zoom in or zoom out.
         */
        attachZoomChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.ui.vbm.GeoMap`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.GeoMap` itself.
         *
         * this event is raised on zoom in or zoom out.
         */
        attachZoomChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.GeoMap` itself
           */
          oListener?: object
        ): this;
        /**
         * Close any open Detail window
         */
        closeAnyDetailWindow(): void;
        /**
         * Destroys all the clusters in the aggregation {@link #getClusters clusters}.
         */
        destroyClusters(): this;
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Destroys all the featureCollections in the aggregation {@link #getFeatureCollections featureCollections}.
         */
        destroyFeatureCollections(): this;
        /**
         * Destroys all the geoJsonLayers in the aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         */
        destroyGeoJsonLayers(): this;
        /**
         * Destroys the legend in the aggregation {@link #getLegend legend}.
         */
        destroyLegend(): this;
        /**
         * Destroys all the resources in the aggregation {@link #getResources resources}.
         */
        destroyResources(): this;
        /**
         * Destroys all the vos in the aggregation {@link #getVos vos}.
         */
        destroyVos(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:centerChanged centerChanged} event of this
         * `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCenterChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:drop drop} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDrop(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:keyDown keyDown} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachKeyDown(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:keyPress keyPress} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachKeyPress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:keyUp keyUp} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachKeyUp(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelect(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:zoomChanged zoomChanged} event of this `sap.ui.vbm.GeoMap`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachZoomChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.GeoMap with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VBI.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.GeoMap>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:centerChanged centerChanged} to attached listeners.
         */
        fireCenterChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Center point of the map. Format : Lon;Lat;0.0.
             */
            centerPoint?: string;
            /**
             * Viewport bounding box's upperLeft and lowerRight coordinates. Format : Lon;Lat;0.0.
             */
            viewportBB?: object;
            /**
             * Level of detail.
             */
            zoomLevel?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Geo coordinates in format "<longitude>;<latitude>;0"
             */
            pos?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Client coordinate X
             */
            clientX?: int;
            /**
             * Client coordinate Y
             */
            clientY?: int;
            /**
             * Geo coordinates in format "<longitude>;<latitude>;0"
             */
            pos?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:drop drop} to attached listeners.
         */
        fireDrop(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Geo coordinates in format "<longitude>;<latitude>;0"
             */
            pos?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:keyDown keyDown} to attached listeners.
         */
        fireKeyDown(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Key value of the key
             */
            key?: string;
            /**
             * Code value of the key
             */
            code?: int;
            /**
             * Shift key modifier state
             */
            shift?: boolean;
            /**
             * Ctrl key modifier state
             */
            ctrl?: boolean;
            /**
             * Alt key modifier state
             */
            alt?: boolean;
            /**
             * Meta key modifier state
             */
            meta?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:keyPress keyPress} to attached listeners.
         */
        fireKeyPress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Key value of the key
             */
            key?: string;
            /**
             * Code value of the key
             */
            code?: int;
            /**
             * Shift key modifier state
             */
            shift?: boolean;
            /**
             * Ctrl key modifier state
             */
            ctrl?: boolean;
            /**
             * Alt key modifier state
             */
            alt?: boolean;
            /**
             * Meta key modifier state
             */
            meta?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:keyUp keyUp} to attached listeners.
         */
        fireKeyUp(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Key value of the key
             */
            key?: string;
            /**
             * Code value of the key
             */
            code?: int;
            /**
             * Shift key modifier state
             */
            shift?: boolean;
            /**
             * Ctrl key modifier state
             */
            ctrl?: boolean;
            /**
             * Alt key modifier state
             */
            alt?: boolean;
            /**
             * Meta key modifier state
             */
            meta?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:select select} to attached listeners.
         */
        fireSelect(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:zoomChanged zoomChanged} to attached listeners.
         */
        fireZoomChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Center point of the map. Format : Lon;Lat;0.0.
             */
            centerPoint?: string;
            /**
             * Viewport bounding box's upperLeft and lowerRight coordinates. Format : Lon;Lat;0.0.
             */
            viewportBB?: object;
            /**
             * Level of detail.
             */
            zoomLevel?: int;
          }
        ): this;
        /**
         * Retrieves the center position of the current map.
         */
        getCenterPosition(): string;
        /**
         * Retrieves all spot instances of a {sap.ui.vbm.ClusterContainer}
         */
        getClusteredSpots(
          /**
           * The cluster container whose spots we want to retrieve.
           */
          clusterContainer: sap.ui.vbm.ClusterContainer
        ): sap.ui.vbm.Spot[];
        /**
         * @deprecated - This property should not longer be used. Its functionality has been replaced by the `clusters`
         * aggregation.
         *
         * Gets current value of property {@link #getClustering clustering}.
         */
        getClustering(): object;
        /**
         * Gets content of aggregation {@link #getClusters clusters}.
         *
         * Aggregation of clusters.
         */
        getClusters(): sap.ui.vbm.ClusterBase[];
        /**
         * Gets current value of property {@link #getDisablePan disablePan}.
         *
         * Disable Map Paning. This setting works only upon initialization and cannot be changed later on.
         *
         * Default value is `false`.
         */
        getDisablePan(): boolean;
        /**
         * Gets current value of property {@link #getDisableZoom disableZoom}.
         *
         * Disable Map Zooming. This setting works only upon initialization and cannot be changed later on.
         *
         * Default value is `false`.
         */
        getDisableZoom(): boolean;
        /**
         * Gets current value of property {@link #getEnableAnimation enableAnimation}.
         *
         * Enable Animation of Map Zoom. Works in combination of setZoomlevel.
         *
         * Default value is `false`.
         */
        getEnableAnimation(): boolean;
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Gets content of aggregation {@link #getFeatureCollections featureCollections}.
         */
        getFeatureCollections(): sap.ui.vbm.FeatureCollection[];
        /**
         * Gets content of aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         *
         * Aggregation of GeoJSON layers. Object from a GeoJSON layer will be behind all other Visual Objects from
         * the `vos` aggregation. In case of multiple GeoJSON layers the objects are orderer with the layers they
         * belong to.
         */
        getGeoJsonLayers(): sap.ui.vbm.GeoJsonLayer[];
        /**
         * Gets current value of property {@link #getInitialPosition initialPosition}.
         *
         * Initial position of the Map. Set is only supported on initialization! Format is "<longitude>;<latitude>;0".
         *
         * Default value is `"0;0;0"`.
         */
        getInitialPosition(): string;
        /**
         * Gets current value of property {@link #getInitialZoom initialZoom}.
         *
         * Initial zoom. Value needs to be positive whole number. Set is only supported on initialization!
         *
         * Default value is `"2"`.
         */
        getInitialZoom(): string;
        /**
         * Gets content of aggregation {@link #getLegend legend}.
         *
         * Legend for the Map
         */
        getLegend(): sap.ui.vbm.Legend;
        /**
         * Gets current value of property {@link #getLegendVisible legendVisible}.
         *
         * Toggles the visibility of the legend
         *
         * Default value is `true`.
         */
        getLegendVisible(): boolean;
        /**
         * Gets current value of property {@link #getMapConfiguration mapConfiguration}.
         *
         * This is the map configuration for the geo map. The map configuration defines the used maps, the layering
         * of the maps and the servers that can be used to request the map tiles.
         */
        getMapConfiguration(): object;
        /**
         * Returns a metadata object for class sap.ui.vbm.GeoMap.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getNavcontrolVisible navcontrolVisible}.
         *
         * Defines the visibility of the navigation control. Only supported on initialization!
         *
         * Default value is `true`.
         */
        getNavcontrolVisible(): boolean;
        /**
         * @EXPERIMENTAL (since 1.30.0)
         *
         * Trigger the interactive creation mode to get a position or position array.
         */
        getPositionInteractive(
          /**
           * Indicator if a single position or an array is requested
           */
          bPosArray: boolean,
          /**
           * Callback function func( sPosArray ) to be called when done. Position(array) sPosArray is provided in
           * format "lon;lat;0;..."
           */
          callback: Function
        ): boolean;
        /**
         * Gets current value of property {@link #getRefMapLayerStack refMapLayerStack}.
         *
         * Name of the map layer stack (provided in mapConfiguration) which is used for map rendering. If not set
         * the layer stack with the name 'Default' is chosen. Property can be changed at runtime to switch between
         * map layer stack.
         *
         * Default value is `"Default"`.
         */
        getRefMapLayerStack(): string;
        /**
         * Gets content of aggregation {@link #getResources resources}.
         *
         * Aggregation of resources. The images for e.g. Spots have to be provided as resources.
         */
        getResources(): sap.ui.vbm.Resource[];
        /**
         * Gets current value of property {@link #getScaleVisible scaleVisible}.
         *
         * Defines the visibility of the scale. Only supported on initialization!
         *
         * Default value is `true`.
         */
        getScaleVisible(): boolean;
        /**
         * Gets current value of property {@link #getVisualFrame visualFrame}.
         *
         * Visual Frame object. Defining a frame {minX, maxX, minY, maxY, maxLOD, minLOD} to which the scene display
         * is restricted.
         */
        getVisualFrame(): object;
        /**
         * Get an aggregated VO instance by its internal ID returned by e.g. function `getInfoForCluster`.
         */
        getVoByInternalId(
          /**
           * Internal VO Identifier
           */
          voIdentifier?: string
        ): sap.ui.vbm.VoBase;
        /**
         * Gets content of aggregation {@link #getVos vos}.
         *
         * Aggregation of visual object types. A VO aggregation can be considered to be a table of VOs of a common
         * type.
         */
        getVos(): sap.ui.vbm.VoAbstract[];
        /**
         * Gets current value of property {@link #getZoomlevel zoomlevel}.
         *
         * Zoomlevel for the Map. Value needs to be positive whole number.
         *
         * Default value is `2`.
         */
        getZoomlevel(): int;
        /**
         * Go to Initial Start Position with Initial Zoom Level
         */
        goToStartPosition(): void;
        /**
         * Checks for the provided `sap.ui.vbm.ClusterBase` in the aggregation {@link #getClusters clusters}. and
         * returns its index if found or -1 otherwise.
         */
        indexOfCluster(
          /**
           * The cluster whose index is looked for
           */
          oCluster: sap.ui.vbm.ClusterBase
        ): int;
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Checks for the provided `sap.ui.vbm.FeatureCollection` in the aggregation {@link #getFeatureCollections
         * featureCollections}. and returns its index if found or -1 otherwise.
         */
        indexOfFeatureCollection(
          /**
           * The featureCollection whose index is looked for
           */
          oFeatureCollection: sap.ui.vbm.FeatureCollection
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.GeoJsonLayer` in the aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfGeoJsonLayer(
          /**
           * The geoJsonLayer whose index is looked for
           */
          oGeoJsonLayer: sap.ui.vbm.GeoJsonLayer
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.Resource` in the aggregation {@link #getResources resources}. and
         * returns its index if found or -1 otherwise.
         */
        indexOfResource(
          /**
           * The resource whose index is looked for
           */
          oResource: sap.ui.vbm.Resource
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.VoAbstract` in the aggregation {@link #getVos vos}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfVo(
          /**
           * The vo whose index is looked for
           */
          oVo: sap.ui.vbm.VoAbstract
        ): int;
        /**
         * Inserts a cluster into the aggregation {@link #getClusters clusters}.
         */
        insertCluster(
          /**
           * The cluster to insert; if empty, nothing is inserted
           */
          oCluster: sap.ui.vbm.ClusterBase,
          /**
           * The `0`-based index the cluster should be inserted at; for a negative value of `iIndex`, the cluster
           * is inserted at position 0; for a value greater than the current size of the aggregation, the cluster
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Inserts a featureCollection into the aggregation {@link #getFeatureCollections featureCollections}.
         */
        insertFeatureCollection(
          /**
           * The featureCollection to insert; if empty, nothing is inserted
           */
          oFeatureCollection: sap.ui.vbm.FeatureCollection,
          /**
           * The `0`-based index the featureCollection should be inserted at; for a negative value of `iIndex`, the
           * featureCollection is inserted at position 0; for a value greater than the current size of the aggregation,
           * the featureCollection is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a geoJsonLayer into the aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         */
        insertGeoJsonLayer(
          /**
           * The geoJsonLayer to insert; if empty, nothing is inserted
           */
          oGeoJsonLayer: sap.ui.vbm.GeoJsonLayer,
          /**
           * The `0`-based index the geoJsonLayer should be inserted at; for a negative value of `iIndex`, the geoJsonLayer
           * is inserted at position 0; for a value greater than the current size of the aggregation, the geoJsonLayer
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a resource into the aggregation {@link #getResources resources}.
         */
        insertResource(
          /**
           * The resource to insert; if empty, nothing is inserted
           */
          oResource: sap.ui.vbm.Resource,
          /**
           * The `0`-based index the resource should be inserted at; for a negative value of `iIndex`, the resource
           * is inserted at position 0; for a value greater than the current size of the aggregation, the resource
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a vo into the aggregation {@link #getVos vos}.
         */
        insertVo(
          /**
           * The vo to insert; if empty, nothing is inserted
           */
          oVo: sap.ui.vbm.VoAbstract,
          /**
           * The `0`-based index the vo should be inserted at; for a negative value of `iIndex`, the vo is inserted
           * at position 0; for a value greater than the current size of the aggregation, the vo is inserted at the
           * last position
           */
          iIndex: int
        ): this;
        /**
         * Open Detail window
         */
        openDetailWindow(
          /**
           * Postion for the Detail Window in format "lon;lat;0"
           */
          sPosition: string,
          /**
           * Parameter Objects
           */
          oParams?: {
            /**
             * Caption of the Detail Window
             */
            caption?: string;
          }
        ): void;
        /**
         * Removes all the controls from the aggregation {@link #getClusters clusters}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllClusters(): sap.ui.vbm.ClusterBase[];
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Removes all the controls from the aggregation {@link #getFeatureCollections featureCollections}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllFeatureCollections(): sap.ui.vbm.FeatureCollection[];
        /**
         * Removes all the controls from the aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllGeoJsonLayers(): sap.ui.vbm.GeoJsonLayer[];
        /**
         * Removes all the controls from the aggregation {@link #getResources resources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllResources(): sap.ui.vbm.Resource[];
        /**
         * Removes all the controls from the aggregation {@link #getVos vos}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllVos(): sap.ui.vbm.VoAbstract[];
        /**
         * Removes a cluster from the aggregation {@link #getClusters clusters}.
         */
        removeCluster(
          /**
           * The cluster to remove or its index or id
           */
          vCluster: int | string | sap.ui.vbm.ClusterBase
        ): sap.ui.vbm.ClusterBase;
        /**
         * @deprecated - This aggregation should not longer be used. Its functionality has been replaced by the
         * more generic`geoJsonLayers` aggregation.
         *
         * Removes a featureCollection from the aggregation {@link #getFeatureCollections featureCollections}.
         */
        removeFeatureCollection(
          /**
           * The featureCollection to remove or its index or id
           */
          vFeatureCollection: int | string | sap.ui.vbm.FeatureCollection
        ): sap.ui.vbm.FeatureCollection;
        /**
         * Removes a geoJsonLayer from the aggregation {@link #getGeoJsonLayers geoJsonLayers}.
         */
        removeGeoJsonLayer(
          /**
           * The geoJsonLayer to remove or its index or id
           */
          vGeoJsonLayer: int | string | sap.ui.vbm.GeoJsonLayer
        ): sap.ui.vbm.GeoJsonLayer;
        /**
         * Removes a resource from the aggregation {@link #getResources resources}.
         */
        removeResource(
          /**
           * The resource to remove or its index or id
           */
          vResource: int | string | sap.ui.vbm.Resource
        ): sap.ui.vbm.Resource;
        /**
         * Removes a vo from the aggregation {@link #getVos vos}.
         */
        removeVo(
          /**
           * The vo to remove or its index or id
           */
          vVo: int | string | sap.ui.vbm.VoAbstract
        ): sap.ui.vbm.VoAbstract;
        /**
         * Sets a new value for property {@link #getCenterPosition centerPosition}.
         *
         * Center position of the Map. Format is "<longitude>;<latitude>".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0;0"`.
         */
        setCenterPosition(
          /**
           * New value for property `centerPosition`
           */
          sCenterPosition?: string
        ): this;
        /**
         * @deprecated - This property should not longer be used. Its functionality has been replaced by the `clusters`
         * aggregation.
         *
         * Set clustering definitions.
         */
        setClustering(
          /**
           * Cluster Definition object
           */
          oClustering: object
        ): sap.ui.vbm.GeoMap;
        /**
         * Sets a new value for property {@link #getDisablePan disablePan}.
         *
         * Disable Map Paning. This setting works only upon initialization and cannot be changed later on.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDisablePan(
          /**
           * New value for property `disablePan`
           */
          bDisablePan?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getDisableZoom disableZoom}.
         *
         * Disable Map Zooming. This setting works only upon initialization and cannot be changed later on.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDisableZoom(
          /**
           * New value for property `disableZoom`
           */
          bDisableZoom?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableAnimation enableAnimation}.
         *
         * Enable Animation of Map Zoom. Works in combination of setZoomlevel.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableAnimation(
          /**
           * New value for property `enableAnimation`
           */
          bEnableAnimation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getInitialPosition initialPosition}.
         *
         * Initial position of the Map. Set is only supported on initialization! Format is "<longitude>;<latitude>;0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0;0;0"`.
         */
        setInitialPosition(
          /**
           * New value for property `initialPosition`
           */
          sInitialPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getInitialZoom initialZoom}.
         *
         * Initial zoom. Value needs to be positive whole number. Set is only supported on initialization!
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"2"`.
         */
        setInitialZoom(
          /**
           * New value for property `initialZoom`
           */
          sInitialZoom?: string
        ): this;
        /**
         * Set Tracking Mode for Lasso Selection on/off.
         */
        setLassoSelection(
          /**
           * to start or stop tracking mode
           */
          bSet: boolean
        ): sap.ui.vbm.GeoMap;
        /**
         * Sets the aggregated {@link #getLegend legend}.
         */
        setLegend(
          /**
           * The legend to set
           */
          oLegend: sap.ui.vbm.Legend
        ): this;
        /**
         * Sets a new value for property {@link #getLegendVisible legendVisible}.
         *
         * Toggles the visibility of the legend
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setLegendVisible(
          /**
           * New value for property `legendVisible`
           */
          bLegendVisible?: boolean
        ): this;
        /**
         * Set Map configuration data. Map Configurations contain a set of Map Providers and Map Layer Stacks refering
         * to those providers. The GeoMap property refMapLayerStack defines, which Map Layer Stack becomes visible.
         */
        setMapConfiguration(
          /**
           * Map Configuration object
           */
          oMapConfiguration: {
            /**
             * Array of Map Provider definitions.
             */
            MapProvider: any[];
            /**
             * Array of Map Layer Stacks
             */
            MapLayerStacks: any[];
          }
        ): sap.ui.vbm.GeoMap;
        /**
         * Sets a new value for property {@link #getNavcontrolVisible navcontrolVisible}.
         *
         * Defines the visibility of the navigation control. Only supported on initialization!
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setNavcontrolVisible(
          /**
           * New value for property `navcontrolVisible`
           */
          bNavcontrolVisible?: boolean
        ): this;
        /**
         * Set Tracking Mode for Rectangular Selection on/off.
         */
        setRectangularSelection(
          /**
           * to start or stop tracking mode
           */
          bSet: boolean
        ): sap.ui.vbm.GeoMap;
        /**
         * Set Tracking Mode for Rectangular Zoom on/off.
         */
        setRectZoom(
          /**
           * to start or stop tracking mode
           */
          bSet: boolean
        ): sap.ui.vbm.GeoMap;
        /**
         * Sets a new value for property {@link #getRefMapLayerStack refMapLayerStack}.
         *
         * Name of the map layer stack (provided in mapConfiguration) which is used for map rendering. If not set
         * the layer stack with the name 'Default' is chosen. Property can be changed at runtime to switch between
         * map layer stack.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"Default"`.
         */
        setRefMapLayerStack(
          /**
           * New value for property `refMapLayerStack`
           */
          sRefMapLayerStack?: string
        ): this;
        /**
         * Sets a new value for property {@link #getScaleVisible scaleVisible}.
         *
         * Defines the visibility of the scale. Only supported on initialization!
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setScaleVisible(
          /**
           * New value for property `scaleVisible`
           */
          bScaleVisible?: boolean
        ): this;
        /**
         * Set Visual Frame definition.
         */
        setVisualFrame(
          /**
           * Visual Frame definition object
           */
          oVisFrame: {
            /**
             * Minimal longitude of visual frame
             */
            minLon: float;
            /**
             * Maximal longitude of visual frame
             */
            maxLon: float;
            /**
             * Minimal latitude of visual frame
             */
            minLat: float;
            /**
             * Maximal latitude of visual frame
             */
            maxLat: float;
            /**
             * Minimal Level of Detail for visual frame
             */
            minLOD: float;
            /**
             * Maximal Level of Detail for visual frame
             */
            maxLOD: float;
            /**
             * Maximal fraction [0..1] of minLOD which is acceptable, otherwise minLOD is rounded upwards
             */
            maxFraction: float;
          }
        ): sap.ui.vbm.GeoMap;
        /**
         * Sets a new value for property {@link #getZoomlevel zoomlevel}.
         *
         * Zoomlevel for the Map. Value needs to be positive whole number.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `2`.
         */
        setZoomlevel(
          /**
           * New value for property `zoomlevel`
           */
          iZoomlevel?: int
        ): this;
        /**
         * Zoom to Areas by Id.
         */
        zoomToAreasById(
          /**
           * is an Array of areas that we want to zoom to.
           */
          ui5AreaIds: string[],
          /**
           * is the correction factor, if correlationFactor is set to 1.0 the bounding box points are exactly on the
           * visible boder of the new area
           */
          correlationFactor: float
        ): sap.ui.vbm.GeoMap;
      }
      /**
       * Type specific Visual Object aggregation for HeatPoint instances.
       */
      class Heatmap extends sap.ui.vbm.VoAbstract {
        /**
         * Constructor for a new Heatmap.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$HeatmapSettings
        );
        /**
         * Constructor for a new Heatmap.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$HeatmapSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.HeatPoint
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Heatmap with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAbstract.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Heatmap>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAlphaExponent alphaExponent}.
         *
         * Exponent for the alphaChannel
         *  aE = 1 : alpha Channel remains linear
         *  0 < aE < 1 : (e.g. aE=0.5 "square root") sub linear alpha channeling (lower value colors remain longer
         * visible; range appears wider)
         *  aE > 1 (e.g. aE=2: "squared") above linear alpha channeling ( lower value colors remain shortly visible;
         * range appears chopped)
         *
         *
         * Default value is `'1.0'`.
         */
        getAlphaExponent(): string;
        /**
         * Gets current value of property {@link #getBehavior behavior}.
         *
         * Behavior of the HeatPoint, 0 Density Map, 2: Heat Map, 1: Intermediate.
         *
         * Default value is `'2'`.
         */
        getBehavior(): string;
        /**
         * Gets current value of property {@link #getColorExponent colorExponent}.
         *
         * Exponent for the color
         *  aE = 1 : Linear Gradient
         *  0 < aE < 1 : Sublinear Gradient; i.E. with cE=0.5 point values are square rooted before usage [share
         * of lower value cols will decrease]
         *  aE > 1 : Higher Level Gradient; i.E. with cE=2 point values are squared before usage [share of lower
         * value cols will increase]
         *
         * Default value is `'1.0'`.
         */
        getColorExponent(): string;
        /**
         * Gets current value of property {@link #getGradient gradient}.
         *
         * Gradient Definition. Can be either provided as Ressource - then it is type string.
         *  Or as Array [n0,c0,n1,c1,...,nk,ck] (ni > ni-1; ci respective colors) with an arbitrary number of color
         * stops as in the following
         *  Example: [0,'rgba(0,255,0,1)',220,'rgba(255,255,0,1)',255,'rgba(255,0,0,1)']
         */
        getGradient(): any[];
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * HeatPoint object aggregation
         */
        getItems(): sap.ui.vbm.HeatPoint[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Heatmap.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * Opacity of the heatmap.
         *
         * Default value is `'0.5'`.
         */
        getOpacity(): string;
        /**
         * Gets current value of property {@link #getRadiusScale radiusScale}.
         *
         * Scaling factor for the sample radiuses.
         *
         * Default value is `'1.0'`.
         */
        getRadiusScale(): string;
        /**
         * Gets current value of property {@link #getValueScale valueScale}.
         *
         * Scaling factor for the sample values.
         *
         * Default value is `'1.0'`.
         */
        getValueScale(): string;
        /**
         * Checks for the provided `sap.ui.vbm.HeatPoint` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.HeatPoint
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.HeatPoint,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.HeatPoint[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.HeatPoint
        ): sap.ui.vbm.HeatPoint;
        /**
         * Sets a new value for property {@link #getAlphaExponent alphaExponent}.
         *
         * Exponent for the alphaChannel
         *  aE = 1 : alpha Channel remains linear
         *  0 < aE < 1 : (e.g. aE=0.5 "square root") sub linear alpha channeling (lower value colors remain longer
         * visible; range appears wider)
         *  aE > 1 (e.g. aE=2: "squared") above linear alpha channeling ( lower value colors remain shortly visible;
         * range appears chopped)
         *
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1.0'`.
         */
        setAlphaExponent(
          /**
           * New value for property `alphaExponent`
           */
          sAlphaExponent?: string
        ): this;
        /**
         * Sets a new value for property {@link #getBehavior behavior}.
         *
         * Behavior of the HeatPoint, 0 Density Map, 2: Heat Map, 1: Intermediate.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'2'`.
         */
        setBehavior(
          /**
           * New value for property `behavior`
           */
          sBehavior?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorExponent colorExponent}.
         *
         * Exponent for the color
         *  aE = 1 : Linear Gradient
         *  0 < aE < 1 : Sublinear Gradient; i.E. with cE=0.5 point values are square rooted before usage [share
         * of lower value cols will decrease]
         *  aE > 1 : Higher Level Gradient; i.E. with cE=2 point values are squared before usage [share of lower
         * value cols will increase]
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1.0'`.
         */
        setColorExponent(
          /**
           * New value for property `colorExponent`
           */
          sColorExponent?: string
        ): this;
        /**
         * Sets a new value for property {@link #getGradient gradient}.
         *
         * Gradient Definition. Can be either provided as Ressource - then it is type string.
         *  Or as Array [n0,c0,n1,c1,...,nk,ck] (ni > ni-1; ci respective colors) with an arbitrary number of color
         * stops as in the following
         *  Example: [0,'rgba(0,255,0,1)',220,'rgba(255,255,0,1)',255,'rgba(255,0,0,1)']
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setGradient(
          /**
           * New value for property `gradient`
           */
          sGradient?: any[]
        ): this;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * Opacity of the heatmap.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0.5'`.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          sOpacity?: string
        ): this;
        /**
         * Sets a new value for property {@link #getRadiusScale radiusScale}.
         *
         * Scaling factor for the sample radiuses.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1.0'`.
         */
        setRadiusScale(
          /**
           * New value for property `radiusScale`
           */
          sRadiusScale?: string
        ): this;
        /**
         * Sets a new value for property {@link #getValueScale valueScale}.
         *
         * Scaling factor for the sample values.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1.0'`.
         */
        setValueScale(
          /**
           * New value for property `valueScale`
           */
          sValueScale?: string
        ): this;
      }
      /**
       * Specific Visual Object element for a HeatPoint.
       */
      class HeatPoint extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new HeatPoint.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$HeatPointSettings
        );
        /**
         * Constructor for a new HeatPoint.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$HeatPointSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.HeatPoint with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.HeatPoint>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vbm.HeatPoint.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position of a sample element of the heatmap. Should be bound. The format is "lon;lat;0"
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getRadius radius}.
         *
         * Radius of the sample values. May be bound
         *
         * Default value is `'5'`.
         */
        getRadius(): string;
        /**
         * Gets current value of property {@link #getValue value}.
         *
         * Heat Value of the sample element of the heatmap. May be bound.
         */
        getValue(): string;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position of a sample element of the heatmap. Should be bound. The format is "lon;lat;0"
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getRadius radius}.
         *
         * Radius of the sample values. May be bound
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'5'`.
         */
        setRadius(
          /**
           * New value for property `radius`
           */
          sRadius?: string
        ): this;
        /**
         * Sets a new value for property {@link #getValue value}.
         *
         * Heat Value of the sample element of the heatmap. May be bound.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setValue(
          /**
           * New value for property `value`
           */
          sValue?: string
        ): this;
      }
      /**
       * The Legend is a window in the GeoMap or AnalyticMap control wich can be used to display color/icon-text
       * pairs on a map.
       */
      class Legend extends sap.ui.core.Element {
        /**
         * Constructor for a new Legend.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$LegendSettings
        );
        /**
         * Constructor for a new Legend.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$LegendSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.LegendItem
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Legend`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Legend` itself.
         *
         * The event is raised when there is a click action on a legend.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Legend` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Legend`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Legend` itself.
         *
         * The event is raised when there is a click action on a legend.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Legend` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.Legend`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Legend with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Legend>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Event data object
             */
            data?: object;
            /**
             * The row number where the click occurred
             */
            row?: int;
            /**
             * key modifier Ctrl pressed
             */
            ctrlKey?: boolean;
            /**
             * key modifier Shift pressed
             */
            shiftKey?: boolean;
            /**
             * key modifier Meta pressed
             */
            metaKey?: boolean;
            /**
             * key modifier Alt pressed
             */
            altKey?: boolean;
          }
        ): this;
        /**
         * Gets current value of property {@link #getCaption caption}.
         *
         * The caption of the legend.
         *
         * Default value is `...see text or source`.
         */
        getCaption(): string;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * LegendItem object aggregation
         */
        getItems(): sap.ui.vbm.LegendItem[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Legend.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Checks for the provided `sap.ui.vbm.LegendItem` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.LegendItem
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.LegendItem,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.LegendItem[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.LegendItem
        ): sap.ui.vbm.LegendItem;
        /**
         * Sets a new value for property {@link #getCaption caption}.
         *
         * The caption of the legend.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `...see text or source`.
         */
        setCaption(
          /**
           * New value for property `caption`
           */
          sCaption?: string
        ): this;
      }
      /**
       * Aggregation element for the Legend. A LegendItem consists of marker and an associated text. The marker
       * is either a rectangle in the given color or the given image or a semantic spot type. If no marker but
       * only a text is provided then it is shown in italic letters and can be regarded as a header.
       */
      class LegendItem extends sap.ui.core.Element {
        /**
         * Constructor for a new LegendItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$LegendItemSettings
        );
        /**
         * Constructor for a new LegendItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$LegendItemSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.LegendItem`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.LegendItem` itself.
         *
         * The event is raised when there is a click action on a legend item.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.LegendItem` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.LegendItem`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.LegendItem` itself.
         *
         * The event is raised when there is a click action on a legend item.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.LegendItem` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.LegendItem`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.LegendItem with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.LegendItem>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Event data object
             */
            data?: object;
            /**
             * key modifier Ctrl pressed
             */
            ctrlKey?: boolean;
            /**
             * key modifier Shift pressed
             */
            shiftKey?: boolean;
            /**
             * key modifier Meta pressed
             */
            metaKey?: boolean;
            /**
             * key modifier Alt pressed
             */
            altKey?: boolean;
          }
        ): this;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color of the legend marker.
         *
         * Default value is `empty string`.
         */
        getColor(): string;
        /**
         * Gets current value of property {@link #getImage image}.
         *
         * The image for the legend marker.
         */
        getImage(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.LegendItem.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getSemanticSpotType semanticSpotType}.
         *
         * The semantic spot type for the legend marker.
         */
        getSemanticSpotType(): sap.ui.vbm.SemanticType;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * The text of the legend item.
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color of the legend marker.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getImage image}.
         *
         * The image for the legend marker.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setImage(
          /**
           * New value for property `image`
           */
          sImage?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSemanticSpotType semanticSpotType}.
         *
         * The semantic spot type for the legend marker.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSemanticSpotType(
          /**
           * New value for property `semanticSpotType`
           */
          sSemanticSpotType?: sap.ui.vbm.SemanticType
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * The text of the legend item.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
      }
      /**
       * Specific Visual Object element for a Pie Chart. A Pie is a round chart, which is positioned with
       * its centerpoint at the given position. The size of the pie can be controlled with property scale.
       * The slices of the pie chart are defined by the aggregated PieItem elements. The detail window
       * will open at the center of the pie.
       *  The property hotDeltaColor borrowed from VoBase is applied only to the hot PieItem and not the
       * whole pie.
       */
      class Pie extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Pie.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$PieSettings
        );
        /**
         * Constructor for a new Pie.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$PieSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.PieItem
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Pie with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Pie>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * PieItem object aggregation. A PieItem holds the data for one slice in a Pie.
         */
        getItems(): sap.ui.vbm.PieItem[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Pie.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position of the Pie.
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getScale scale}.
         *
         * The scaling of the Pie. The scale must be a vector "x-Scale;y-Scale;z-Scale", but currently only the
         * x scaling is applied to the Pie.
         */
        getScale(): string;
        /**
         * Checks for the provided `sap.ui.vbm.PieItem` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.PieItem
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.PieItem,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.PieItem[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.PieItem
        ): sap.ui.vbm.PieItem;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position of the Pie.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getScale scale}.
         *
         * The scaling of the Pie. The scale must be a vector "x-Scale;y-Scale;z-Scale", but currently only the
         * x scaling is applied to the Pie.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setScale(
          /**
           * New value for property `scale`
           */
          sScale?: string
        ): this;
      }
      /**
       * Slice element for a Pie Chart.
       */
      class PieItem extends sap.ui.core.Element {
        /**
         * Constructor for a new PieItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$PieItemSettings
        );
        /**
         * Constructor for a new PieItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$PieItemSettings
        );

        /**
         * @deprecated - This event should no longer be used. Click event from Pie and Pies now includes Pie Item
         * index when event occurs.
         *
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.PieItem`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.PieItem` itself.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.PieItem` itself
           */
          oListener?: object
        ): this;
        /**
         * @deprecated - This event should no longer be used. Click event from Pie and Pies now includes Pie Item
         * index when event occurs.
         *
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.PieItem`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.PieItem` itself.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.PieItem` itself
           */
          oListener?: object
        ): this;
        /**
         * @deprecated - This event should no longer be used. Click event from Pie and Pies now includes Pie Item
         * index when event occurs.
         *
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.PieItem`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.PieItem with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.PieItem>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * @deprecated - This event should no longer be used. Click event from Pie and Pies now includes Pie Item
         * index when event occurs.
         *
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color of the Pie Item.
         */
        getColor(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.PieItem.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * The name of the Pie item.
         *
         * Default value is `empty string`.
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getValue value}.
         *
         * The value of the Pie item.
         */
        getValue(): string;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color of the Pie Item.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * The name of the Pie item.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName?: string
        ): this;
        /**
         * Sets a new value for property {@link #getValue value}.
         *
         * The value of the Pie item.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setValue(
          /**
           * New value for property `value`
           */
          sValue?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Pie instances.
       */
      class Pies extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Pies.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$PiesSettings
        );
        /**
         * Constructor for a new Pies.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$PiesSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Pie
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Pies with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Pies>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Pie object aggregation
         */
        getItems(): sap.ui.vbm.Pie[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Pies.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Gets current value of property {@link #getScaleChangeable scaleChangeable}.
         *
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getScaleChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.Pie` in the aggregation {@link #getItems items}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Pie
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Pie,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Pie[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Pie
        ): sap.ui.vbm.Pie;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getScaleChangeable scaleChangeable}.
         *
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setScaleChangeable(
          /**
           * New value for property `scaleChangeable`
           */
          bScaleChangeable?: boolean
        ): this;
      }
      /**
       * Region properties.
       */
      class Region extends sap.ui.core.Element {
        /**
         * Constructor for a new Region.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$RegionSettings
        );
        /**
         * Constructor for a new Region.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$RegionSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Region`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Region` itself.
         *
         * The event is raised when there is a click action on a region.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Region` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Region`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Region` itself.
         *
         * The event is raised when there is a click action on a region.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Region` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Region`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Region` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a region.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Region` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Region`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Region` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a region.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Region` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.Region`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Region`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Region with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Region>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The region code.
             */
            code?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The region code.
             */
            code?: string;
          }
        ): this;
        /**
         * Gets current value of property {@link #getCode code}.
         *
         * The region code.
         */
        getCode(): string;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color, this must be provided in the rgba(r,g,b,a) format.
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Returns Infos for the Region like name, bounding box and midpoint
         */
        getInfo(): object;
        /**
         * Gets current value of property {@link #getLabelArrow labelArrow}.
         *
         * The visual objects label arrow. For left/right/top/bottom aligned labels an additional arrow points to
         * the label's object.
         *
         * Default value is `false`.
         */
        getLabelArrow(): boolean;
        /**
         * Gets current value of property {@link #getLabelBgColor labelBgColor}.
         *
         * Default value is `'RGB(255;255;255)'`.
         */
        getLabelBgColor(): string;
        /**
         * Gets current value of property {@link #getLabelBorderColor labelBorderColor}.
         */
        getLabelBorderColor(): string;
        /**
         * Gets current value of property {@link #getLabelText labelText}.
         */
        getLabelText(): string;
        /**
         * Gets current value of property {@link #getLabelType labelType}.
         *
         * Type for semantic labels. A given semantic type will overrule color settings and add an icon.
         *
         * Default value is `None`.
         */
        getLabelType(): sap.ui.vbm.SemanticType;
        /**
         * Returns a metadata object for class sap.ui.vbm.Region.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getSelect select}.
         *
         * set to true if the element is selected
         *
         * Default value is `false`.
         */
        getSelect(): boolean;
        /**
         * Sets a new value for property {@link #getCode code}.
         *
         * The region code.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCode(
          /**
           * New value for property `code`
           */
          sCode?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color, this must be provided in the rgba(r,g,b,a) format.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getLabelArrow labelArrow}.
         *
         * The visual objects label arrow. For left/right/top/bottom aligned labels an additional arrow points to
         * the label's object.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setLabelArrow(
          /**
           * New value for property `labelArrow`
           */
          bLabelArrow?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getLabelBgColor labelBgColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(255;255;255)'`.
         */
        setLabelBgColor(
          /**
           * New value for property `labelBgColor`
           */
          sLabelBgColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelBorderColor labelBorderColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLabelBorderColor(
          /**
           * New value for property `labelBorderColor`
           */
          sLabelBorderColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelText labelText}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLabelText(
          /**
           * New value for property `labelText`
           */
          sLabelText?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelType labelType}.
         *
         * Type for semantic labels. A given semantic type will overrule color settings and add an icon.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `None`.
         */
        setLabelType(
          /**
           * New value for property `labelType`
           */
          sLabelType?: sap.ui.vbm.SemanticType
        ): this;
        /**
         * Sets a new value for property {@link #getSelect select}.
         *
         * set to true if the element is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelect(
          /**
           * New value for property `select`
           */
          bSelect?: boolean
        ): this;
      }
      /**
       * A resource is a Base64 encoded representation of an image binary that can be referenced by name in e.g.
       * a Spot element. When images are specified as a string resource it is guaranteed that the control
       * can access the bits in the image. If just a URL to the resource is given it is loaded and converted to
       * a Base64 encoded binary. This happens asynchronously and it may require several re-renderings of the
       * control until all resource show up correctly.
       */
      class Resource extends sap.ui.core.Element {
        /**
         * Constructor for a new Resource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ResourceSettings
        );
        /**
         * Constructor for a new Resource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$ResourceSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.Resource with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Resource>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vbm.Resource.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * Name of the resource. The name should be always used when a resource is referenced.
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getSrc src}.
         *
         * URL to an image. It is important that the image data is readable fom the visual business control. Therefore
         * e.g. images coming from a local drive or cross domains are not allowed. The preferred way is to use the
         * Base64 encoded data provided using the value property.
         *
         * Default value is `empty string`.
         */
        getSrc(): string;
        /**
         * Gets current value of property {@link #getValue value}.
         *
         * Value of the resource. Base64 endode binary.
         */
        getValue(): string;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * Name of the resource. The name should be always used when a resource is referenced.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSrc src}.
         *
         * URL to an image. It is important that the image data is readable fom the visual business control. Therefore
         * e.g. images coming from a local drive or cross domains are not allowed. The preferred way is to use the
         * Base64 encoded data provided using the value property.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setSrc(
          /**
           * New value for property `src`
           */
          sSrc?: string
        ): this;
        /**
         * Sets a new value for property {@link #getValue value}.
         *
         * Value of the resource. Base64 endode binary.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setValue(
          /**
           * New value for property `value`
           */
          sValue?: string
        ): this;
      }
      /**
       * Specific Visual Object element for a Route. A Route is a polyline, which is given as a list of
       * geo-coordinates. In order to indicate direction an arrow head can be added at start and end. Further
       * it is possible to have a dot at each point of the coordinate list.
       *  Since the actual length of a route depends on the zoom level it might be only partly visible. Thus detail
       * windows will be dynamically positioned in the middle of the visible route part.
       *  A Route supports GeoMap internal drag'n drop with fine grained control on matching drag sources and
       * drop targets. A drag'n drop operation is possible if any type in the drag source aggregation of the dragged
       * visual object matches a type in the drop target aggregation of the target vo. Drag source and drop target
       * types defined on element level apply only for a single element instance, except the element is used as
       * template.
       */
      class Route extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Route.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$RouteSettings
        );
        /**
         * Constructor for a new Route.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$RouteSettings
        );

        /**
         * Adds some dragSource to the aggregation {@link #getDragSource dragSource}.
         */
        addDragSource(
          /**
           * The dragSource to add; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource
        ): this;
        /**
         * Adds some dropTarget to the aggregation {@link #getDropTarget dropTarget}.
         */
        addDropTarget(
          /**
           * The dropTarget to add; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): this;
        /**
         * Destroys all the dragSource in the aggregation {@link #getDragSource dragSource}.
         */
        destroyDragSource(): this;
        /**
         * Destroys all the dropTarget in the aggregation {@link #getDropTarget dropTarget}.
         */
        destroyDropTarget(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Route with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Route>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The color of the route.
         *
         * Default value is `'RGB(0;0;0)'`.
         */
        getColor(): string;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the route.
         */
        getColorBorder(): string;
        /**
         * Gets current value of property {@link #getDirectionIndicator directionIndicator}.
         *
         * Set to true if intermediate triangles along the route should show the direction only applicable if arrow
         * head is defined ( start and/or end ) it is not recommended to use line dots in addition because the direction
         * indicators generate additional line points at their head and base positions
         *
         * Default value is `false`.
         */
        getDirectionIndicator(): boolean;
        /**
         * Gets current value of property {@link #getDotbordercolor dotbordercolor}.
         *
         * The border color of the line dots of a route.
         *
         * Default value is `'RGB(0;0;0)'`.
         */
        getDotbordercolor(): string;
        /**
         * Gets current value of property {@link #getDotcolor dotcolor}.
         *
         * The color for the line dots of a route.
         *
         * Default value is `'RGB(0;0;0)'`.
         */
        getDotcolor(): string;
        /**
         * Gets current value of property {@link #getDotwidth dotwidth}.
         *
         * The diameter of a dot in a route.
         *
         * Default value is `'0'`.
         */
        getDotwidth(): string;
        /**
         * Gets content of aggregation {@link #getDragSource dragSource}.
         *
         * DragSource aggregation
         */
        getDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Gets content of aggregation {@link #getDropTarget dropTarget}.
         *
         * DropTarget aggregation
         */
        getDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Gets current value of property {@link #getEnd end}.
         *
         * The end point type of the route.
         * 	0: no endpoint 1: arrow as endpoint
         *
         * Default value is `'0'`.
         */
        getEnd(): string;
        /**
         * Gets current value of property {@link #getLineDash lineDash}.
         *
         * Defines the dashing style of the route using an array. The first value gives the length of the stroke
         * and the second the length of the gap. Thus "1;1", would result in a doted line. However, strokes are
         * painted with rounded endings. Thus the actual stroke length depends also on the line width. As a sample
         * a stroke of 1 pixel length and a line width of 6 will result in at least 6 pixels total length. In that
         * case the line dashing should be set to "1;6" for an equal length of stroke and gap!
         *  The line dashing array can be extended to achive more complex pattern, e.g. "1;1;5;2" and so on.
         */
        getLineDash(): string;
        /**
         * Gets current value of property {@link #getLinewidth linewidth}.
         *
         * The width of the route line. With width 0 no line is drawn.
         *
         * Default value is `'3'`.
         */
        getLinewidth(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Route.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position array of the route. The format is "lon0;lat0;0;...lonN;latN;0".
         */
        getPosition(): string;
        /**
         * @EXPERIMENTAL (since 1.32.0)
         *
         * Gets current value of property {@link #getRoutetype routetype}.
         *
         * Defines the type of the route, default is 'Straight'. Other types are 'Geodesic' which show the shortest
         * path between two points, e.g. flightroutes
         *
         * Default value is `'Straight'`.
         */
        getRoutetype(): sap.ui.vbm.RouteType;
        /**
         * Gets current value of property {@link #getStart start}.
         *
         * The start point type of the route.
         * 	0: no startpoint 1: arrow head as startpoint
         *
         * Default value is `'0'`.
         */
        getStart(): string;
        /**
         * Checks for the provided `sap.ui.vbm.DragSource` in the aggregation {@link #getDragSource dragSource}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDragSource(
          /**
           * The dragSource whose index is looked for
           */
          oDragSource: sap.ui.vbm.DragSource
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.DropTarget` in the aggregation {@link #getDropTarget dropTarget}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDropTarget(
          /**
           * The dropTarget whose index is looked for
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): int;
        /**
         * Inserts a dragSource into the aggregation {@link #getDragSource dragSource}.
         */
        insertDragSource(
          /**
           * The dragSource to insert; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource,
          /**
           * The `0`-based index the dragSource should be inserted at; for a negative value of `iIndex`, the dragSource
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dragSource
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a dropTarget into the aggregation {@link #getDropTarget dropTarget}.
         */
        insertDropTarget(
          /**
           * The dropTarget to insert; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget,
          /**
           * The `0`-based index the dropTarget should be inserted at; for a negative value of `iIndex`, the dropTarget
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dropTarget
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getDragSource dragSource}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Removes all the controls from the aggregation {@link #getDropTarget dropTarget}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Removes a dragSource from the aggregation {@link #getDragSource dragSource}.
         */
        removeDragSource(
          /**
           * The dragSource to remove or its index or id
           */
          vDragSource: int | string | sap.ui.vbm.DragSource
        ): sap.ui.vbm.DragSource;
        /**
         * Removes a dropTarget from the aggregation {@link #getDropTarget dropTarget}.
         */
        removeDropTarget(
          /**
           * The dropTarget to remove or its index or id
           */
          vDropTarget: int | string | sap.ui.vbm.DropTarget
        ): sap.ui.vbm.DropTarget;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The color of the route.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(0;0;0)'`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the route.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder: string
        ): this;
        /**
         * Sets a new value for property {@link #getDirectionIndicator directionIndicator}.
         *
         * Set to true if intermediate triangles along the route should show the direction only applicable if arrow
         * head is defined ( start and/or end ) it is not recommended to use line dots in addition because the direction
         * indicators generate additional line points at their head and base positions
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDirectionIndicator(
          /**
           * New value for property `directionIndicator`
           */
          bDirectionIndicator?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getDotbordercolor dotbordercolor}.
         *
         * The border color of the line dots of a route.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(0;0;0)'`.
         */
        setDotbordercolor(
          /**
           * New value for property `dotbordercolor`
           */
          sDotbordercolor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getDotcolor dotcolor}.
         *
         * The color for the line dots of a route.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(0;0;0)'`.
         */
        setDotcolor(
          /**
           * New value for property `dotcolor`
           */
          sDotcolor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getDotwidth dotwidth}.
         *
         * The diameter of a dot in a route.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0'`.
         */
        setDotwidth(
          /**
           * New value for property `dotwidth`
           */
          sDotwidth?: string
        ): this;
        /**
         * Sets a new value for property {@link #getEnd end}.
         *
         * The end point type of the route.
         * 	0: no endpoint 1: arrow as endpoint
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0'`.
         */
        setEnd(
          /**
           * New value for property `end`
           */
          sEnd?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLineDash lineDash}.
         *
         * Defines the dashing style of the route using an array. The first value gives the length of the stroke
         * and the second the length of the gap. Thus "1;1", would result in a doted line. However, strokes are
         * painted with rounded endings. Thus the actual stroke length depends also on the line width. As a sample
         * a stroke of 1 pixel length and a line width of 6 will result in at least 6 pixels total length. In that
         * case the line dashing should be set to "1;6" for an equal length of stroke and gap!
         *  The line dashing array can be extended to achive more complex pattern, e.g. "1;1;5;2" and so on.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLineDash(
          /**
           * New value for property `lineDash`
           */
          sLineDash: string
        ): this;
        /**
         * Sets a new value for property {@link #getLinewidth linewidth}.
         *
         * The width of the route line. With width 0 no line is drawn.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'3'`.
         */
        setLinewidth(
          /**
           * New value for property `linewidth`
           */
          sLinewidth?: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position array of the route. The format is "lon0;lat0;0;...lonN;latN;0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * @EXPERIMENTAL (since 1.32.0)
         *
         * Sets a new value for property {@link #getRoutetype routetype}.
         *
         * Defines the type of the route, default is 'Straight'. Other types are 'Geodesic' which show the shortest
         * path between two points, e.g. flightroutes
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'Straight'`.
         */
        setRoutetype(
          /**
           * New value for property `routetype`
           */
          sRoutetype?: sap.ui.vbm.RouteType
        ): this;
        /**
         * Sets a new value for property {@link #getStart start}.
         *
         * The start point type of the route.
         * 	0: no startpoint 1: arrow head as startpoint
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0'`.
         */
        setStart(
          /**
           * New value for property `start`
           */
          sStart?: string
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Route elements.
       *  Routes support GeoMap internal drag'n drop with fine grained control on matching drag sources and drop
       * targets. A drag'n drop operation is possible if any type in the drag source aggregation of the dragged
       * visual object matches a type in the drop target aggregation of the target vo. If drag source and drop
       * target types are defined on aggregation level they apply for all aggregated elements.
       */
      class Routes extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Routes.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$RoutesSettings
        );
        /**
         * Constructor for a new Routes.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$RoutesSettings
        );

        /**
         * Adds some dragSource to the aggregation {@link #getDragSource dragSource}.
         */
        addDragSource(
          /**
           * The dragSource to add; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource
        ): this;
        /**
         * Adds some dropTarget to the aggregation {@link #getDropTarget dropTarget}.
         */
        addDropTarget(
          /**
           * The dropTarget to add; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): this;
        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Route
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Routes`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Routes` itself.
         *
         * The event is raised when there is a click action on a Route.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Routes` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.Routes`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Routes` itself.
         *
         * The event is raised when there is a click action on a Route.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Routes` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Routes`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Routes` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a Route.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Routes` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Routes`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Routes` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a Route.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Routes` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.Routes`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Routes` itself.
         *
         * The event is raised when something is dropped on a Route.
         */
        attachDrop(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Routes` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.Routes`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Routes` itself.
         *
         * The event is raised when something is dropped on a Route.
         */
        attachDrop(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Routes` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the dragSource in the aggregation {@link #getDragSource dragSource}.
         */
        destroyDragSource(): this;
        /**
         * Destroys all the dropTarget in the aggregation {@link #getDropTarget dropTarget}.
         */
        destroyDropTarget(): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.Routes`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.Routes`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:drop drop} event of this `sap.ui.vbm.Routes`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDrop(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Routes with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Routes>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:drop drop} to attached listeners.
         */
        fireDrop(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Gets content of aggregation {@link #getDragSource dragSource}.
         *
         * DragSource aggregation
         */
        getDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Gets content of aggregation {@link #getDropTarget dropTarget}.
         *
         * DropTarget aggregation
         */
        getDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Route object aggregation
         */
        getItems(): sap.ui.vbm.Route[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Routes.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.DragSource` in the aggregation {@link #getDragSource dragSource}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDragSource(
          /**
           * The dragSource whose index is looked for
           */
          oDragSource: sap.ui.vbm.DragSource
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.DropTarget` in the aggregation {@link #getDropTarget dropTarget}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDropTarget(
          /**
           * The dropTarget whose index is looked for
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.Route` in the aggregation {@link #getItems items}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Route
        ): int;
        /**
         * Inserts a dragSource into the aggregation {@link #getDragSource dragSource}.
         */
        insertDragSource(
          /**
           * The dragSource to insert; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource,
          /**
           * The `0`-based index the dragSource should be inserted at; for a negative value of `iIndex`, the dragSource
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dragSource
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a dropTarget into the aggregation {@link #getDropTarget dropTarget}.
         */
        insertDropTarget(
          /**
           * The dropTarget to insert; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget,
          /**
           * The `0`-based index the dropTarget should be inserted at; for a negative value of `iIndex`, the dropTarget
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dropTarget
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Route,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getDragSource dragSource}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Removes all the controls from the aggregation {@link #getDropTarget dropTarget}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Route[];
        /**
         * Removes a dragSource from the aggregation {@link #getDragSource dragSource}.
         */
        removeDragSource(
          /**
           * The dragSource to remove or its index or id
           */
          vDragSource: int | string | sap.ui.vbm.DragSource
        ): sap.ui.vbm.DragSource;
        /**
         * Removes a dropTarget from the aggregation {@link #getDropTarget dropTarget}.
         */
        removeDropTarget(
          /**
           * The dropTarget to remove or its index or id
           */
          vDropTarget: int | string | sap.ui.vbm.DropTarget
        ): sap.ui.vbm.DropTarget;
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Route
        ): sap.ui.vbm.Route;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
      }
      /**
       * Specific Visual Object element for a Spot. A Spot is actually an image drawn at the given position.
       * There are two modes for using spots:
       * 	 - A controlled mode by providing a spot type. In this mode many properties for the spot are automatically
       * 			set by programmed defaults according to the Fiori guidelines.
       * 	 - A freestyle mode, providing the full control on colors and layout.  Beside the visualization
       * 			with an image a spot can have an icon or text, which can be controlled and positioned using
       * 			the content properties.
       *  A Spot supports GeoMap internal drag'n drop with fine grained control on matching drag sources and drop
       * targets. A drag'n drop operation is possible if any type in the drag source aggregation of the dragged
       * visual object matches a type in the drop target aggregation of the target vo. Drag source and drop target
       * types defined on element level apply only for a single element instance, except the element is used as
       * template.
       */
      class Spot extends sap.ui.vbm.VoBase {
        /**
         * Constructor for a new Spot.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$SpotSettings
        );
        /**
         * Constructor for a new Spot.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$SpotSettings
        );

        /**
         * Adds some dragSource to the aggregation {@link #getDragSource dragSource}.
         */
        addDragSource(
          /**
           * The dragSource to add; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource
        ): this;
        /**
         * Adds some dropTarget to the aggregation {@link #getDropTarget dropTarget}.
         */
        addDropTarget(
          /**
           * The dropTarget to add; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): this;
        /**
         * Destroys all the dragSource in the aggregation {@link #getDragSource dragSource}.
         */
        destroyDragSource(): this;
        /**
         * Destroys all the dropTarget in the aggregation {@link #getDropTarget dropTarget}.
         */
        destroyDropTarget(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Spot with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Spot>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAlignment alignment}.
         *
         * Alignment of the spot to its position:
         * 	0: center 1: top center 2: top right 3: center right 4: bottom right 5: bottom center
         * 6: bottom left 7: center left 8: top left
         *
         * Default value is `'5'`.
         */
        getAlignment(): string;
        /**
         * Gets current value of property {@link #getContentColor contentColor}.
         *
         * The color of the content ( icon or text ).
         */
        getContentColor(): string;
        /**
         * Gets current value of property {@link #getContentFont contentFont}.
         *
         * The font of the spot's text. If icon is used then the font is automatically set to"SAP-icons".
         *
         * Default value is `'arial'`.
         */
        getContentFont(): string;
        /**
         * Gets current value of property {@link #getContentOffset contentOffset}.
         *
         * The offset from the center of the image where to place the content ( text or icon ) in x;y- direction
         *
         * Default value is `'0;0'`.
         */
        getContentOffset(): string;
        /**
         * Gets current value of property {@link #getContentSize contentSize}.
         *
         * The font size to be used for text or icon
         */
        getContentSize(): string;
        /**
         * Gets content of aggregation {@link #getDragSource dragSource}.
         *
         * DragSource aggregation
         */
        getDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Gets content of aggregation {@link #getDropTarget dropTarget}.
         *
         * DropTarget aggregation
         */
        getDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * The icon to be rendered on the spot. Note that either text or icon may be displayed ( not both together
         * ). Use the CharCode-Id of SAPUI5-Icons (e.g.: "\ue146")
         */
        getIcon(): string;
        /**
         * Gets current value of property {@link #getImage image}.
         *
         * The image for the spot. This must be a reference to a resource.
         */
        getImage(): string;
        /**
         * Gets current value of property {@link #getImageSelected imageSelected}.
         *
         * The image for the spot when selected. This must be a reference to a resource.
         */
        getImageSelected(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.Spot.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position of the spot. The format is "lon;lat;0"
         *
         * Default value is `'0;0;0'`.
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getScale scale}.
         *
         * The scale of the spot. The format is "x-Scale;y-Scale;z-Scale". The z-Scale is curretly ignored.
         *
         * Default value is `'1;1;1'`.
         */
        getScale(): string;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * The text that is displayed on the spot. The text should not exceed a few characters. Note that either
         * text or icon may be displayed ( not both together ).
         */
        getText(): string;
        /**
         * Gets current value of property {@link #getType type}.
         *
         * Spot type for semantic spots. A given semantic type will overrule settings for image, scale, and content.
         */
        getType(): sap.ui.vbm.SemanticType;
        /**
         * Checks for the provided `sap.ui.vbm.DragSource` in the aggregation {@link #getDragSource dragSource}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDragSource(
          /**
           * The dragSource whose index is looked for
           */
          oDragSource: sap.ui.vbm.DragSource
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.DropTarget` in the aggregation {@link #getDropTarget dropTarget}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDropTarget(
          /**
           * The dropTarget whose index is looked for
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): int;
        /**
         * Inserts a dragSource into the aggregation {@link #getDragSource dragSource}.
         */
        insertDragSource(
          /**
           * The dragSource to insert; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource,
          /**
           * The `0`-based index the dragSource should be inserted at; for a negative value of `iIndex`, the dragSource
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dragSource
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a dropTarget into the aggregation {@link #getDropTarget dropTarget}.
         */
        insertDropTarget(
          /**
           * The dropTarget to insert; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget,
          /**
           * The `0`-based index the dropTarget should be inserted at; for a negative value of `iIndex`, the dropTarget
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dropTarget
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getDragSource dragSource}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Removes all the controls from the aggregation {@link #getDropTarget dropTarget}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Removes a dragSource from the aggregation {@link #getDragSource dragSource}.
         */
        removeDragSource(
          /**
           * The dragSource to remove or its index or id
           */
          vDragSource: int | string | sap.ui.vbm.DragSource
        ): sap.ui.vbm.DragSource;
        /**
         * Removes a dropTarget from the aggregation {@link #getDropTarget dropTarget}.
         */
        removeDropTarget(
          /**
           * The dropTarget to remove or its index or id
           */
          vDropTarget: int | string | sap.ui.vbm.DropTarget
        ): sap.ui.vbm.DropTarget;
        /**
         * Sets a new value for property {@link #getAlignment alignment}.
         *
         * Alignment of the spot to its position:
         * 	0: center 1: top center 2: top right 3: center right 4: bottom right 5: bottom center
         * 6: bottom left 7: center left 8: top left
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'5'`.
         */
        setAlignment(
          /**
           * New value for property `alignment`
           */
          sAlignment?: string
        ): this;
        /**
         * Sets a new value for property {@link #getContentColor contentColor}.
         *
         * The color of the content ( icon or text ).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setContentColor(
          /**
           * New value for property `contentColor`
           */
          sContentColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getContentFont contentFont}.
         *
         * The font of the spot's text. If icon is used then the font is automatically set to"SAP-icons".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'arial'`.
         */
        setContentFont(
          /**
           * New value for property `contentFont`
           */
          sContentFont?: string
        ): this;
        /**
         * Sets a new value for property {@link #getContentOffset contentOffset}.
         *
         * The offset from the center of the image where to place the content ( text or icon ) in x;y- direction
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0;0'`.
         */
        setContentOffset(
          /**
           * New value for property `contentOffset`
           */
          sContentOffset?: string
        ): this;
        /**
         * Sets a new value for property {@link #getContentSize contentSize}.
         *
         * The font size to be used for text or icon
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setContentSize(
          /**
           * New value for property `contentSize`
           */
          sContentSize?: string
        ): this;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * The icon to be rendered on the spot. Note that either text or icon may be displayed ( not both together
         * ). Use the CharCode-Id of SAPUI5-Icons (e.g.: "\ue146")
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon?: string
        ): this;
        /**
         * Sets a new value for property {@link #getImage image}.
         *
         * The image for the spot. This must be a reference to a resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setImage(
          /**
           * New value for property `image`
           */
          sImage?: string
        ): this;
        /**
         * Sets a new value for property {@link #getImageSelected imageSelected}.
         *
         * The image for the spot when selected. This must be a reference to a resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setImageSelected(
          /**
           * New value for property `imageSelected`
           */
          sImageSelected?: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position of the spot. The format is "lon;lat;0"
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'0;0;0'`.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getScale scale}.
         *
         * The scale of the spot. The format is "x-Scale;y-Scale;z-Scale". The z-Scale is curretly ignored.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1;1;1'`.
         */
        setScale(
          /**
           * New value for property `scale`
           */
          sScale?: string
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * The text that is displayed on the spot. The text should not exceed a few characters. Note that either
         * text or icon may be displayed ( not both together ).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
        /**
         * Sets a new value for property {@link #getType type}.
         *
         * Spot type for semantic spots. A given semantic type will overrule settings for image, scale, and content.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setType(
          /**
           * New value for property `type`
           */
          sType?: sap.ui.vbm.SemanticType
        ): this;
      }
      /**
       * Type specific Visual Object aggregation for Spot elements.
       *  Spots support GeoMap internal drag'n drop with fine grained control on matching drag sources and drop
       * targets. A drag'n drop operation is possible if any type in the drag source aggregation of the dragged
       * visual object matches a type in the drop target aggregation of the target vo. If drag source and drop
       * target types are defined on aggregation level they apply for all aggregated elements.
       */
      class Spots extends sap.ui.vbm.VoAggregation {
        /**
         * Constructor for a new Spots.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$SpotsSettings
        );
        /**
         * Constructor for a new Spots.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$SpotsSettings
        );

        /**
         * Adds some dragSource to the aggregation {@link #getDragSource dragSource}.
         */
        addDragSource(
          /**
           * The dragSource to add; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource
        ): this;
        /**
         * Adds some dropTarget to the aggregation {@link #getDropTarget dropTarget}.
         */
        addDropTarget(
          /**
           * The dropTarget to add; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): this;
        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Spot
        ): this;
        /**
         * Destroys all the dragSource in the aggregation {@link #getDragSource dragSource}.
         */
        destroyDragSource(): this;
        /**
         * Destroys all the dropTarget in the aggregation {@link #getDropTarget dropTarget}.
         */
        destroyDropTarget(): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Spots with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAggregation.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Spots>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getDragSource dragSource}.
         *
         * DragSource aggregation
         */
        getDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Gets content of aggregation {@link #getDropTarget dropTarget}.
         *
         * DropTarget aggregation
         */
        getDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * spot object aggregation
         */
        getItems(): sap.ui.vbm.Spot[];
        /**
         * Returns a metadata object for class sap.ui.vbm.Spots.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getPosChangeable(): boolean;
        /**
         * Gets current value of property {@link #getScaleChangeable scaleChangeable}.
         *
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * Default value is `true`.
         */
        getScaleChangeable(): boolean;
        /**
         * Checks for the provided `sap.ui.vbm.DragSource` in the aggregation {@link #getDragSource dragSource}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDragSource(
          /**
           * The dragSource whose index is looked for
           */
          oDragSource: sap.ui.vbm.DragSource
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.DropTarget` in the aggregation {@link #getDropTarget dropTarget}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfDropTarget(
          /**
           * The dropTarget whose index is looked for
           */
          oDropTarget: sap.ui.vbm.DropTarget
        ): int;
        /**
         * Checks for the provided `sap.ui.vbm.Spot` in the aggregation {@link #getItems items}. and returns its
         * index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.ui.vbm.Spot
        ): int;
        /**
         * Inserts a dragSource into the aggregation {@link #getDragSource dragSource}.
         */
        insertDragSource(
          /**
           * The dragSource to insert; if empty, nothing is inserted
           */
          oDragSource: sap.ui.vbm.DragSource,
          /**
           * The `0`-based index the dragSource should be inserted at; for a negative value of `iIndex`, the dragSource
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dragSource
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a dropTarget into the aggregation {@link #getDropTarget dropTarget}.
         */
        insertDropTarget(
          /**
           * The dropTarget to insert; if empty, nothing is inserted
           */
          oDropTarget: sap.ui.vbm.DropTarget,
          /**
           * The `0`-based index the dropTarget should be inserted at; for a negative value of `iIndex`, the dropTarget
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dropTarget
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.ui.vbm.Spot,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getDragSource dragSource}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDragSource(): sap.ui.vbm.DragSource[];
        /**
         * Removes all the controls from the aggregation {@link #getDropTarget dropTarget}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDropTarget(): sap.ui.vbm.DropTarget[];
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.ui.vbm.Spot[];
        /**
         * Removes a dragSource from the aggregation {@link #getDragSource dragSource}.
         */
        removeDragSource(
          /**
           * The dragSource to remove or its index or id
           */
          vDragSource: int | string | sap.ui.vbm.DragSource
        ): sap.ui.vbm.DragSource;
        /**
         * Removes a dropTarget from the aggregation {@link #getDropTarget dropTarget}.
         */
        removeDropTarget(
          /**
           * The dropTarget to remove or its index or id
           */
          vDropTarget: int | string | sap.ui.vbm.DropTarget
        ): sap.ui.vbm.DropTarget;
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.ui.vbm.Spot
        ): sap.ui.vbm.Spot;
        /**
         * Sets a new value for property {@link #getPosChangeable posChangeable}.
         *
         * Set to true if position may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setPosChangeable(
          /**
           * New value for property `posChangeable`
           */
          bPosChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getScaleChangeable scaleChangeable}.
         *
         * Set to true if scale may be changed at runtime. The actual changeability is control on each aggregated
         * element with property changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setScaleChangeable(
          /**
           * New value for property `scaleChangeable`
           */
          bScaleChangeable?: boolean
        ): this;
      }
      /**
       * The VBI control. This is the Visual Business base control, which is mainly intended to communicate directly
       * with the Visual Business Backend API in a proprietary JSON format. This control should not be used directly
       * in a client side application. For this the control extension sap.ui.vbm.GeoMap
       * is recommended.
       *  The main or high level API of the VBI control is made of
       * 	 - method load for sending JSON to the control for processing, and
       * 	 - event submit returning a result JSON as parameter data containing actual event information
       * 			and changed data.  Further the high level API provides the thumbnail support.
       *  Additionally the control offers a low level API made of several events, like render, zoom, move and
       * so on, which allow to render application specific content directly on the controls canvas.
       */
      class VBI extends sap.ui.core.Control {
        /**
         * Constructor for a new VBI.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VBISettings
        );
        /**
         * Constructor for a new VBI.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VBISettings
        );

        /**
         * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
         */
        addAriaDescribedBy(
          /**
           * The ariaDescribedBy to add; if empty, nothing is inserted
           */
          vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control
        ): this;
        /**
         * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
         */
        addAriaLabelledBy(
          /**
           * The ariaLabelledBy to add; if empty, nothing is inserted
           */
          vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
        ): this;
        /**
         * Add dependant child control for rendering.
         */
        addRenderItem(
          /**
           * Child control to render
           */
          oControl: object,
          /**
           * ID of DOM element the child to append to
           */
          targetElemId: string
        ): void;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:changeTrackingMode changeTrackingMode} event
         * of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. Tracking mode is set or reset. This function is not supported in plugin mode.
         */
        attachChangeTrackingMode(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:changeTrackingMode changeTrackingMode} event
         * of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. Tracking mode is set or reset. This function is not supported in plugin mode.
         */
        attachChangeTrackingMode(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:closeWindow closeWindow} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised before a Visual Business window is closed. This function is not supported in plugin
         * mode.
         */
        attachCloseWindow(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:closeWindow closeWindow} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised before a Visual Business window is closed. This function is not supported in plugin
         * mode.
         */
        attachCloseWindow(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:containerCreated containerCreated} event of
         * this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised when a Visual Business container VO instance is created. It is intended to be used
         * to place arbitrary content in e.g. other controls. This event is not supported in plugin mode.
         */
        attachContainerCreated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:containerCreated containerCreated} event of
         * this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised when a Visual Business container VO instance is created. It is intended to be used
         * to place arbitrary content in e.g. other controls. This event is not supported in plugin mode.
         */
        attachContainerCreated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:containerDestroyed containerDestroyed} event
         * of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised before a Visual Business container VO instance is destroyed. This function is not
         * supported in plugin mode.
         */
        attachContainerDestroyed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:containerDestroyed containerDestroyed} event
         * of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised before a Visual Business container VO instance is destroyed. This function is not
         * supported in plugin mode.
         */
        attachContainerDestroyed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:move move} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. The canvas was moved. This function is not supported in plugin mode.
         */
        attachMove(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:move move} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. The canvas was moved. This function is not supported in plugin mode.
         */
        attachMove(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:openWindow openWindow} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised before a Visual Business window is opened. It is intended to be used to place arbitrary
         * content in e.g. a Detail Window. This event is not supported in plugin mode.
         */
        attachOpenWindow(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:openWindow openWindow} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * The event is raised before a Visual Business window is opened. It is intended to be used to place arbitrary
         * content in e.g. a Detail Window. This event is not supported in plugin mode.
         */
        attachOpenWindow(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:render render} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. Rendering of the canvas content is reqested. This event can be used to do custom rendering
         * into the Visual Business overlay canvas. This function is not supported in plugin mode.
         */
        attachRender(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:render render} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. Rendering of the canvas content is reqested. This event can be used to do custom rendering
         * into the Visual Business overlay canvas. This function is not supported in plugin mode.
         */
        attachRender(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * High level API. Submit event is raised.
         */
        attachSubmit(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:submit submit} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * High level API. Submit event is raised.
         */
        attachSubmit(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:thumbnailClick thumbnailClick} event of this
         * `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * High level API. ThumbnailClick event is raised.
         */
        attachThumbnailClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:thumbnailClick thumbnailClick} event of this
         * `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * High level API. ThumbnailClick event is raised.
         */
        attachThumbnailClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. The canvas is zoomed. This function is not supported in plugin mode.
         */
        attachZoom(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vbm.VBI`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VBI` itself.
         *
         * Low level API. The canvas is zoomed. This function is not supported in plugin mode.
         */
        attachZoom(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VBI` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:changeTrackingMode changeTrackingMode} event
         * of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachChangeTrackingMode(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:closeWindow closeWindow} event of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCloseWindow(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:containerCreated containerCreated} event of
         * this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContainerCreated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:containerDestroyed containerDestroyed} event
         * of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContainerDestroyed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:move move} event of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachMove(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:openWindow openWindow} event of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOpenWindow(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:render render} event of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRender(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:submit submit} event of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSubmit(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:thumbnailClick thumbnailClick} event of this
         * `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachThumbnailClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:zoom zoom} event of this `sap.ui.vbm.VBI`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachZoom(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.VBI with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.VBI>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:changeTrackingMode changeTrackingMode} to attached listeners.
         */
        fireChangeTrackingMode(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * tracking mode to set or reset
             */
            mode?: int;
            /**
             * set or reset the mode
             */
            bSet?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:closeWindow closeWindow} to attached listeners.
         */
        fireCloseWindow(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * DomRef of placeholder Div for content.
             */
            contentarea?: object;
            /**
             * ID of the window that is closed.
             */
            id?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:containerCreated containerCreated} to attached listeners.
         */
        fireContainerCreated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * DomRef of placeholder Div to render into.
             */
            contentarea?: object;
            /**
             * ID of the container that was created.
             */
            id?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:containerDestroyed containerDestroyed} to attached listeners.
         */
        fireContainerDestroyed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * DomRef of placeholder Div of content.
             */
            contentarea?: object;
            /**
             * ID of the container that is destroyed.
             */
            id?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:move move} to attached listeners.
         */
        fireMove(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Canvas object to render into.
             */
            canvas?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:openWindow openWindow} to attached listeners.
         */
        fireOpenWindow(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * DomRef of placeholder Div to render into.
             */
            contentarea?: object;
            /**
             * ID of the window that is opened.
             */
            id?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:render render} to attached listeners.
         */
        fireRender(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Canvas object to render into.
             */
            canvas?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:submit submit} to attached listeners.
         */
        fireSubmit(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * JSON (or possibly XML and case the plugin is used) string describing the delta state of Visual Business
             * and the information about the event.
             */
            data?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:thumbnailClick thumbnailClick} to attached listeners.
         */
        fireThumbnailClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Geo coordinates in format "lon;lat;0"
             */
            pos?: string;
            /**
             * Level of detail.
             */
            zoomLevel?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:zoom zoom} to attached listeners.
         */
        fireZoom(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Canvas object to render into
             */
            canvas?: object;
          }
        ): this;
        /**
         * Gets current value of property {@link #getAllowKeyEventRepeat allowKeyEventRepeat}.
         *
         * Allow repeating of keyboard events when key is pressed and hold.
         *
         * Default value is `true`.
         */
        getAllowKeyEventRepeat(): boolean;
        /**
         * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
         * ariaDescribedBy}.
         */
        getAriaDescribedBy(): sap.ui.core.ID[];
        /**
         * Gets current value of property {@link #getAriaLabel ariaLabel}.
         *
         * Text to be read out for the Control when used in accessibility mode (Screen reader)
         */
        getAriaLabel(): string;
        /**
         * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
         * ariaLabelledBy}.
         */
        getAriaLabelledBy(): sap.ui.core.ID[];
        /**
         * @deprecated - This property should not longer be used. Its functionality is covered by method `load`.
         *
         * Gets current value of property {@link #getConfig config}.
         */
        getConfig(): object;
        /**
         * Gets current value of property {@link #getEnableOverlappingTest enableOverlappingTest}.
         *
         * Enable Test for Overlapped Objects for selection and context menu
         *
         * Default value is `true`.
         */
        getEnableOverlappingTest(): boolean;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Set the height of the control.
         *
         * Default value is `'600px'`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Retrieve information on a specific cluster object.
         *
         * Type :
         * 	 - 0 : contained VOs
         * 	 - 1 : child clusters (tree clustering only)
         * 	 - 2 : parent Node (tree clustering only)
         * 	 - 10 : Information on Node
         * 	 - 11 : Edges of the Voronoi Area (tree clustering only, not merged with rectangle)
         */
        getInfoForCluster(
          /**
           * Cluster Id
           */
          sIdent: string,
          /**
           * Type of information which should be returned
           */
          iType: sap.ui.vbm.ClusterInfoType
        ): Object;
        /**
         * Gets current value of property {@link #getKeyEventDelay keyEventDelay}.
         *
         * Miminum delay between keyboard events. Used to reduce frequency of keyboard events.
         *
         * Default value is `250`.
         */
        getKeyEventDelay(): int;
        /**
         * Gets current value of property {@link #getLassoSelection lassoSelection}.
         *
         * Defines whether the lasso selection mode is active or not
         *
         * Default value is `false`.
         */
        getLassoSelection(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vbm.VBI.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Returns a Screenshot of the Overlay. Please note that the map cannot be included due to browser restrictions.
         * Function returns the visible part of the Canvas excluding map, copyright info, navigation control, scaler,
         * legend, detail windows, container elements. Analytic Maps are returned as they are not treated as "maps"
         * internally. Modes 2 & 3 are experimental, trying to load the map (this may work on inhouse servers with
         * adapted settings, standard configurations should fail)
         */
        getPicOfOverlay(
          /**
           * 0: Overlay only; 1 (default) and 3: include Labels; 2 and 3: try to include maps (will return "" if not
           * possible)
           */
          iMode?: int
        ): string;
        /**
         * Gets current value of property {@link #getPlugin plugin}.
         *
         * When true, the ActiveX plugin version of Visual Business will be used for rendering. For that the plugin
         * needs to be installed on the client. Default (false) the control renders on canvas.
         *
         * Default value is `false`.
         */
        getPlugin(): boolean;
        /**
         * Gets current value of property {@link #getRectangularSelection rectangularSelection}.
         *
         * Defines whether the rectangular selection mode is active or not
         *
         * Default value is `false`.
         */
        getRectangularSelection(): boolean;
        /**
         * Gets current value of property {@link #getRectZoom rectZoom}.
         *
         * Defines whether the rectangular zoom mode is active or not
         *
         * Default value is `false`.
         */
        getRectZoom(): boolean;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Set the width of the control.
         *
         * Default value is `'800px'`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * High level load function. The function accepts a json string or an already parsed json object. This can
         * be a Visual Business application, any delta operations on the application or other hierachical data that
         * can be mapped by the Visual Business data provider to the inner Visual Business data context.
         */
        load(
          /**
           * Application JSON to process
           */
          dat: string
        ): void;
        /**
         * Maximize from Thumbnail.
         */
        maximize(
          /**
           * Width of the underlying VBI control. If ommitted current width is taken
           */
          iFullWidth?: int,
          /**
           * Height of the underlying control. If ommitted current width is taken
           */
          iFullHeight?: int
        ): void;
        /**
         * Minimize to Thumbnail.
         */
        minimize(
          /**
           * Width of the thumbnail
           */
          iNewWidth: int,
          /**
           * Height of the thumbnail
           */
          iNewHeight: int,
          /**
           * Width of the underlying VBI control. If ommitted or zero, current width is taken
           */
          iFullWidth?: int,
          /**
           * Height of the underlying control. If ommitted or zero, current width is taken
           */
          iFullHeight?: int,
          /**
           * Font to be used for text added to the thumbnail
           */
          font?: string,
          /**
           * Color for the thumbnailtext
           */
          fontCol?: string,
          /**
           * Position (0 - 8) of the text within the thumbnail
           */
          fontPos?: int,
          /**
           * text to be shown
           */
          text?: string
        ): void;
        /**
         * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
         */
        removeAllAriaDescribedBy(): sap.ui.core.ID[];
        /**
         * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
         */
        removeAllAriaLabelledBy(): sap.ui.core.ID[];
        /**
         * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
         */
        removeAriaDescribedBy(
          /**
           * The ariaDescribedBy to be removed or its index or ID
           */
          vAriaDescribedBy: int | sap.ui.core.ID | sap.ui.core.Control
        ): sap.ui.core.ID;
        /**
         * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
         */
        removeAriaLabelledBy(
          /**
           * The ariaLabelledBy to be removed or its index or ID
           */
          vAriaLabelledBy: int | sap.ui.core.ID | sap.ui.core.Control
        ): sap.ui.core.ID;
        /**
         * Sets a new value for property {@link #getAllowKeyEventRepeat allowKeyEventRepeat}.
         *
         * Allow repeating of keyboard events when key is pressed and hold.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setAllowKeyEventRepeat(
          /**
           * New value for property `allowKeyEventRepeat`
           */
          bAllowKeyEventRepeat?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getAriaLabel ariaLabel}.
         *
         * Text to be read out for the Control when used in accessibility mode (Screen reader)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAriaLabel(
          /**
           * New value for property `ariaLabel`
           */
          sAriaLabel: string
        ): this;
        /**
         * @deprecated - This property should not longer be used. Its functionality is covered by method `load`.
         *
         * Sets a new value for property {@link #getConfig config}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setConfig(
          /**
           * New value for property `config`
           */
          oConfig?: object
        ): this;
        /**
         * Sets a new value for property {@link #getEnableOverlappingTest enableOverlappingTest}.
         *
         * Enable Test for Overlapped Objects for selection and context menu
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableOverlappingTest(
          /**
           * New value for property `enableOverlappingTest`
           */
          bEnableOverlappingTest?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Set the height of the control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'600px'`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getKeyEventDelay keyEventDelay}.
         *
         * Miminum delay between keyboard events. Used to reduce frequency of keyboard events.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `250`.
         */
        setKeyEventDelay(
          /**
           * New value for property `keyEventDelay`
           */
          iKeyEventDelay?: int
        ): this;
        /**
         * Set Tracking Mode for Lasso Selection on/off.
         */
        setLassoSelection(
          /**
           * to start or stop tracking mode
           */
          bSet: boolean
        ): sap.ui.vbm.VBI;
        /**
         * Sets a new value for property {@link #getPlugin plugin}.
         *
         * When true, the ActiveX plugin version of Visual Business will be used for rendering. For that the plugin
         * needs to be installed on the client. Default (false) the control renders on canvas.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setPlugin(
          /**
           * New value for property `plugin`
           */
          bPlugin?: boolean
        ): this;
        /**
         * Set Tracking Mode for Rectangular Selection on/off.
         */
        setRectangularSelection(
          /**
           * to start or stop tracking mode
           */
          bSet: boolean
        ): sap.ui.vbm.VBI;
        /**
         * Set Tracking Mode for Rectangular Zoom on/off.
         */
        setRectZoom(
          /**
           * to start or stop tracking mode
           */
          bSet: boolean
        ): sap.ui.vbm.VBI;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Set the width of the control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'800px'`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
        /**
         * Zoom to one or multiple Areas. This function works only for the main geo scene in the Visual Business
         * control.
         */
        zoomToAreas(
          /**
           * List of Area Ids to zoom to.
           */
          aAreaList: any[],
          /**
           * . This correction factor deals with the space which is reserved to the div borders. The Correction factor
           * can be expressed either in a fracture (e.g. 0.9, this means 10% space to the borders) or array of pixel
           * values (order left, top, right, bottom) for the added margin of the calculated zoom area, e.g. [450,150,0,0]
           * which keeps a left border of 450 pixels and a top border of 150 pixels.
           */
          corr: float
        ): void;
        /**
         * Zoom to one or multiple geo positions. This function works only for the main geo scene in the Visual
         * Business control.
         */
        zoomToGeoPosition(
          /**
           * Longitude in degrees. This can also be an array of longitude values.
           */
          fLon: float,
          /**
           * Latitude in degrees. This can also be an array of latitude values.
           */
          fLat: float,
          /**
           * Level of detail, usually between 0 and 20. This will be limited by the map provider capabilities.
           */
          iLod: int
        ): void;
      }
      /**
       * Provides a control for three js canvas.
       */
      class Viewport extends sap.ui.core.Control {
        /**
         * Constructor for a new three js viewport for Adapter3D.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Attaches event handler `fnFunction` to the {@link #event:cameraChange cameraChange} event of this `sap.ui.vbm.Viewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Viewport` itself.
         *
         * This event is fired when camera positioning changed (whole movement has been finished)
         */
        attachCameraChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Viewport` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:cameraChange cameraChange} event of this `sap.ui.vbm.Viewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.Viewport` itself.
         *
         * This event is fired when camera positioning changed (whole movement has been finished)
         */
        attachCameraChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.Viewport` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:cameraChange cameraChange} event of this `sap.ui.vbm.Viewport`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCameraChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.Viewport with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.Viewport>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:cameraChange cameraChange} to attached listeners.
         */
        fireCameraChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Current position in camera history
             */
            historyPos?: int;
            /**
             * Camera history length
             */
            historyLength?: int;
          }
        ): this;
        /**
         * Gets current value of property {@link #getCameraHistoryLength cameraHistoryLength}.
         *
         * Camera history length (read only)
         *
         * Default value is `0`.
         */
        getCameraHistoryLength(): int;
        /**
         * Gets current value of property {@link #getCameraHistoryPos cameraHistoryPos}.
         *
         * Camera history position
         */
        getCameraHistoryPos(): int;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Viewport height
         *
         * Default value is `"100%"`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Returns a metadata object for class sap.ui.vbm.Viewport.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Viewport width
         *
         * Default value is `"100%"`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Sets a new value for property {@link #getCameraHistoryLength cameraHistoryLength}.
         *
         * Camera history length (read only)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setCameraHistoryLength(
          /**
           * New value for property `cameraHistoryLength`
           */
          iCameraHistoryLength?: int
        ): this;
        /**
         * Sets a new value for property {@link #getCameraHistoryPos cameraHistoryPos}.
         *
         * Camera history position
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCameraHistoryPos(
          /**
           * New value for property `cameraHistoryPos`
           */
          iCameraHistoryPos: int
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Viewport height
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Viewport width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * Abstract VO aggregation container. This element implements the common part for VOs. It must not be used
       * directly, but is the base for further extension.
       */
      class VoAbstract extends sap.ui.core.Element {
        /**
         * Constructor for a new VoAbstract.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor
         * sap.ui.core.Element} can be used.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VoAbstractSettings
        );
        /**
         * Constructor for a new VoAbstract.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor
         * sap.ui.core.Element} can be used.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VoAbstractSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vbm.VoAbstract with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.VoAbstract>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vbm.VoAbstract.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Open a context menu
         */
        openContextMenu(
          /**
           * Type of VO
           */
          sType: string,
          /**
           * VO instance for which the Context Menu should be opened
           */
          oVoInst: sap.ui.vbm.VoBase,
          /**
           * the context menu to be opened
           */
          oMenu: sap.ui.unified.Menu
        ): void;
      }
      /**
       * Abstract VO aggregation container. This element implements the common part for all specific VO aggregations
       * with selection cardinatities. It must not be used directly, but is the base for further extension.
       */
      class VoAggregation extends sap.ui.vbm.VoAbstract {
        /**
         * Constructor for a new VoAggregation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VoAggregationSettings
        );
        /**
         * Constructor for a new VoAggregation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VoAggregationSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * The event is raised when there is a click action on a VO.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * The event is raised when there is a click action on a VO.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a VO.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a VO.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:deselect deselect} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when aggregated elements get deselected
         */
        attachDeselect(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:deselect deselect} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when aggregated elements get deselected
         */
        attachDeselect(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * The event is raised when something is dropped on a VO.
         */
        attachDrop(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * The event is raised when something is dropped on a VO.
         */
        attachDrop(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when a Design handle is clicked.
         */
        attachHandleClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when a Design handle is clicked.
         */
        attachHandleClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when a Design handle is right clicked.
         */
        attachHandleContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when a Design handle is right clicked.
         */
        attachHandleContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when a Design handle is moved.
         */
        attachHandleMoved(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when a Design handle is moved.
         */
        attachHandleMoved(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when aggregated elements get selected
         */
        attachSelect(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.vbm.VoAggregation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoAggregation` itself.
         *
         * This event is raised when aggregated elements get selected
         */
        attachSelect(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoAggregation` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:deselect deselect} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDeselect(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:drop drop} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDrop(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleClick handleClick} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleContextMenu handleContextMenu} event
         * of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleMoved handleMoved} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleMoved(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.ui.vbm.VoAggregation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelect(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.VoAggregation with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vbm.VoAbstract.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.VoAggregation>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.VoBase;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.VoBase;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Fires event {@link #event:deselect deselect} to attached listeners.
         */
        fireDeselect(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Array of deselected VOs
             */
            deselected?: any[];
          }
        ): this;
        /**
         * Fires event {@link #event:drop drop} to attached listeners.
         */
        fireDrop(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Drop target instance
             */
            instance?: sap.ui.vbm.Spot;
            /**
             * Dragged instance
             */
            dragSource?: sap.ui.vbm.VoBase;
          }
        ): this;
        /**
         * Fires event {@link #event:handleClick handleClick} to attached listeners.
         */
        fireHandleClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.VoBase;
            /**
             * The number of the handle where the click occured. Handles are numbered zero based.
             */
            handle?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:handleContextMenu handleContextMenu} to attached listeners.
         */
        fireHandleContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.VoBase;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
            /**
             * The number of the handle where the click occured. Handles are numbered zero based.
             */
            handle?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:handleMoved handleMoved} to attached listeners.
         */
        fireHandleMoved(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Clicked instance
             */
            instance?: sap.ui.vbm.VoBase;
            /**
             * The number of the handle where the click occured. Handles are numbered zero based.
             */
            handle?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:select select} to attached listeners.
         */
        fireSelect(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Array of selected VOs
             */
            selected?: any[];
          }
        ): this;
        /**
         * Gets current value of property {@link #getCustomProperties customProperties}.
         *
         * If you want to add custom data to VO instances and make the GeoMap control aware of it, e.g. for basing
         * clustering rules on it, you can provide an array of property names specifying the keys to consider.
         */
        getCustomProperties(): string[];
        /**
         * Gets current value of property {@link #getMaxSel maxSel}.
         *
         * Selection cardinality: maximum selectable elements ( valid values are "0", "1", and "n" )
         *
         * Default value is `"n"`.
         */
        getMaxSel(): string;
        /**
         * Returns a metadata object for class sap.ui.vbm.VoAggregation.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMinSel minSel}.
         *
         * Selection cardinality: minimum selected elements ("0" or "1" )
         *
         * Default value is `"0"`.
         */
        getMinSel(): string;
        /**
         * Open a Detail Window
         */
        openDetailWindow(
          /**
           * VO instance for which the Detail Window should be opened
           */
          oVoInst: sap.ui.vbm.VoBase,
          /**
           * Parameter object
           */
          oParams: {
            /**
             * Text for Detail Window caption
             */
            caption: string;
            /**
             * position offset in x-direction from the anchor point
             */
            offsetX: string;
            /**
             * position offset in y-direction from the anchor point
             */
            offsetY: string;
          },
          /**
           * Indicates whether the Detail Window should be located at the click position or object position
           */
          bUseClickPos: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getCustomProperties customProperties}.
         *
         * If you want to add custom data to VO instances and make the GeoMap control aware of it, e.g. for basing
         * clustering rules on it, you can provide an array of property names specifying the keys to consider.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCustomProperties(
          /**
           * New value for property `customProperties`
           */
          sCustomProperties: string[]
        ): this;
        /**
         * Sets a new value for property {@link #getMaxSel maxSel}.
         *
         * Selection cardinality: maximum selectable elements ( valid values are "0", "1", and "n" )
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"n"`.
         */
        setMaxSel(
          /**
           * New value for property `maxSel`
           */
          sMaxSel?: string
        ): this;
        /**
         * Sets a new value for property {@link #getMinSel minSel}.
         *
         * Selection cardinality: minimum selected elements ("0" or "1" )
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0"`.
         */
        setMinSel(
          /**
           * New value for property `minSel`
           */
          sMinSel?: string
        ): this;
      }
      /**
       * Abstract aggregation element for VO aggregations. This element implements the common part for all specific
       * VO elements. It must not be used directly, but is the base for further extension.
       *  As a common feature it provides the Label, which may be attached to any visual object. There are two
       * modes for using labels:
       * 	 - A controlled mode by providing a label type. In this mode most parameters for the label are automatically
       * 			set by programmed defaults according to the Fiori guidelines.
       * 	 - A freestyle mode, providing the full control on colors and layout.  Further all visual objects
       * 			have common edit capabilities and it is possible to drop content on visual objects.
       */
      class VoBase extends sap.ui.core.Element {
        /**
         * Constructor for a new VoBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VoBaseSettings
        );
        /**
         * Constructor for a new VoBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vbm.$VoBaseSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * The event is raised when there is a click action on a visual object.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * The event is raised when there is a click action on a visual object.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a visual object.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on a visual object.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * The event is raised when something is dropped on the object.
         */
        attachDrop(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:drop drop} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * The event is raised when something is dropped on the object.
         */
        attachDrop(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * This event is raised when the design handle is clicked.
         */
        attachHandleClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * This event is raised when the design handle is clicked.
         */
        attachHandleClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * This event is raised when the design handle is right clicked.
         */
        attachHandleContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * This event is raised when the design handle is right clicked.
         */
        attachHandleContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * This event is raised when the design handle is moved.
         */
        attachHandleMoved(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vbm.VoBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vbm.VoBase` itself.
         *
         * This event is raised when the design handle is moved.
         */
        attachHandleMoved(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vbm.VoBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vbm.VoBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vbm.VoBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:drop drop} event of this `sap.ui.vbm.VoBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDrop(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleClick handleClick} event of this `sap.ui.vbm.VoBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleContextMenu handleContextMenu} event
         * of this `sap.ui.vbm.VoBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleMoved handleMoved} event of this `sap.ui.vbm.VoBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleMoved(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vbm.VoBase with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vbm.VoBase>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Fires event {@link #event:drop drop} to attached listeners.
         */
        fireDrop(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Dragged instance
             */
            dragSource?: sap.ui.vbm.VoBase;
          }
        ): this;
        /**
         * Fires event {@link #event:handleClick handleClick} to attached listeners.
         */
        fireHandleClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The number of the handle where the click occured. Handles are numbered zero based.
             */
            handle?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:handleContextMenu handleContextMenu} to attached listeners.
         */
        fireHandleContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The number of the handle where the click occured. Handles are numbered zero based.
             */
            handle?: int;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Fires event {@link #event:handleMoved handleMoved} to attached listeners.
         */
        fireHandleMoved(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The number of the handle where the click occured. Handles are numbered zero based.
             */
            handle?: int;
          }
        ): this;
        /**
         * Gets current value of property {@link #getChangeable changeable}.
         *
         * Set to true if VO is changeable. Which properties are actually changeable can be controlled on the related
         * VO aggregation.
         *
         * Default value is `false`.
         */
        getChangeable(): boolean;
        /**
         * Gets current value of property {@link #getDragData dragData}.
         *
         * Data to be dragged. This property allows you to provide an arbitrary data string, which is transfered
         * to the target in a drag'n drop operation
         */
        getDragData(): string;
        /**
         * Gets current value of property {@link #getEntity entity}.
         *
         * The visual object builds an entity/group with other VO elements when it is hovered. The property is not
         * supported when the PlugIn is used.
         */
        getEntity(): string;
        /**
         * Gets current value of property {@link #getFxdir fxdir}.
         *
         * The visual object is not rotated when the map is rotated. The property is only required when the PlugIn
         * is used and only meaningful for some VOs.
         *
         * Default value is `'true'`.
         */
        getFxdir(): string;
        /**
         * Gets current value of property {@link #getFxsize fxsize}.
         *
         * The visual object should keep its size when the map is zoomed. Default value is 'true'. Only meaningful
         * for some VOs.
         *
         * Default value is `'true'`.
         */
        getFxsize(): string;
        /**
         * Gets current value of property {@link #getHotDeltaColor hotDeltaColor}.
         *
         * Color change applied when visual object is hovered. The format is RHLSA(<hue>;<lightness>;<saturation>;<opacity>).
         * The hue shift is given in degree (0 to 360). The other parameters are given as multipliers, where 1 means
         * the component remains unchanged.
         *  Beside the delta color approach it is also possible to specify an absolute color in the usual CSS color
         * formats (except named colors).
         *
         * Default value is `'RHLSA(0;1.3;1.0;1.0)'`.
         */
        getHotDeltaColor(): string;
        /**
         * Gets current value of property {@link #getHotScale hotScale}.
         *
         * Scaling factor applied when visual object is hovered. This is only supported on selected VOs, which do
         * not present a defined geo area.
         *
         * Default value is `'1.0;1.0;1.0'`.
         */
        getHotScale(): string;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs to have a unique and stable identifier.
         */
        getKey(): string;
        /**
         * Gets current value of property {@link #getLabelArrow labelArrow}.
         *
         * The visual objects label arrow. For left/right/top/bottom aligned labels an additional arrow points to
         * the label's object.
         *
         * Default value is `false`.
         */
        getLabelArrow(): boolean;
        /**
         * Gets current value of property {@link #getLabelBgColor labelBgColor}.
         *
         * The visual objects label background color. The default value is white.
         *
         * Default value is `'RGB(255;255;255)'`.
         */
        getLabelBgColor(): string;
        /**
         * Gets current value of property {@link #getLabelBorderColor labelBorderColor}.
         *
         * The visual objects label border color. The default is no border.
         */
        getLabelBorderColor(): string;
        /**
         * Gets current value of property {@link #getLabelPos labelPos}.
         *
         * The visual objects label position. This property determines the positioning of the label relative to
         * the VO it belongs to. Possible values are:
         * 	 - 0: centered
         * 	 - 1: top
         * 	 - 2: top right
         * 	 - 3: right
         * 	 - 4: bottom right
         * 	 - 5: bottom
         * 	 - 6: bottom left
         * 	 - 7: left
         * 	 - 8: top left  The default alignment is VO specific.
         *  For multiple position based VOs, like Route, or Area the label is dynamically positioned. If the current
         * display of a VO consists of multiple disconnected parts, each part gets an own label.
         */
        getLabelPos(): string;
        /**
         * Gets current value of property {@link #getLabelText labelText}.
         *
         * The visual objects label text. Providing a label text required, but also sufficient the get a label displayed.
         */
        getLabelText(): string;
        /**
         * Gets current value of property {@link #getLabelType labelType}.
         *
         * Type for semantic labels. A given semantic type will overrule color settings and add an icon.
         *
         * Default value is `None`.
         */
        getLabelType(): sap.ui.vbm.SemanticType;
        /**
         * Returns a metadata object for class sap.ui.vbm.VoBase.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getSelect select}.
         *
         * Set to true if the element is selected
         *
         * Default value is `false`.
         */
        getSelect(): boolean;
        /**
         * Gets current value of property {@link #getSelectColor selectColor}.
         *
         * Color change applied when visual object is selected. This can be explicit or a relative one. See above.
         *
         * Default value is `'RHLSA(0.0;1.0;1.0;1.0)'`.
         */
        getSelectColor(): string;
        /**
         * Open the context menu. The method relies on the state saved before firing event contextMenu. Further
         * the object oMenu is expected to be the one given as parameter menu of event contextMenu.
         */
        openContextMenu(
          /**
           * The context menu to be opened. The object is expected the have an attribute
           */
          oMenu: object
        ): void;
        /**
         * Open a Detail Window for the visual object at click position. The method relies on the state saved before
         * firing event click.
         */
        openDetailWindow(
          /**
           * Caption of detail window
           */
          sCaption: string,
          /**
           * Position offset in x-direction from the anchor point
           */
          sOffsetX: string,
          /**
           * Position offset in y-direction from the anchor point
           */
          sOffsetY: string
        ): void;
        /**
         * Sets a new value for property {@link #getChangeable changeable}.
         *
         * Set to true if VO is changeable. Which properties are actually changeable can be controlled on the related
         * VO aggregation.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setChangeable(
          /**
           * New value for property `changeable`
           */
          bChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getDragData dragData}.
         *
         * Data to be dragged. This property allows you to provide an arbitrary data string, which is transfered
         * to the target in a drag'n drop operation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDragData(
          /**
           * New value for property `dragData`
           */
          sDragData?: string
        ): this;
        /**
         * Sets a new value for property {@link #getEntity entity}.
         *
         * The visual object builds an entity/group with other VO elements when it is hovered. The property is not
         * supported when the PlugIn is used.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEntity(
          /**
           * New value for property `entity`
           */
          sEntity?: string
        ): this;
        /**
         * Sets a new value for property {@link #getFxdir fxdir}.
         *
         * The visual object is not rotated when the map is rotated. The property is only required when the PlugIn
         * is used and only meaningful for some VOs.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'true'`.
         */
        setFxdir(
          /**
           * New value for property `fxdir`
           */
          sFxdir?: string
        ): this;
        /**
         * Sets a new value for property {@link #getFxsize fxsize}.
         *
         * The visual object should keep its size when the map is zoomed. Default value is 'true'. Only meaningful
         * for some VOs.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'true'`.
         */
        setFxsize(
          /**
           * New value for property `fxsize`
           */
          sFxsize?: string
        ): this;
        /**
         * Sets a new value for property {@link #getHotDeltaColor hotDeltaColor}.
         *
         * Color change applied when visual object is hovered. The format is RHLSA(<hue>;<lightness>;<saturation>;<opacity>).
         * The hue shift is given in degree (0 to 360). The other parameters are given as multipliers, where 1 means
         * the component remains unchanged.
         *  Beside the delta color approach it is also possible to specify an absolute color in the usual CSS color
         * formats (except named colors).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RHLSA(0;1.3;1.0;1.0)'`.
         */
        setHotDeltaColor(
          /**
           * New value for property `hotDeltaColor`
           */
          sHotDeltaColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getHotScale hotScale}.
         *
         * Scaling factor applied when visual object is hovered. This is only supported on selected VOs, which do
         * not present a defined geo area.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'1.0;1.0;1.0'`.
         */
        setHotScale(
          /**
           * New value for property `hotScale`
           */
          sHotScale?: string
        ): this;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs to have a unique and stable identifier.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelArrow labelArrow}.
         *
         * The visual objects label arrow. For left/right/top/bottom aligned labels an additional arrow points to
         * the label's object.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setLabelArrow(
          /**
           * New value for property `labelArrow`
           */
          bLabelArrow?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getLabelBgColor labelBgColor}.
         *
         * The visual objects label background color. The default value is white.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RGB(255;255;255)'`.
         */
        setLabelBgColor(
          /**
           * New value for property `labelBgColor`
           */
          sLabelBgColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelBorderColor labelBorderColor}.
         *
         * The visual objects label border color. The default is no border.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLabelBorderColor(
          /**
           * New value for property `labelBorderColor`
           */
          sLabelBorderColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelPos labelPos}.
         *
         * The visual objects label position. This property determines the positioning of the label relative to
         * the VO it belongs to. Possible values are:
         * 	 - 0: centered
         * 	 - 1: top
         * 	 - 2: top right
         * 	 - 3: right
         * 	 - 4: bottom right
         * 	 - 5: bottom
         * 	 - 6: bottom left
         * 	 - 7: left
         * 	 - 8: top left  The default alignment is VO specific.
         *  For multiple position based VOs, like Route, or Area the label is dynamically positioned. If the current
         * display of a VO consists of multiple disconnected parts, each part gets an own label.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLabelPos(
          /**
           * New value for property `labelPos`
           */
          sLabelPos?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelText labelText}.
         *
         * The visual objects label text. Providing a label text required, but also sufficient the get a label displayed.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLabelText(
          /**
           * New value for property `labelText`
           */
          sLabelText?: string
        ): this;
        /**
         * Sets a new value for property {@link #getLabelType labelType}.
         *
         * Type for semantic labels. A given semantic type will overrule color settings and add an icon.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `None`.
         */
        setLabelType(
          /**
           * New value for property `labelType`
           */
          sLabelType?: sap.ui.vbm.SemanticType
        ): this;
        /**
         * Sets a new value for property {@link #getSelect select}.
         *
         * Set to true if the element is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelect(
          /**
           * New value for property `select`
           */
          bSelect?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getSelectColor selectColor}.
         *
         * Color change applied when visual object is selected. This can be explicit or a relative one. See above.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `'RHLSA(0.0;1.0;1.0;1.0)'`.
         */
        setSelectColor(
          /**
           * New value for property `selectColor`
           */
          sSelectColor?: string
        ): this;
      }
      /**
       * Cluster Info Type
       */
      enum ClusterInfoType {
        /**
         * Type indicating that Cluster Info should return info on child cluster nodes (next LOD). This is only
         * supported for tree clustering.
         */
        ChildCluster = "1",
        /**
         * Type indicating that Cluster Info should return only VOs covered by the Cluster object
         */
        ContainedVOs = "0",
        /**
         * Type indicating that Cluster Info should return info on Edges of the Voronoi Area for the cluster. This
         * is only supported for tree clustering. Edges not merged with rectangles.
         */
        Edges = "11",
        /**
         * Type indicating that Cluster Info should return info on cluster node itself.
         */
        NodeInfo = "10",
        /**
         * Type indicating that Cluster Info should return info on parent cluster node (previous LOD). This is only
         * supported for tree clustering.
         */
        ParentNode = "2",
      }
      /**
       * Route type, determining how line between start and endpoint should be drawn.
       */
      enum RouteType {
        /**
         * Type indicating a geodesic connection
         */
        Geodesic = "Geodesic",
        /**
         * Type indicating a straight connection
         */
        Straight = "Straight",
      }
      /**
       * Semantic type with pre-defined display properties, like colors, icon, pin image, and so on. Semantic
       * types enforce to fiori guidelines.
       */
      enum SemanticType {
        /**
         * Type indicating the Default state
         */
        Default = "Default",
        /**
         * Type indicating an Error state
         */
        Error = "Error",
        /**
         * Type indicating a Hidden state
         */
        Hidden = "Hidden",
        /**
         * Type indicating an Inactive state
         */
        Inactive = "Inactive",
        /**
         * Type indicating no state
         */
        None = "None",
        /**
         * Type indicating a Success/Positive state
         */
        Success = "Success",
        /**
         * Type indicating a Warning state
         */
        Warning = "Warning",
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/ui/vbm/Adapter": undefined;

    "sap/ui/vbm/Adapter3D": undefined;

    "sap/ui/vbm/AnalyticMap": undefined;

    "sap/ui/vbm/Area": undefined;

    "sap/ui/vbm/Areas": undefined;

    "sap/ui/vbm/Box": undefined;

    "sap/ui/vbm/Boxes": undefined;

    "sap/ui/vbm/Circle": undefined;

    "sap/ui/vbm/Circles": undefined;

    "sap/ui/vbm/Cluster": undefined;

    "sap/ui/vbm/ClusterBase": undefined;

    "sap/ui/vbm/ClusterContainer": undefined;

    "sap/ui/vbm/ClusterDistance": undefined;

    "sap/ui/vbm/ClusterGrid": undefined;

    "sap/ui/vbm/ClusterTree": undefined;

    "sap/ui/vbm/Container": undefined;

    "sap/ui/vbm/Containers": undefined;

    "sap/ui/vbm/DragSource": undefined;

    "sap/ui/vbm/DropTarget": undefined;

    "sap/ui/vbm/Feature": undefined;

    "sap/ui/vbm/FeatureCollection": undefined;

    "sap/ui/vbm/GeoCircle": undefined;

    "sap/ui/vbm/GeoCircles": undefined;

    "sap/ui/vbm/GeoJsonLayer": undefined;

    "sap/ui/vbm/GeoMap": undefined;

    "sap/ui/vbm/Heatmap": undefined;

    "sap/ui/vbm/HeatPoint": undefined;

    "sap/ui/vbm/Legend": undefined;

    "sap/ui/vbm/LegendItem": undefined;

    "sap/ui/vbm/library": undefined;

    "sap/ui/vbm/Pie": undefined;

    "sap/ui/vbm/PieItem": undefined;

    "sap/ui/vbm/Pies": undefined;

    "sap/ui/vbm/Region": undefined;

    "sap/ui/vbm/Resource": undefined;

    "sap/ui/vbm/Route": undefined;

    "sap/ui/vbm/Routes": undefined;

    "sap/ui/vbm/Spot": undefined;

    "sap/ui/vbm/Spots": undefined;

    "sap/ui/vbm/VBI": undefined;

    "sap/ui/vbm/Viewport": undefined;

    "sap/ui/vbm/VoAbstract": undefined;

    "sap/ui/vbm/VoAggregation": undefined;

    "sap/ui/vbm/VoBase": undefined;
  }
}
