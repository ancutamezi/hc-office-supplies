// For Library Version: 1.92.0

declare namespace sap {
  namespace zen {
    /**
     * @deprecated (since 1.89.0)
     * @EXPERIMENTAL
     *
     * Design Studio Crosstab library. NOT INTENDED FOR STANDALONE USAGE.
     */
    namespace crosstab {
      interface $CrosstabSettings extends sap.ui.core.$ControlSettings {
        /**
         * Width of the Crosstab.
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Height of the Crosstab.
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $DataCellSettings extends sap.ui.core.$ControlSettings {
        /**
         * the text of the data cell
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the area of the data cell
         */
        area?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the row of the data cell
         */
        row?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the column of the data cell
         */
        col?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the table row of the data cell
         */
        tableRow?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the table column of the data cell
         */
        tableCol?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $HeaderCellSettings extends sap.ui.core.$ControlSettings {
        /**
         * Rowspan of the cell
         */
        rowSpan?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Colspan of the cell
         */
        colSpan?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Text of the cell
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * helper to format the cell
         */
        formatter?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * whether to merge the cell if the keys are equal
         */
        mergeKey?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * sorting
         */
        sort?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * sort action
         */
        sortAction?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * area of the cell
         */
        area?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the effective col span
         */
        effectiveColSpan?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the effective row span
         */
        effectiveRowSpan?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the row of the cell in the crosstab
         */
        row?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the column of the cell in the crosstab
         */
        col?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the level of the cell
         */
        level?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the drillstate of the cell
         */
        drillState?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the hierarcyh action of the cell
         */
        hierarchyAction?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the hierarchy tooltip
         */
        hierarchyTooltip?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @deprecated (since 1.89.0)
         *
         * the IE8 row span
         */
        htmlIE8RowSpan?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the text sort index
         */
        sortTextIndex?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the row of the tabe
         */
        tableRow?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the column of the table
         */
        tableCol?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the alignment of the cell
         */
        alignment?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the id of the associated member
         */
        memberId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the id of the parent of the associated member
         */
        parentMemberId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the node alignment
         */
        nodeAlignment?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * @deprecated (since 1.89.0)
       *
       * Add your documentation for the new Crosstab
       */
      class Crosstab extends sap.ui.core.Control {
        /**
         * Constructor for a new Crosstab.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.crosstab.$CrosstabSettings
        );
        /**
         * Constructor for a new Crosstab.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.crosstab.$CrosstabSettings
        );

        /**
         * Creates a new subclass of class sap.zen.crosstab.Crosstab with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.crosstab.Crosstab>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the Crosstab.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Returns a metadata object for class sap.zen.crosstab.Crosstab.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the Crosstab.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the Crosstab.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the Crosstab.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @deprecated (since 1.89.0)
       *
       * Add your documentation for the new DataCell
       */
      class DataCell extends sap.ui.core.Control {
        /**
         * Constructor for a new DataCell.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.crosstab.$DataCellSettings
        );
        /**
         * Constructor for a new DataCell.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.crosstab.$DataCellSettings
        );

        /**
         *
         */
        addStyle(sSStyle: string): void;
        /**
         * Creates a new subclass of class sap.zen.crosstab.DataCell with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.crosstab.DataCell>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getArea area}.
         *
         * the area of the data cell
         */
        getArea(): object;
        /**
         * Gets current value of property {@link #getCol col}.
         *
         * the column of the data cell
         */
        getCol(): int;
        /**
         * Returns a metadata object for class sap.zen.crosstab.DataCell.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getRow row}.
         *
         * the row of the data cell
         */
        getRow(): int;
        /**
         * Gets current value of property {@link #getTableCol tableCol}.
         *
         * the table column of the data cell
         */
        getTableCol(): int;
        /**
         * Gets current value of property {@link #getTableRow tableRow}.
         *
         * the table row of the data cell
         */
        getTableRow(): int;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * the text of the data cell
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getArea area}.
         *
         * the area of the data cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setArea(
          /**
           * New value for property `area`
           */
          oArea?: object
        ): this;
        /**
         * Sets a new value for property {@link #getCol col}.
         *
         * the column of the data cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCol(
          /**
           * New value for property `col`
           */
          iCol?: int
        ): this;
        /**
         * Sets a new value for property {@link #getRow row}.
         *
         * the row of the data cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRow(
          /**
           * New value for property `row`
           */
          iRow?: int
        ): this;
        /**
         * Sets a new value for property {@link #getTableCol tableCol}.
         *
         * the table column of the data cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTableCol(
          /**
           * New value for property `tableCol`
           */
          iTableCol?: int
        ): this;
        /**
         * Sets a new value for property {@link #getTableRow tableRow}.
         *
         * the table row of the data cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTableRow(
          /**
           * New value for property `tableRow`
           */
          iTableRow?: int
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * the text of the data cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
      }
      /**
       * @deprecated (since 1.89.0)
       *
       * Add your documentation for the new HeaderCell
       */
      class HeaderCell extends sap.ui.core.Control {
        /**
         * Constructor for a new HeaderCell.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.crosstab.$HeaderCellSettings
        );
        /**
         * Constructor for a new HeaderCell.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.crosstab.$HeaderCellSettings
        );

        /**
         * Creates a new subclass of class sap.zen.crosstab.HeaderCell with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.crosstab.HeaderCell>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAlignment alignment}.
         *
         * the alignment of the cell
         */
        getAlignment(): string;
        /**
         * Gets current value of property {@link #getArea area}.
         *
         * area of the cell
         */
        getArea(): object;
        /**
         * Gets current value of property {@link #getCol col}.
         *
         * the column of the cell in the crosstab
         */
        getCol(): int;
        /**
         * Gets current value of property {@link #getColSpan colSpan}.
         *
         * Colspan of the cell
         */
        getColSpan(): int;
        /**
         * Gets current value of property {@link #getDrillState drillState}.
         *
         * the drillstate of the cell
         */
        getDrillState(): string;
        /**
         * Gets current value of property {@link #getEffectiveColSpan effectiveColSpan}.
         *
         * the effective col span
         */
        getEffectiveColSpan(): int;
        /**
         * Gets current value of property {@link #getEffectiveRowSpan effectiveRowSpan}.
         *
         * the effective row span
         */
        getEffectiveRowSpan(): int;
        /**
         * Gets current value of property {@link #getFormatter formatter}.
         *
         * helper to format the cell
         */
        getFormatter(): object;
        /**
         * Gets current value of property {@link #getHierarchyAction hierarchyAction}.
         *
         * the hierarcyh action of the cell
         */
        getHierarchyAction(): string;
        /**
         * Gets current value of property {@link #getHierarchyTooltip hierarchyTooltip}.
         *
         * the hierarchy tooltip
         */
        getHierarchyTooltip(): string;
        /**
         * @deprecated (since 1.89.0)
         *
         * Gets current value of property {@link #getHtmlIE8RowSpan htmlIE8RowSpan}.
         *
         * the IE8 row span
         *
         * Default value is `1`.
         */
        getHtmlIE8RowSpan(): int;
        /**
         * Gets current value of property {@link #getLevel level}.
         *
         * the level of the cell
         */
        getLevel(): int;
        /**
         * Gets current value of property {@link #getMemberId memberId}.
         *
         * the id of the associated member
         */
        getMemberId(): string;
        /**
         * Gets current value of property {@link #getMergeKey mergeKey}.
         *
         * whether to merge the cell if the keys are equal
         */
        getMergeKey(): string;
        /**
         * Returns a metadata object for class sap.zen.crosstab.HeaderCell.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getNodeAlignment nodeAlignment}.
         *
         * the node alignment
         */
        getNodeAlignment(): string;
        /**
         * Gets current value of property {@link #getParentMemberId parentMemberId}.
         *
         * the id of the parent of the associated member
         */
        getParentMemberId(): string;
        /**
         * Gets current value of property {@link #getRow row}.
         *
         * the row of the cell in the crosstab
         */
        getRow(): int;
        /**
         * Gets current value of property {@link #getRowSpan rowSpan}.
         *
         * Rowspan of the cell
         */
        getRowSpan(): int;
        /**
         * Gets current value of property {@link #getSort sort}.
         *
         * sorting
         */
        getSort(): string;
        /**
         * Gets current value of property {@link #getSortAction sortAction}.
         *
         * sort action
         */
        getSortAction(): string;
        /**
         * Gets current value of property {@link #getSortTextIndex sortTextIndex}.
         *
         * the text sort index
         */
        getSortTextIndex(): int;
        /**
         * Gets current value of property {@link #getTableCol tableCol}.
         *
         * the column of the table
         */
        getTableCol(): int;
        /**
         * Gets current value of property {@link #getTableRow tableRow}.
         *
         * the row of the tabe
         */
        getTableRow(): int;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Text of the cell
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getAlignment alignment}.
         *
         * the alignment of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAlignment(
          /**
           * New value for property `alignment`
           */
          sAlignment?: string
        ): this;
        /**
         * Sets a new value for property {@link #getArea area}.
         *
         * area of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setArea(
          /**
           * New value for property `area`
           */
          oArea?: object
        ): this;
        /**
         * Sets a new value for property {@link #getCol col}.
         *
         * the column of the cell in the crosstab
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCol(
          /**
           * New value for property `col`
           */
          iCol?: int
        ): this;
        /**
         * Sets a new value for property {@link #getColSpan colSpan}.
         *
         * Colspan of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColSpan(
          /**
           * New value for property `colSpan`
           */
          iColSpan?: int
        ): this;
        /**
         * Sets a new value for property {@link #getDrillState drillState}.
         *
         * the drillstate of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDrillState(
          /**
           * New value for property `drillState`
           */
          sDrillState?: string
        ): this;
        /**
         * Sets a new value for property {@link #getEffectiveColSpan effectiveColSpan}.
         *
         * the effective col span
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEffectiveColSpan(
          /**
           * New value for property `effectiveColSpan`
           */
          iEffectiveColSpan?: int
        ): this;
        /**
         * Sets a new value for property {@link #getEffectiveRowSpan effectiveRowSpan}.
         *
         * the effective row span
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEffectiveRowSpan(
          /**
           * New value for property `effectiveRowSpan`
           */
          iEffectiveRowSpan?: int
        ): this;
        /**
         * Sets a new value for property {@link #getFormatter formatter}.
         *
         * helper to format the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFormatter(
          /**
           * New value for property `formatter`
           */
          oFormatter?: object
        ): this;
        /**
         * Sets a new value for property {@link #getHierarchyAction hierarchyAction}.
         *
         * the hierarcyh action of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHierarchyAction(
          /**
           * New value for property `hierarchyAction`
           */
          sHierarchyAction?: string
        ): this;
        /**
         * Sets a new value for property {@link #getHierarchyTooltip hierarchyTooltip}.
         *
         * the hierarchy tooltip
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHierarchyTooltip(
          /**
           * New value for property `hierarchyTooltip`
           */
          sHierarchyTooltip?: string
        ): this;
        /**
         * @deprecated (since 1.89.0)
         *
         * Sets a new value for property {@link #getHtmlIE8RowSpan htmlIE8RowSpan}.
         *
         * the IE8 row span
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setHtmlIE8RowSpan(
          /**
           * New value for property `htmlIE8RowSpan`
           */
          iHtmlIE8RowSpan?: int
        ): this;
        /**
         * Sets a new value for property {@link #getLevel level}.
         *
         * the level of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLevel(
          /**
           * New value for property `level`
           */
          iLevel?: int
        ): this;
        /**
         * Sets a new value for property {@link #getMemberId memberId}.
         *
         * the id of the associated member
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMemberId(
          /**
           * New value for property `memberId`
           */
          sMemberId?: string
        ): this;
        /**
         * Sets a new value for property {@link #getMergeKey mergeKey}.
         *
         * whether to merge the cell if the keys are equal
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMergeKey(
          /**
           * New value for property `mergeKey`
           */
          sMergeKey?: string
        ): this;
        /**
         * Sets a new value for property {@link #getNodeAlignment nodeAlignment}.
         *
         * the node alignment
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeAlignment(
          /**
           * New value for property `nodeAlignment`
           */
          sNodeAlignment?: string
        ): this;
        /**
         * Sets a new value for property {@link #getParentMemberId parentMemberId}.
         *
         * the id of the parent of the associated member
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setParentMemberId(
          /**
           * New value for property `parentMemberId`
           */
          sParentMemberId?: string
        ): this;
        /**
         * Sets a new value for property {@link #getRow row}.
         *
         * the row of the cell in the crosstab
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRow(
          /**
           * New value for property `row`
           */
          iRow?: int
        ): this;
        /**
         * Sets a new value for property {@link #getRowSpan rowSpan}.
         *
         * Rowspan of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRowSpan(
          /**
           * New value for property `rowSpan`
           */
          iRowSpan?: int
        ): this;
        /**
         * Sets a new value for property {@link #getSort sort}.
         *
         * sorting
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSort(
          /**
           * New value for property `sort`
           */
          sSort?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSortAction sortAction}.
         *
         * sort action
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSortAction(
          /**
           * New value for property `sortAction`
           */
          sSortAction?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSortTextIndex sortTextIndex}.
         *
         * the text sort index
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSortTextIndex(
          /**
           * New value for property `sortTextIndex`
           */
          iSortTextIndex?: int
        ): this;
        /**
         * Sets a new value for property {@link #getTableCol tableCol}.
         *
         * the column of the table
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTableCol(
          /**
           * New value for property `tableCol`
           */
          iTableCol?: int
        ): this;
        /**
         * Sets a new value for property {@link #getTableRow tableRow}.
         *
         * the row of the tabe
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTableRow(
          /**
           * New value for property `tableRow`
           */
          iTableRow?: int
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * Text of the cell
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/zen/crosstab/Crosstab": undefined;

    "sap/zen/crosstab/DataCell": undefined;

    "sap/zen/crosstab/HeaderCell": undefined;

    "sap/zen/crosstab/library": undefined;
  }
}
