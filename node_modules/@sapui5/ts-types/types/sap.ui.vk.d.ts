// For Library Version: 1.92.0

declare namespace sap {
  namespace ui {
    /**
     * SAPUI5 library with controls for displaying 3D models.
     */
    namespace vk {
      /**
       * @SINCE 1.50.0
       *
       * Retrieve the {@link sap.ui.vk.Core Core} instance for the current window.
       */
      function getCore(): /* was: sap.ui.vk.Core */ any;

      namespace dvl {
        interface $ContentManagerSettings
          extends sap.ui.vk.$ContentManagerSettings {}

        interface $NodeHierarchySettings
          extends sap.ui.vk.$NodeHierarchySettings {}

        interface $NodeProxySettings extends sap.ui.vk.$NodeProxySettings {}

        interface $SceneSettings extends sap.ui.vk.$SceneSettings {}

        interface $ViewportSettings extends sap.ui.vk.$ViewportBaseSettings {
          /**
           * Viewport background top color in the ABGR format
           */
          backgroundColorTopABGR?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Viewport background bottom color in the ABGR format
           */
          backgroundColorBottomABGR?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          pan?: Function;

          zoom?: Function;

          rotate?: Function;

          /**
           * This event will be fired when the frame rendering has finished.
           */
          frameRenderingFinished?: Function;
        }

        interface $ViewStateManagerSettings
          extends sap.ui.vk.$ViewStateManagerBaseSettings {}

        /**
         * @deprecated (since 1.72.0)
         *
         * Provides a simple, lightweight proxy object to a node in a node hierarchy.
         *
         * The objects of this class should not be created directly, and should only be created through the use
         * of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        class BaseNodeProxy
          extends sap.ui.vk.BaseNodeProxy
          implements sap.ui.base.Poolable {
          __implements__sap_ui_base_Poolable: boolean;
          /**
           * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
           * only be created through the use of the following methods:
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
           * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.BaseNodeProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.BaseNodeProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.BaseNodeProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Indicates whether the node has child nodes.
           */
          getHasChildren(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.BaseNodeProxy.
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the node.
           */
          getName(): string;
          /**
           * Gets the ID of the node.
           */
          getNodeId(): string;
          /**
           * Gets the metadata of the node.
           */
          getNodeMetadata(): object;
          /**
           * Gets the reference object of the node.
           */
          getNodeRef(): string;
          /**
           * Gets the scene reference that this BaseNodeProxy object wraps.
           */
          getSceneRef(): any;
          /**
           * Initialize this BaseNodeProxy with its data.
           *
           * The `init` method is called by an object pool when the object is (re-)activated for a new caller.
           * See:
           * 	sap.ui.base.Poolable.prototype#init
           */
          init(
            /**
             * The NodeHierarchy object this BaseNodeProxy object belongs to.
             */
            nodeHierarchy: sap.ui.vk.dvl.NodeHierarchy,
            /**
             * The ID of the node for which to get BaseNodeProxy.
             */
            nodeRef: string
          ): void;
          /**
           * Reset BaseNodeProxy data, needed for pooling.
           * See:
           * 	sap.ui.base.Poolable.prototype#reset
           */
          reset(): void;
        }
        /**
         * @SINCE 1.50.0
         * @deprecated (since 1.72.0)
         *
         * Provides a loader that uses the DVL library to load VDS and VDSL files.
         */
        class ContentManager extends sap.ui.vk.ContentManager {
          /**
           * Constructor for a new ContentManager.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ContentManager#constructor
           * sap.ui.vk.ContentManager} can be used.
           */
          constructor(
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: sap.ui.vk.dvl.$ContentManagerSettings
          );
          /**
           * Constructor for a new ContentManager.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ContentManager#constructor
           * sap.ui.vk.ContentManager} can be used.
           */
          constructor(
            /**
             * ID for the new ContentManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: sap.ui.vk.dvl.$ContentManagerSettings
          );

          /**
           * @SINCE 1.50.0
           *
           * Collects and destroys unused objects and resources.
           */
          collectGarbage(): sap.ui.vk.ContentManager;
          /**
           * @SINCE 1.50.0
           *
           * Destroys the content.
           */
          destroyContent(
            /**
             * The content to destroy.
             */
            content: any
          ): sap.ui.vk.ContentManager;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.ContentManager with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.ContentManager>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.ContentManager.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * @SINCE 1.50.0
           *
           * Gets optional Emscripten runtime module settings.
           */
          static getRuntimeSettings(): object;
          /**
           * @SINCE 1.50.0
           *
           * Gets optional WebGL context attributes.
           */
          static getWebGLContextAttributes(): object;
          /**
           * @SINCE 1.50.0
           *
           * Starts downloading and building or updating the content from the content resources.
           *
           * This method is asynchronous.
           */
          loadContent(
            /**
             * The current content to update. It can be `null` if this is an initial loading call.
             */
            content: any,
            /**
             * The content resources to load or update.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.ContentManager;
          /**
           * @SINCE 1.50.0
           *
           * Sets optional Emscripten runtime module settings.
           *
           * Emscripten runtime module settings cannot be changed after the Emscripten module is initialized.
           */
          static setRuntimeSettings(
            /**
             * A JSON object with the following properties.
             */
            settings: {
              /**
               * The size of Emscripten module memory in bytes, default value: 512 MB.
               */
              totalMemory?: int;
              /**
               * ID of a textarea DOM element to write the log to.
               */
              logElementId?: string;
              /**
               * ID of a DOM element to write the status messages to.
               */
              statusElementId?: string;
            }
          ): void;
          /**
           * @SINCE 1.50.0
           *
           * Sets optional WebGL context attributes.
           */
          static setWebGLContextAttributes(
            /**
             * A JSON object with the following properties.
             */
            attributes: {
              /**
               * If set to `true`, the context will attempt to perform antialiased rendering if possible.
               */
              antialias?: boolean;
              /**
               * If set to `true`, the context will have an alpha (transparency) channel.
               */
              alpha?: boolean;
              /**
               * If set to `true`, the color channels in the framebuffer will be stored premultiplied by the alpha channel
               * to improve performance. Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL
               * context attributes} are also supported. WebGL context attributes cannot be changed after the control
               * is fully initialized.
               */
              premultipliedAlpha?: boolean;
            }
          ): void;
        }
        /**
         * @SINCE 1.32.0
         * @deprecated (since 1.72.0)
         *
         * Loads the DVL library, wraps it, and makes the wrapper available for the application.
         *
         * Example:
         *
         * ```javascript
         *    var oGraphicsCore = new GraphicsCore();```
         */
        class GraphicsCore extends sap.ui.base.EventProvider {
          /**
           * Constructor for a new GraphicsCore.
           */
          constructor(
            /**
             * The Emscripten runtime settings.
             */
            runtimeSettings: {
              /**
               * The size of Emscripten module memory in bytes.
               */
              totalMemory: int;
              /**
               * The ID of a textarea DOM element to write the log to.
               */
              logElementId: string;
              /**
               * The ID of a DOM element to write the status messages to.
               */
              statusElementId: string;
            },
            /**
             * The WebGL context attributes. See {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
             * WebGL context attributes}.
             */
            webGLContextAttributes: object
          );

          /**
           * Builds a scene tree from the hierarchy of content resources. The content resources must be already downloaded.
           */
          buildSceneTree(
            /**
             * The array of content resources to build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.dvl.Scene;
          /**
           * Builds a scene tree from the hierarchy of content resources. The content resources must be already loaded.
           */
          buildSceneTreeAsync(
            /**
             * The array of content resources to build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): Promise<any>;
          /**
           * Collects and destroys unused objects and resources.
           */
          collectGarbage(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * @deprecated (since 1.50.0)
           *
           * Creates a new ViewStateManager object.
           *
           * GraphicsCore owns the new ViewStateManager object. The object must be destroyed with the {@link #destroyViewStateManager
           * destroyViewStateManager} method;
           */
          createViewStateManager(
            /**
             * The NodeHierarchy object the view state manager is created for.
             */
            nodeHierarchy: sap.ui.vk.NodeHierarchy,
            /**
             * Flag set by the application to decide whether the {sap.ui.vk.ViewStateManager} should track the visibility
             * changes or not.
             */
            shouldTrackVisibilityChanges: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Destroys the scene object.
           */
          destroyScene(
            /**
             * The scene to destroy.
             */
            vkScene: sap.ui.vk.dvl.Scene
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * @deprecated (since 1.50.0)
           *
           * Destroys the ViewStateManager object created with the {@link #createViewStateManager createViewStateManager}
           * method.
           */
          destroyViewStateManager(
            /**
             * The ViewStateManagerObject to destroy.
             */
            viewStateManager: sap.ui.vk.ViewStateManager
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.GraphicsCore with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.GraphicsCore>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets one of APIs supported by the DVL library.
           */
          getApi(
            /**
             * The API identifier.
             */
            apiId: sap.ui.vk.dvl.GraphicsCoreApi
          ): object;
          /**
           * Gets an object that decrypts content of encrypted models.
           */
          getDecryptionHandler(): sap.ui.vk.DecryptionHandler;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.GraphicsCore.
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Loads content resources.
           *
           * Content resources can be downloaded from a URL or loaded from a local file.
           */
          loadContentResourcesAsync(
            /**
             * The content resources to build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[],
            /**
             * The callback function to call when all content resources are processed. The onComplete callback parameter
             * `sourcesFailedToLoad` takes an array of objects with the properties: source (The content resource that
             * failed to load), status (The VIT Message code i.e 'VIT22') and statusText (VIT Message Summary).
             */
            onComplete: Function,
            /**
             * The callback function to call to report the file loading progress.
             */
            onProgress: Function
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Sets an object that decrypts content of encrypted models.
           */
          setDecryptionHandler(
            /**
             * An object that decrypts content of encrypted models.
             */
            handler: sap.ui.vk.DecryptionHandler
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Shows or hides debug information in the viewports.
           */
          showDebugInfo(
            /**
             * `true` to show debug information, `false` to hide debug information.
             */
            enable: boolean
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Updates or rebuilds a scene tree from the hierarchy of content resources.
           *
           * The content resources must be already loaded. Some changes in the content resource hierarchy can lead
           * to rebuilding the scene completely. In this case a new scene is created.
           */
          updateSceneTree(
            /**
             * The scene to update or null to force to create a new one.
             */
            vkScene: sap.ui.vk.dvl.Scene,
            /**
             * The array of content resources to update or build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[],
            /**
             * The callback function to call when an error happens.
             */
            onError?: Function
          ): sap.ui.vk.dvl.Scene;
          /**
           * Updates or rebuilds a scene tree from the hierarchy of content resources.
           *
           * The content resources must be already loaded. Some changes in the content resource hierarchy can lead
           * to rebuilding the scene completely. In this case a new scene is created.
           */
          updateSceneTreeAsync(
            /**
             * The scene to update or null to force to create a new one.
             */
            vkScene: sap.ui.vk.dvl.Scene,
            /**
             * The array of content resources to update or build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): Promise<any>;
        }
        /**
         * @deprecated (since 1.72.0)
         *
         * Provides a proxy object to the layer in the node hierarchy.
         *
         * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple
         * layers.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
         * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
         * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
         */
        class LayerProxy extends sap.ui.vk.LayerProxy {
          /**
           * Constructor for a new LayerProxy.
           *
           * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
           * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
           * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.LayerProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.LayerProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.LayerProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the description of the layer.
           */
          getDescription(): string;
          /**
           * Gets the layer ID.
           */
          getLayerId(): string;
          /**
           * Gets the layer metadata.
           */
          getLayerMetadata(): object;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.LayerProxy.
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the layer
           */
          getName(): string;
          /**
           * Gets an array of IDs of nodes belonging to the layer.
           */
          getNodes(): string[];
          /**
           * Gets the layer VE IDs.
           */
          getVeIds(): object[];
        }
        /**
         * @SINCE 1.32.0
         * @deprecated (since 1.72.0)
         *
         * Provides the ability to explore a Scene object's node structure.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
         */
        class NodeHierarchy extends sap.ui.vk.NodeHierarchy {
          /**
           * Constructor for a new NodeHierarchy.
           *
           * The objects of this class should not be created directly, and should only be created via a call to {@link
           * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
           */
          constructor();

          /**
           * Creates a layer proxy object.
           *
           * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
           */
          createLayerProxy(
            /**
             * The layer ID for which to create a proxy object.
             */
            layerId: string
          ): sap.ui.vk.LayerProxy;
          /**
           * @SINCE 1.48.0
           *
           * Creates a new node.
           */
          createNode(
            /**
             * The parent node reference where the created node is added to. If equals `null` the newly created node
             * is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * @SINCE 1.48.0
           *
           * Creates a copy of an existing node.
           */
          createNodeCopy(
            /**
             * The reference to the node to copy.
             */
            nodeToCopy: any,
            /**
             * The reference to the parent node where the created node is added to. If equals `null` the newly created
             * node is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * Creates a node proxy object.
           *
           * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
           */
          createNodeProxy(
            /**
             * The node reference for which to create a proxy object.
             */
            nodeRef: any
          ): sap.ui.vk.dvl.NodeProxy;
          /**
           * Destroys the layer proxy object.
           */
          destroyLayerProxy(
            /**
             * The layer proxy object.
             */
            layerProxy: sap.ui.vk.LayerProxy
          ): sap.ui.vk.LayerProxy;
          /**
           * Destroys the node proxy object.
           */
          destroyNodeProxy(
            /**
             * The node proxy object.
             */
            nodeProxy: sap.ui.vk.dvl.NodeProxy
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Enumerates the ancestor nodes of a particular node in the Scene object.
           *
           * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
           * to which it passes the ancestor nodes to one by one.
           *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
           * to the `callback` function.
           *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
           */
          enumerateAncestors(
            /**
             * The node reference whose ancestor nodes we want enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to pass the node references of the ancestor nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the ancestor nodes are passed to the `callback` function.
             *
             *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          enumerateChildren(
            /**
             * The node reference whose child nodes we want enumerated.
             *  When `nodeRef` is specified, the child nodes of this node are enumerated.
             *  When no `nodeRef` is specified, only the top level nodes are enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          enumerateChildren(
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.NodeHierarchy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeHierarchy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.NodeHierarchy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Finds nodes in a scene via node name.
           */
          findNodesByName(
            /**
             * JSON object containing the search parameters.
             *  The following example shows what the structure of the `query` object should look like:
             * ```javascript
             * query = {
             * 	value: string | string[],
             * 	predicate: "equals" | "contains" | "startsWith",
             * 	caseSensitive: true | false
             * }```
             *
             *
             * 	 -  **query.value**
             *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
             * then all nodes in the scene will be returned.
             *  The following example shows a single string being passed in:
             * ```javascript
             * value: "Box #14"```
             *  The following example shows an array of strings being passed in:
             * ```javascript
             * value: ["Box #3", "box #4", "BOX #5"]```
             *
             * 	 -  **query.predicate**
             *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
             *
             *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
             * strings.
             *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
             * array of strings.
             *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
             * strings.
             *  If no value is specified, the search mode will default to `"equals"`.
             *
             *
             * 	 -  **query.caseSensitive**
             *  Indicates whether the search should be case sensitive or not.
             *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
             *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
             * search).
             */
            query: object
          ): string[];
          /**
           * Returns a list of IDs belonging to the ancestors of a particular node.
           */
          getAncestors(
            /**
             * The node reference of the node whose ancestors will be returned.
             */
            nodeRef: any
          ): string[];
          /**
           * Returns a list of IDs belonging to the children of a particular node.
           */
          getChildren(
            /**
             * The node reference of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
             * function, the IDs of the root nodes will be returned.
             */
            nodeRef: any,
            /**
             * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
             * children of that closed node will be returned. If `false`, then the children of that closed node
             * will not be returned.
             */
            stepIntoClosedNodes?: boolean
          ): string[];
          /**
           * Gets the GraphicsCore object this Scene object belongs to.
           */
          getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Returns a list of hotspot IDs.
           */
          getHotspotNodeIds(): string[];
          /**
           * Returns a list of layer IDs.
           */
          getLayers(): string[];
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.NodeHierarchy.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * @SINCE 1.73.0
           *
           * Get node content type
           */
          getNodeContentType(
            /**
             * The node reference
             */
            nodeRef: any
          ): sap.ui.vk.NodeContentType;
          /**
           * Gets the Scene object the node hierarchy belongs to.
           */
          getScene(): sap.ui.vk.Scene;
          /**
           * Gets the scene reference that this NodeHierarchy object wraps.
           */
          getSceneRef(): any;
          /**
           * @SINCE 1.48.0
           *
           * Deletes a node and destroys it.
           */
          removeNode(
            /**
             * The reference to a node or an array of nodes to destroy.
             */
            nodeRef: any
          ): sap.ui.vk.dvl.NodeHierarchy;
        }
        /**
         * @SINCE 1.32.0
         * @deprecated (since 1.72.0)
         *
         * Provides a proxy object to the node in the node hierarchy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
         * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
         * method.
         */
        class NodeProxy extends sap.ui.vk.NodeProxy {
          /**
           * Constructor for a new NodeProxy.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.NodeProxy with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.NodeProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.NodeProxy.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        }
        /**
         * @deprecated (since 1.72.0)
         *
         * Provides the interface for the 3D model.
         *
         * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
         * sap.ui.vk.ContentConnector}.
         */
        class Scene extends sap.ui.vk.Scene {
          /**
           * Constructor for a new Scene.
           *
           * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
           * sap.ui.vk.ContentConnector}.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.Scene with name `sClassName` and enriches it with the information
           * contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Scene.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.Scene>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default node hierarchy in the Scene object.
           */
          getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the GraphicsCore object this Scene object belongs to.
           */
          getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Gets the unique ID of the Scene object.
           */
          getId(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.Scene.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * Gets the DVL scene ID.
           */
          getSceneRef(): string;
        }
        /**
         * @deprecated (since 1.72.0)
         *
         * Provides a rendering canvas for the 3D elements of a loaded scene.
         */
        class Viewport extends sap.ui.vk.ViewportBase {
          /**
           * Constructor for a new Viewport.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * Initial settings for the new Viewport control.
             */
            mSettings?: sap.ui.vk.dvl.$ViewportSettings
          );
          /**
           * Constructor for a new Viewport.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new Viewport control. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new Viewport control.
             */
            mSettings?: sap.ui.vk.dvl.$ViewportSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           *
           * This event will be fired when the frame rendering has finished.
           */
          attachFrameRenderingFinished(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           *
           * This event will be fired when the frame rendering has finished.
           */
          attachFrameRenderingFinished(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachPan(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachPan(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachRotate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachRotate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachZoom(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachZoom(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Marks the start of the current gesture operation.
           */
          beginGesture(
            /**
             * The x-coordinate of the gesture.
             */
            x: int,
            /**
             * The y-coordinate of the gesture.
             */
            y: int
          ): sap.ui.vk.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFrameRenderingFinished(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:pan pan} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPan(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotate rotate} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:zoom zoom} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachZoom(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Marks the end of the current gesture operation.
           */
          endGesture(): sap.ui.vk.Viewport;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.Viewport with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewportBase.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.Viewport>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:frameRenderingFinished frameRenderingFinished} to attached listeners.
           */
          fireFrameRenderingFinished(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): this;
          /**
           * Fires event {@link #event:pan pan} to attached listeners.
           */
          firePan(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: int;

              dy?: int;
            }
          ): this;
          /**
           * Fires event {@link #event:rotate rotate} to attached listeners.
           */
          fireRotate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: int;

              dy?: int;
            }
          ): this;
          /**
           * Fires event {@link #event:zoom zoom} to attached listeners.
           */
          fireZoom(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              zoomFactor?: float;
            }
          ): this;
          /**
           * Gets current value of property {@link #getBackgroundColorBottomABGR backgroundColorBottomABGR}.
           *
           * Viewport background bottom color in the ABGR format
           *
           * Default value is `0xffffffff`.
           */
          getBackgroundColorBottomABGR(): int;
          /**
           * Gets current value of property {@link #getBackgroundColorTopABGR backgroundColorTopABGR}.
           *
           * Viewport background top color in the ABGR format
           *
           * Default value is `0xff000000`.
           */
          getBackgroundColorTopABGR(): int;
          /**
           * @deprecated (since 1.50.0)
           *
           * Gets the {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object the Viewport is attached to.
           */
          getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
          /**
           *
           */
          getIsolatedNode(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.Viewport.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets position and size of the viewport square. The information can be used for making calculations when
           * restoring Redlining elements.
           */
          getOutputSize(): object;
          /**
           * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like
           * object. The information can then be used at a later time to restore the scene to the same camera view
           * using the {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.
           */
          getViewInfo(
            /**
             * Query object which indicates what information to be retrieved.
             */
            query?: {
              /**
               * Indicator to retrieve camera information.
               */
              camera?:
                | boolean
                | {
                    /**
                     * Indicator to retrieve camera view and projection matrices.
                     */
                    matrices?: boolean;
                    /**
                     * Indicator to retrieve the transition camera properties instead of regular one's.
                     */
                    useTransitionCamera?: boolean;
                  };
              /**
               * Indicator to retrieve animation information.
               */
              animation?: boolean;
              /**
               * Indicator to retrieve visibility information.
               */
              visibility?:
                | boolean
                | {
                    /**
                     * Indicator to retrieve the complete visibility definition or just the difference.
                     */
                    mode?: sap.ui.vk.VisibilityMode;
                  };
            }
          ): object;
          /**
           * Performs a `pan` gesture to pan across the Viewport.
           */
          pan(
            /**
             * The change in distance along the x-coordinate.
             */
            dx: int,
            /**
             * The change in distance along the y-coordinate.
             */
            dy: int
          ): sap.ui.vk.Viewport;
          /**
           * Queues a command for execution during the rendering cycle. All gesture operations should be called using
           * this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.Viewport;
          /**
           * Executes a rectangular selection.
           */
          rectSelect(
            /**
             * The x-coordinate of starting vertex of selection rectangle.
             */
            x1: int,
            /**
             * The y-coordinate of starting vertex of selection rectangle.
             */
            y1: int,
            /**
             * The x-coordinate of ending vertex of selection rectangle.
             */
            x2: int,
            /**
             * The y-coordinate of ending vertex of selection rectangle.
             */
            y2: int
          ): any[];
          /**
           * Rotates the content resource displayed on the Viewport.
           */
          rotate(
            /**
             * The change in x-coordinate used to define the desired rotation.
             */
            dx: int,
            /**
             * The change in y-coordinate used to define the desired rotation.
             */
            dy: int
          ): sap.ui.vk.Viewport;
          /**
           * Sets the background color for the bottom area of the Viewport.
           */
          setBackgroundColorBottomABGR(
            /**
             * Takes an integer value as parameter. For example: 0xffffffff as hexadecimal value (0x prefix, FF alpha,
             * FF blue, FF green, FF red)
             */
            integerColor: int
          ): sap.ui.vk.Viewport;
          /**
           * Sets the background color for the top area of the Viewport.
           */
          setBackgroundColorTopABGR(
            /**
             * Takes an integer value as parameter. For example: 0xffffffff as hexadecimal value (0x prefix, FF alpha,
             * FF blue, FF green, FF red)
             */
            integerColor: int
          ): sap.ui.vk.Viewport;
          /**
           * @deprecated (since 1.50.0)
           *
           * Attaches or detaches the Viewport to the {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object.
           */
          setGraphicsCore(
            /**
             * The {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object or `null`. If the `graphicsCore` parameter
             * is not `null`, a rendering object corresponding to the Viewport is created. If the `graphicsCore` parameter
             * is `null`, the rendering object corresponding to the Viewport is destroyed.
             */
            graphicsCore: sap.ui.vk.dvl.GraphicsCore
          ): sap.ui.vk.Viewport;
          /**
           * @deprecated (since 1.50.0)
           *
           * Attaches the scene to the Viewport for rendering.
           */
          setScene(
            /**
             * The scene to attach to the Viewport.
             */
            scene: sap.ui.vk.Scene
          ): sap.ui.vk.Viewport;
          /**
           * Set selection rectangle for rendering
           */
          setSelectionRect(
            /**
             * coordinates of selection rectangle
             */
            rect: object
          ): void;
          /**
           *
           */
          setShouldRenderFrame(): sap.ui.vk.Viewport;
          /**
           * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo
           * getViewInfo} method.
           *  Internally, the `setViewInfo` method activates certain steps at certain animation times, and then changes
           * the camera position, rotation and field of view (FOV) / zoom factor.
           */
          setViewInfo(
            /**
             * A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo
             * getViewInfo} method.
             */
            viewInfo: {
              /**
               * A JSON-like object containing the camera information.
               */
              camera?: {
                /**
                 * Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
                 */
                rotation: {
                  /**
                   * Angle around the vertical axis in degrees.
                   */
                  yaw: float;
                  /**
                   * Angle around the lateral axis in degrees.
                   */
                  pitch: float;
                  /**
                   * Angle around the longitudinal axis in degrees.
                   */
                  roll: float;
                };
                /**
                 * Position defined in 3-dimensional space.
                 */
                position: {
                  /**
                   * X coordinate.
                   */
                  x: float;
                  /**
                   * Y coordinate.
                   */
                  y: float;
                  /**
                   * Z coordinate.
                   */
                  z: float;
                };
                /**
                 * Camera field of view binding type.
                 */
                bindingType: sap.ui.vk.CameraFOVBindingType;
                /**
                 * Camera projection type.
                 */
                projectionType: sap.ui.vk.CameraProjectionType;
                /**
                 * Camera field of view in degrees. Applicable only to perspective cameras.
                 */
                fieldOfView: float;
                /**
                 * Camera zoom factor. Applicable only to orthographic cameras.
                 */
                zoomFactor: float;
              };
              /**
               * A JSON-like object containing the animation information.
               */
              animation?: {
                /**
                 * Step VE ID. If it is omitted then procedure and step indices are used.
                 */
                stepVeId?: string;
                /**
                 * Procedure index in the list of procedures.
                 */
                procedureIndex?: int;
                /**
                 * Step index in the list of steps in the procedure.
                 */
                stepIndex?: int;
                /**
                 * Time at which to activate the step.
                 */
                animationTime?: float;
              };
              /**
               * A JSON-like object containing the visibility information.
               */
              visibility?: {
                /**
                 * If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete} then the visible and hidden
                 * fields are defined. If the mode equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
                 * the changes field is defined.
                 */
                mode: sap.ui.vk.VisibilityMode;
                /**
                 * List of Ids of visible nodes.
                 */
                visible: string[];
                /**
                 * List of Ids of hidden nodes.
                 */
                hidden: string[];
                /**
                 * List of Ids of nodes with inverted visibility.
                 */
                changes: string[];
              };
            },
            /**
             * Fly-to animation duration in seconds.
             */
            flyToDuration?: float
          ): sap.ui.vk.Viewport;
          /**
           *
           */
          showHotspots(
            /**
             * The node reference or the array of node references that we want to tint.
             */
            nodeRefs: any | any[],
            /**
             * Whether to highlight the nodes or remove the highlight.
             */
            show: boolean,
            /**
             * The color to use for highlighting the nodes passed as argument.
             */
            color: int | /* was: sap.ui.vk.CSSColor */ any
          ): sap.ui.vk.Viewport;
          /**
           * Executes a click or tap gesture.
           */
          tap(
            /**
             * The tap gesture's x-coordinate.
             */
            x: int,
            /**
             * The tap gesture's y-coordinate.
             */
            y: int,
            /**
             * Indicates whether the tap gesture should be interpreted as a double-click. A value of `true` indicates
             * a double-click gesture, and `false` indicates a single click gesture.
             */
            isDoubleClick: boolean
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Performs a `zoom` gesture to zoom in or out on the beginGesture coordinate.
           */
          zoom(
            /**
             * Zoom factor. A scale factor that specifies how much to zoom in or out by.
             */
            dy: float
          ): sap.ui.vk.Viewport;
          /**
           * Zooms the scene to a bounding box created from a particular set of nodes.
           */
          zoomTo(
            /**
             * What set of nodes to zoom to.
             */
            what: sap.ui.vk.ZoomTo | sap.ui.vk.ZoomTo[],
            /**
             * Is only used if what == sap.ui.vk.ZoomTo.Node.
             */
            nodeRef: any,
            /**
             * Time to perform the "fly to" animation. Set to 0 to do this immediately.
             */
            crossFadeSeconds: float,
            /**
             * Margin. Set to 0 to zoom to the entire screen.
             */
            margin: float
          ): sap.ui.vk.Viewport;
        }
        /**
         * @deprecated (since 1.72.0)
         *
         * Manages the visibility and selection states of nodes in the scene.
         */
        class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: sap.ui.vk.dvl.$ViewStateManagerSettings
          );
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * ID for the new ViewStateManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: sap.ui.vk.dvl.$ViewStateManagerSettings
          );

          /**
           * Enumerates IDs of the selected nodes.
           */
          enumerateSelection(
            /**
             * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
             */
            callback: Function
          ): sap.ui.vk.ViewStateManager;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.ViewStateManager with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.dvl.ViewStateManager>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.ViewStateManager.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets the NodeHierarchy object associated with this ViewStateManager object.
           */
          getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the opacity of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          getOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): float | float[];
          /**
           * Gets the selection state of the node.
           *
           * If a single node reference is passed to the method then a single selection state is returned.
           *  If an array of node references is passed to the method then an array of selection states is returned.
           */
          getSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Gets the tint color of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          getTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
             * is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | int | int[];
          /**
           * Gets the visibility changes in the current ViewStateManager object.
           */
          getVisibilityChanges(): string[];
          /**
           * Gets the visibility state of nodes.
           *
           * If a single node reference is passed to the method then a single visibility state is returned.
           *  If an array of node references is passed to the method then an array of visibility states is returned.
           */
          getVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Sets the opacity of the nodes.
           */
          setOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
             * should be used.
             */
            opacity: float | null,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * @deprecated (since 1.56.3)
           *
           * Sets the selection state of the nodes.
           */
          setSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new selection state of the nodes.
             */
            selected: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets or resets the selection state of the nodes.
           */
          setSelectionStates(
            /**
             * The node reference or the array of node references of selected nodes.
             */
            selectedNodeRefs: any | any[],
            /**
             * The node reference or the array of node references of unselected nodes.
             */
            unselectedNodeRefs: any | any[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the tint color of the nodes.
           */
          setTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
             * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
             * color should be used.
             */
            tintColor: /* was: sap.ui.vk.CSSColor */ any | int | null,
            /**
             * This flag indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the visibility state of the nodes.
           */
          setVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new visibility state of the nodes.
             */
            visible: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean
          ): sap.ui.vk.ViewStateManager;
        }
        /**
         * @deprecated (since 1.72.0)
         *
         * The types of APIs supported by the {@link sap.ui.vk.dvl.GraphicsCore} class.
         */
        enum GraphicsCoreApi {
          /**
           * The legacy DVL API implemented in the com.sap.ve.dvl library (dvl.js).
           */
          LegacyDvl = "LegacyDvl",
        }
      }

      namespace svg {
        interface $ContentManagerSettings
          extends sap.ui.vk.$ContentManagerSettings {
          errorReported?: Function;
        }

        interface $NodeHierarchySettings
          extends sap.ui.vk.$NodeHierarchySettings {}

        interface $NodeProxySettings extends sap.ui.vk.$NodeProxySettings {}

        interface $OrthographicCameraSettings
          extends sap.ui.vk.$OrthographicCameraSettings {}

        interface $SceneSettings extends sap.ui.vk.$SceneSettings {}

        interface $ViewStateManagerSettings
          extends sap.ui.vk.$ViewStateManagerBaseSettings {}

        /**
         * Provides a simple, lightweight proxy object to a node in a node hierarchy.
         *
         * The objects of this class should not be created directly, and should only be created through the use
         * of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        class BaseNodeProxy
          extends sap.ui.vk.BaseNodeProxy
          implements sap.ui.base.Poolable {
          __implements__sap_ui_base_Poolable: boolean;
          /**
           * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
           * only be created through the use of the following methods:
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
           * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.svg.BaseNodeProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.BaseNodeProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.BaseNodeProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.svg.BaseNodeProxy.
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the node.
           */
          getName(): string;
          /**
           * Gets the node reference.
           */
          getNodeId(): any;
          /**
           * Gets the metadata of the node.
           */
          getNodeMetadata(): object;
          /**
           * Gets the reference object of the node.
           */
          getNodeRef(): object;
          /**
           * Gets the scene reference that this BaseNodeProxy object wraps.
           */
          getSceneRef(): any;
          /**
           * Initialize this BaseNodeProxy with its data.
           *
           * The `init` method is called by an object pool when the object is (re-)activated for a new caller.
           * See:
           * 	sap.ui.base.Poolable.prototype#init
           */
          init(
            /**
             * The NodeHierarchy object this BaseNodeProxy object belongs to.
             */
            nodeHierarchy: sap.ui.vk.svg.NodeHierarchy,
            /**
             * The reference object of the node for which to get BaseNodeProxy.
             */
            nodeRef: any
          ): void;
          /**
           * Reset BaseNodeProxy data, needed for pooling.
           * See:
           * 	sap.ui.base.Poolable.prototype#reset
           */
          reset(): void;
        }
        /**
         * @SINCE 1.80.0
         *
         * Provides a content manager object that uses to load 2D content.
         *
         * When registering a content manager resolver with {@link sap.ui.vk.ContentConnector.addContentManagerResolver
         * sap.ui.vk.ContentConnector.addContentManagerResolver} you can pass a function that will load a model
         * and merge it into the three.js scene.
         */
        class ContentManager extends sap.ui.vk.ContentManager {
          /**
           * Constructor for a new ContentManager.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link sap.ui.vk.ContentConnector.addContentManagerResolver sap.ui.vk.ContentConnector.addContentManagerResolver}
           * for an example.
           */
          constructor(
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: sap.ui.vk.svg.$ContentManagerSettings
          );
          /**
           * Constructor for a new ContentManager.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link sap.ui.vk.ContentConnector.addContentManagerResolver sap.ui.vk.ContentConnector.addContentManagerResolver}
           * for an example.
           */
          constructor(
            /**
             * ID for the new ContentManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: sap.ui.vk.svg.$ContentManagerSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:errorReported errorReported} event of this `sap.ui.vk.svg.ContentManager`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.svg.ContentManager` itself.
           */
          attachErrorReported(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.svg.ContentManager` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:errorReported errorReported} event of this `sap.ui.vk.svg.ContentManager`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.svg.ContentManager` itself.
           */
          attachErrorReported(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.svg.ContentManager` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:errorReported errorReported} event of this
           * `sap.ui.vk.svg.ContentManager`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachErrorReported(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.svg.ContentManager with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.ContentManager>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:errorReported errorReported} to attached listeners.
           */
          fireErrorReported(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              error?: any;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.svg.ContentManager.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * @SINCE 1.80.0
           *
           * Starts downloading and building or updating the content from the content resources.
           *
           * This method is asynchronous.
           */
          loadContent(
            /**
             * The current content to update. It can be `null` if this is an initial loading call.
             */
            content: any,
            /**
             * The content resources to load or update.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.ContentManager;
        }
        /**
         * Provides the ability to explore a Scene object's node structure.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene#getDefaultNodeHierarchy}.
         */
        class NodeHierarchy extends sap.ui.vk.NodeHierarchy {
          /**
           * Constructor for a new NodeHierarchy.
           */
          constructor();

          /**
           * Creates a layer proxy object.
           *
           * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
           */
          createLayerProxy(
            /**
             * The layer ID for which to create a proxy object.
             */
            layerId: string
          ): sap.ui.vk.LayerProxy;
          /**
           * @SINCE 1.80.0
           *
           * Creates a new node.
           */
          createNode(
            /**
             * The reference object of the parent node where the created node is added to. If equals `null` the newly
             * created node is a top level node.
             */
            parentNode: /* was: sap.ui.vk.svg.Element */ any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: /* was: sap.ui.vk.svg.Element */ any,
            /**
             * The created node content type.
             */
            nodeContentType?: sap.ui.vk.NodeContentType,
            /**
             * Optional Json structure used to define node properties.
             */
            content?: object
          ): /* was: sap.ui.vk.svg.Element */ any;
          /**
           * @SINCE 1.80.0
           *
           * Creates a copy of an existing node.
           */
          createNodeCopy(
            /**
             * The reference object of the node to copy.
             */
            nodeToCopy: any,
            /**
             * The reference object of the parent node where the created node is added to. If equals `null` the newly
             * created node is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * Creates a node proxy object.
           *
           * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
           */
          createNodeProxy(
            /**
             * The reference object for which to create a proxy object.
             */
            nodeRef: any
          ): sap.ui.vk.NodeProxy;
          /**
           * Destroys the layer proxy object.
           */
          destroyLayerProxy(
            /**
             * The layer proxy object.
             */
            layerProxy: sap.ui.vk.LayerProxy
          ): /* was: sap.ui.vk.LayerHierarchy */ any;
          /**
           * Destroys the node proxy object.
           */
          destroyNodeProxy(
            /**
             * The node proxy object.
             */
            nodeProxy: sap.ui.vk.NodeProxy
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the ancestor nodes of a particular node in the Scene object.
           *
           * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
           * to which it passes the ancestor nodes to one by one.
           *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
           * to the `callback` function.
           *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
           */
          enumerateAncestors(
            /**
             * The reference object of a node whose ancestore nodes we want enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to pass the node references of the ancestore nodes, or the whole node proxy to the
             * `callback` function.
             *  If `true`, then only the node references of the ancestor nodes are passed to the `callback` function.
             *
             *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          enumerateChildren(
            /**
             * The reference object of a node whose child nodes we want enumerated.
             *  When `nodeRef` is specified, the child nodes of this node are enumerated.
             *  When no `nodeRef` is specified, only the top level nodes are enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          enumerateChildren(
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Creates a new subclass of class sap.ui.vk.svg.NodeHierarchy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeHierarchy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.NodeHierarchy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Finds nodes in a scene via node name.
           */
          findNodesByName(
            /**
             * JSON object containing the search parameters.
             *  The following example shows what the structure of the `query` object should look like:
             * ```javascript
             * query = {
             * 	value: string | string[],
             * 	predicate: "equals" | "contains" | "startsWith",
             * 	caseSensitive: true | false
             * }```
             *
             *
             * 	 -  **query.value**
             *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
             * then all nodes in the scene will be returned.
             *  The following example shows a single string being passed in:
             * ```javascript
             * value: "Box #14"```
             *  The following example shows an array of strings being passed in:
             * ```javascript
             * value: ["Box #3", "box #4", "BOX #5"]```
             *
             * 	 -  **query.predicate**
             *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
             *
             *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
             * strings.
             *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
             * array of strings.
             *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
             * strings.
             *  If no value is specified, the search mode will default to `"equals"`.
             *
             *
             * 	 -  **query.caseSensitive**
             *  Indicates whether the search should be case sensitive or not.
             *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
             *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
             * search).
             */
            query: object
          ): /* was: sap.ui.vk.svg.Element */ any[];
          /**
           * Returns a list of reference objects belonging to the ancestors of a particular node.
           */
          getAncestors(
            /**
             * The reference object of the node whose ancestors will be returned.
             */
            nodeRef: any
          ): any[];
          /**
           * Returns a list of reference objects belonging to the children of a particular node.
           */
          getChildren(
            /**
             * The reference object of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
             * function, the reference objects of the root nodes will be returned.
             */
            nodeRef: any,
            /**
             * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
             * children of that closed node will be returned. If `false`, then the children of that closed node
             * will not be returned.
             */
            stepIntoClosedNodes?: boolean
          ): any[];
          /**
           * Returns a list of hotspots.
           */
          getHotspotNodeIds(): any[];
          /**
           * Returns a list of layer IDs.
           */
          getLayers(): string[];
          /**
           * Returns a metadata object for class sap.ui.vk.svg.NodeHierarchy.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * @SINCE 1.80.0
           *
           * Get node content type
           */
          getNodeContentType(
            /**
             * The node reference
             */
            nodeRef: any
          ): sap.ui.vk.NodeContentType;
          /**
           * Gets the Scene object the node hierarchy belongs to.
           */
          getScene(): sap.ui.vk.Scene;
          /**
           * Gets the scene reference that this NodeHierarchy object wraps.
           */
          getSceneRef(): any;
          /**
           * @SINCE 1.80.0
           *
           * Deletes a node and destroys it.
           */
          removeNode(
            /**
             * The reference object of a node or an array of nodes to destroy.
             */
            nodeRef: any
          ): sap.ui.vk.NodeHierarchy;
        }
        /**
         * Provides a proxy object to the node in the node hierarchy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
         * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
         * method.
         */
        class NodeProxy extends sap.ui.vk.NodeProxy {
          /**
           * Constructor for a new NodeProxy.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.svg.NodeProxy with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.NodeProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.svg.NodeProxy.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        }
        /**
         * @SINCE 1.80.0
         *
         * Provides the interface for the camera.
         */
        class OrthographicCamera extends sap.ui.vk.OrthographicCamera {
          /**
           * Constructor for a new OrthographicCamera.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.svg.OrthographicCamera with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.OrthographicCamera.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.OrthographicCamera>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.svg.OrthographicCamera.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        }
        /**
         * Provides the interface for the 2D model.
         *
         * The objects of this class should not be created directly.
         */
        class Scene extends sap.ui.vk.Scene {
          /**
           * Constructor for a new Scene.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.svg.Scene with name `sClassName` and enriches it with the information
           * contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Scene.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.Scene>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default node hierarchy in the Scene object.
           */
          getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the unique ID of the Scene object.
           */
          getId(): string;
          /**
           * Get initial view
           */
          getInitialView(): sap.ui.vk.View;
          /**
           * Returns a metadata object for class sap.ui.vk.svg.Scene.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * Gets the root element reference for the Scene object.
           */
          getRootElement(): /* was: sap.ui.vk.svg.Element */ any;
          /**
           * Gets the persistent ID from node reference.
           */
          nodeRefToPersistentId(
            /**
             * The reference to the node or the array of references to the nodes.
             */
            nodeRefs: /* was: sap.ui.vk.svg.Element */
              | any
              | /* was: sap.ui.vk.svg.Element */ any[]
          ): string | string[];
          /**
           * Gets the node reference from persistent ID.
           */
          persistentIdToNodeRef(
            /**
             * The persistent ID or the array of the persistent IDs.
             */
            pIDs: string | string[]
          ): /* was: sap.ui.vk.svg.Element */
            | any
            | /* was: sap.ui.vk.svg.Element */ any[];
          /**
           * Set initial view
           */
          setInitialView(
            /**
             * intial view
             */
            view: sap.ui.vk.View
          ): void;
        }
        /**
         * @SINCE 1.80.0
         *
         * Manages the visibility and selection states of nodes in the scene.
         */
        class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: sap.ui.vk.svg.$ViewStateManagerSettings
          );
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * ID for the new ViewStateManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: sap.ui.vk.svg.$ViewStateManagerSettings
          );

          /**
           * Enumerates IDs of the selected nodes.
           */
          enumerateSelection(
            /**
             * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
             */
            callback: Function
          ): sap.ui.vk.ViewStateManager;
          /**
           * Creates a new subclass of class sap.ui.vk.svg.ViewStateManager with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.svg.ViewStateManager>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default highlighting color
           */
          getHighlightColor(
            /**
             * This flag indicates to return the highlighting color in the ABGR format, if it equals `false` then the
             * color is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | string | int;
          /**
           * Returns a metadata object for class sap.ui.vk.svg.ViewStateManager.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets the NodeHierarchy object associated with this ViewStateManager object.
           */
          getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the opacity of the node.
           *
           * If a single node is passed to the method then a single value is returned.
           *  If an array of nodes is passed to the method then an array of values is returned.
           */
          getOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): float | float[];
          /**
           * Gets the selection state of the node.
           *
           * If a single node reference is passed to the method then a single selection state is returned.
           *  If an array of node references is passed to the method then an array of selection states is returned.
           */
          getSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Gets the tint color of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          getTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
             * is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | int | int[];
          /**
           * Gets the visibility changes in the current ViewStateManager object.
           */
          getVisibilityChanges(): string[];
          /**
           * Gets the visibility state of nodes.
           *
           * If a single node is passed to the method then a single visibility state is returned.
           *  If an array of nodes is passed to the method then an array of visibility states is returned.
           */
          getVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Sets the default highlighting color
           */
          setHighlightColor(
            /**
             * The new highlighting color. The value can be defined as a string in the CSS color format or as an integer
             * in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint color should
             * be used.
             */
            color: /* was: sap.ui.vk.CSSColor */ any | string | int
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the opacity of the nodes.
           */
          setOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
             * should be used.
             */
            opacity: float | float[] | null,
            /**
             * This flag is not used, as opacity is always recursively applied to the offspring nodes by multiplication
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * @deprecated (since 1.80.0)
           *
           * Sets the selection state of the nodes.
           */
          setSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new selection state of the nodes.
             */
            selected: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets or resets the selection state of the nodes.
           */
          setSelectionStates(
            /**
             * The node reference or the array of node references of selected nodes.
             */
            selectedNodeRefs: any | any[],
            /**
             * The node reference or the array of node references of unselected nodes.
             */
            unselectedNodeRefs: any | any[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the tint color of the nodes.
           */
          setTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
             * integer in the ABGR format or it could be array of these values. If `null` is passed then the tint color
             * is reset and the node's own tint color should be used.
             */
            tintColor: /* was: sap.ui.vk.CSSColor */
              | any
              | int
              | /* was: sap.ui.vk.CSSColor */ any[]
              | int[]
              | null,
            /**
             * This flag indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the visibility state of the nodes.
           */
          setVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new visibility state or array of states of the nodes.
             */
            visible: boolean | boolean[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean
          ): sap.ui.vk.ViewStateManager;
        }
      }

      namespace threejs {
        interface $ContentManagerSettings
          extends sap.ui.vk.$ContentManagerSettings {}

        interface $MaterialSettings extends sap.ui.vk.$MaterialSettings {}

        interface $NodeHierarchySettings
          extends sap.ui.vk.$NodeHierarchySettings {}

        interface $NodeProxySettings extends sap.ui.vk.$NodeProxySettings {}

        interface $OrthographicCameraSettings
          extends sap.ui.vk.$OrthographicCameraSettings {}

        interface $PerspectiveCameraSettings
          extends sap.ui.vk.$PerspectiveCameraSettings {}

        interface $SceneSettings extends sap.ui.vk.$SceneSettings {}

        interface $TextureSettings extends sap.ui.vk.$TextureSettings {}

        interface $ViewportSettings extends sap.ui.vk.$ViewportBaseSettings {
          cameraChanged?: Function;

          frameRenderingFinished?: Function;
        }

        interface $ViewStateManagerSettings
          extends sap.ui.vk.$ViewStateManagerBaseSettings {}

        /**
         * Provides a simple, lightweight proxy object to a node in a node hierarchy.
         *
         * The objects of this class should not be created directly, and should only be created through the use
         * of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        class BaseNodeProxy
          extends sap.ui.vk.BaseNodeProxy
          implements sap.ui.base.Poolable {
          __implements__sap_ui_base_Poolable: boolean;
          /**
           * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
           * only be created through the use of the following methods:
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
           * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.BaseNodeProxy with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.BaseNodeProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.BaseNodeProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Indicates whether the node has child nodes.
           */
          getHasChildren(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.BaseNodeProxy.
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the node.
           */
          getName(): string;
          /**
           * Gets the node reference.
           */
          getNodeId(): any;
          /**
           * Gets the metadata of the node.
           */
          getNodeMetadata(): object;
          /**
           * Gets the reference object of the node.
           */
          getNodeRef(): object;
          /**
           * Gets the scene reference that this BaseNodeProxy object wraps.
           */
          getSceneRef(): any;
          /**
           * Initialize this BaseNodeProxy with its data.
           *
           * The `init` method is called by an object pool when the object is (re-)activated for a new caller.
           * See:
           * 	sap.ui.base.Poolable.prototype#init
           */
          init(
            /**
             * The NodeHierarchy object this BaseNodeProxy object belongs to.
             */
            nodeHierarchy: sap.ui.vk.threejs.NodeHierarchy,
            /**
             * The reference object of the node for which to get BaseNodeProxy.
             */
            nodeRef: any
          ): void;
          /**
           * Reset BaseNodeProxy data, needed for pooling.
           * See:
           * 	sap.ui.base.Poolable.prototype#reset
           */
          reset(): void;
        }
        /**
         * @SINCE 1.50.0
         *
         * Provides a content manager object that uses the three.js library to load 3D files.
         *
         * When registering a content manager resolver with {@link sap.ui.vk.ContentConnector.addContentManagerResolver
         * sap.ui.vk.ContentConnector.addContentManagerResolver} you can pass a function that will load a model
         * and merge it into the three.js scene.
         *
         * The loader function takes two parameters:
         * 	 - parentNode - {@link https://threejs.org/docs/index.html#api/objects/Group THREE.Group} - a grouping
         * 			node to merge the content into
         * 	 - contentResource - {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} - a content resource
         * 			to load  The loader function returns a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
         * 			Promise} object. If the loading the model succeeds the promise object resolves with a value with the
         * 			following structure:
         * 	 - node - {@link https://threejs.org/docs/index.html#api/objects/Group THREE.Group} - the grouping node
         * 			to which the content is merged into. It should be the `parentNode` parameter that was passed to the loader
         * 			function.
         * 	 - contentResource - {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} - the content resource
         * 			that was loaded.
         */
        class ContentManager extends sap.ui.vk.ContentManager {
          /**
           * Constructor for a new ContentManager.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ContentManager#constructor
           * sap.ui.vk.ContentManager} can be used.
           * See:
           * 	{@link sap.ui.vk.ContentConnector.addContentManagerResolver sap.ui.vk.ContentConnector.addContentManagerResolver}
           * for an example.
           */
          constructor(
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: sap.ui.vk.threejs.$ContentManagerSettings
          );
          /**
           * Constructor for a new ContentManager.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ContentManager#constructor
           * sap.ui.vk.ContentManager} can be used.
           * See:
           * 	{@link sap.ui.vk.ContentConnector.addContentManagerResolver sap.ui.vk.ContentConnector.addContentManagerResolver}
           * for an example.
           */
          constructor(
            /**
             * ID for the new ContentManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: sap.ui.vk.threejs.$ContentManagerSettings
          );

          /**
           * @SINCE 1.50.0
           *
           * Collects and destroys unused objects and resources.
           */
          collectGarbage(): sap.ui.vk.ContentManager;
          /**
           * @SINCE 1.52.0
           *
           * Creates an Orthographic camera
           */
          createOrthographicCamera(): sap.ui.vk.OrthographicCamera;
          /**
           * @SINCE 1.52.0
           *
           * Creates a Perspective camera
           */
          createPerspectiveCamera(): sap.ui.vk.PerspectiveCamera;
          /**
           * @SINCE 1.50.0
           *
           * Destroys the content.
           */
          destroyContent(
            /**
             * The content to destroy.
             */
            content: any
          ): sap.ui.vk.ContentManager;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.ContentManager with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.ContentManager>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.ContentManager.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * @SINCE 1.50.0
           *
           * Starts downloading and building or updating the content from the content resources.
           *
           * This method is asynchronous.
           */
          loadContent(
            /**
             * The current content to update. It can be `null` if this is an initial loading call.
             */
            content: any,
            /**
             * The content resources to load or update.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.ContentManager;
        }
        /**
         * @EXPERIMENTAL (since 1.60.0)
         *
         * Provides the interface for the material.
         */
        class Material extends sap.ui.vk.Material {
          /**
           * Constructor for a new Material.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Material with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Material.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.Material>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Material.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        }
        /**
         * Provides the ability to explore a Scene object's node structure.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene#getDefaultNodeHierarchy}.
         */
        class NodeHierarchy extends sap.ui.vk.NodeHierarchy {
          /**
           * Constructor for a new NodeHierarchy.
           */
          constructor();

          /**
           * Creates a layer proxy object.
           *
           * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
           */
          createLayerProxy(
            /**
             * The layer ID for which to create a proxy object.
             */
            layerId: string
          ): sap.ui.vk.LayerProxy;
          /**
           * @SINCE 1.48.0
           *
           * Creates a new node.
           */
          createNode(
            /**
             * The reference object of the parent node where the created node is added to. If equals `null` the newly
             * created node is a top level node.
             */
            parentNode: THREE.Object3D,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: THREE.Object3D,
            /**
             * The created node content type.
             */
            nodeContentType?: sap.ui.vk.NodeContentType,
            /**
             * Optional Json structure used to define node properties.
             */
            content?: object
          ): THREE.Object3D;
          /**
           * @SINCE 1.48.0
           *
           * Creates a copy of an existing node.
           */
          createNodeCopy(
            /**
             * The reference object of the node to copy.
             */
            nodeToCopy: any,
            /**
             * The reference object of the parent node where the created node is added to. If equals `null` the newly
             * created node is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * Creates a node proxy object.
           *
           * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
           */
          createNodeProxy(
            /**
             * The reference object for which to create a proxy object.
             */
            nodeRef: any
          ): sap.ui.vk.NodeProxy;
          /**
           * Destroys the layer proxy object.
           */
          destroyLayerProxy(
            /**
             * The layer proxy object.
             */
            layerProxy: sap.ui.vk.LayerProxy
          ): /* was: sap.ui.vk.LayerHierarchy */ any;
          /**
           * Destroys the node proxy object.
           */
          destroyNodeProxy(
            /**
             * The node proxy object.
             */
            nodeProxy: sap.ui.vk.NodeProxy
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the ancestor nodes of a particular node in the Scene object.
           *
           * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
           * to which it passes the ancestor nodes to one by one.
           *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
           * to the `callback` function.
           *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
           */
          enumerateAncestors(
            /**
             * The reference object of a node whose ancestore nodes we want enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to pass the node references of the ancestore nodes, or the whole node proxy to the
             * `callback` function.
             *  If `true`, then only the node references of the ancestor nodes are passed to the `callback` function.
             *
             *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          enumerateChildren(
            /**
             * The reference object of a node whose child nodes we want enumerated.
             *  When `nodeRef` is specified, the child nodes of this node are enumerated.
             *  When no `nodeRef` is specified, only the top level nodes are enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          enumerateChildren(
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.NodeHierarchy with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeHierarchy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.NodeHierarchy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Finds nodes in a scene via node name.
           */
          findNodesByName(
            /**
             * JSON object containing the search parameters.
             *  The following example shows what the structure of the `query` object should look like:
             * ```javascript
             * query = {
             * 	value: string | string[],
             * 	predicate: "equals" | "contains" | "startsWith",
             * 	caseSensitive: true | false
             * }```
             *
             *
             * 	 -  **query.value**
             *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
             * then all nodes in the scene will be returned.
             *  The following example shows a single string being passed in:
             * ```javascript
             * value: "Box #14"```
             *  The following example shows an array of strings being passed in:
             * ```javascript
             * value: ["Box #3", "box #4", "BOX #5"]```
             *
             * 	 -  **query.predicate**
             *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
             *
             *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
             * strings.
             *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
             * array of strings.
             *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
             * strings.
             *  If no value is specified, the search mode will default to `"equals"`.
             *
             *
             * 	 -  **query.caseSensitive**
             *  Indicates whether the search should be case sensitive or not.
             *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
             *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
             * search).
             */
            query: object
          ): THREE.Object3D[];
          /**
           * Returns a list of reference objects belonging to the ancestors of a particular node.
           */
          getAncestors(
            /**
             * The reference object of the node whose ancestors will be returned.
             */
            nodeRef: any
          ): any[];
          /**
           * Returns a list of reference objects belonging to the children of a particular node.
           */
          getChildren(
            /**
             * The reference object of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
             * function, the reference objects of the root nodes will be returned.
             */
            nodeRef: any,
            /**
             * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
             * children of that closed node will be returned. If `false`, then the children of that closed node
             * will not be returned.
             */
            stepIntoClosedNodes?: boolean
          ): any[];
          /**
           * Returns a list of hotspot IDs.
           */
          getHotspotNodeIds(): string[];
          /**
           * Returns a list of layer IDs.
           */
          getLayers(): string[];
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.NodeHierarchy.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * @SINCE 1.73.0
           *
           * Get node content type
           */
          getNodeContentType(
            /**
             * The node reference
             */
            nodeRef: any
          ): sap.ui.vk.NodeContentType;
          /**
           * Gets the Scene object the node hierarchy belongs to.
           */
          getScene(): sap.ui.vk.Scene;
          /**
           * Gets the scene reference that this NodeHierarchy object wraps.
           */
          getSceneRef(): any;
          /**
           * @SINCE 1.48.0
           *
           * Deletes a node and destroys it.
           */
          removeNode(
            /**
             * The reference object of a node or an array of nodes to destroy.
             */
            nodeRef: any
          ): sap.ui.vk.NodeHierarchy;
        }
        /**
         * Provides a proxy object to the node in the node hierarchy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
         * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
         * method.
         */
        class NodeProxy extends sap.ui.vk.NodeProxy {
          /**
           * Constructor for a new NodeProxy.
           */
          constructor();

          /**
           * Assign material to all mesh nodes contained in the current node
           */
          assignMaterial(
            /**
             * Material to be assigned.
             */
            value: sap.ui.vk.Material
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Retrieve all materials defined in the current node
           */
          enumerateMaterials(
            /**
             * If `true` then include materials defined in all child nodes
             */
            recursive: boolean
          ): sap.ui.vk.Material[];
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.NodeProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeProxy.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.NodeProxy>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * get local rotation represented by axis and angle
           */
          getLocalRotationInAngleAxis(): float[];
          /**
           * get local rotation in Euler form
           */
          getLocalRotationInEuler(): float[];
          /**
           * get local rotation represented by quaternion
           */
          getLocalRotationInQuaternion(): float[];
          /**
           * get local scale vector
           */
          getLocalScale(): float[];
          /**
           * get local translate vector
           */
          getLocalTranslate(): float[];
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.NodeProxy.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * Replace material with another material
           */
          replaceMaterial(
            /**
             * Material to be replaced.
             */
            materialToReplace: sap.ui.vk.Material,
            /**
             * Material replacement.
             */
            material: sap.ui.vk.Material
          ): sap.ui.vk.NodeHierarchy;
        }
        /**
         * @SINCE 1.52.0
         *
         * Provides the interface for the camera.
         */
        class OrthographicCamera extends sap.ui.vk.OrthographicCamera {
          /**
           * Constructor for a new OrthographicCamera.
           */
          constructor();

          /**
           * Adjust the camera near and far clipping planes to include the entire specified bounding box
           */
          adjustClipPlanes(
            /**
             * Bounding box
             */
            boundingBox: THREE.Box3
          ): sap.ui.vk.threejs.OrthographicCamera;
          /**
           * Adjust the camera zoom to include the entire specified bounding box
           */
          adjustZoom(
            /**
             * Bounding box
             */
            boundingBox: THREE.Box3
          ): sap.ui.vk.threejs.OrthographicCamera;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.OrthographicCamera with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.OrthographicCamera.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.OrthographicCamera>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.OrthographicCamera.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * Updates the camera properties with width and height of viewport
           */
          update(
            /**
             * width of the viewport
             */
            width: float,
            /**
             * height of the viewport
             */
            height: float
          ): void;
        }
        /**
         * @SINCE 1.52.0
         *
         * Provides the interface for the camera.
         */
        class PerspectiveCamera extends sap.ui.vk.PerspectiveCamera {
          /**
           * Constructor for a new PerspectiveCamera.
           */
          constructor();

          /**
           * Adjust the camera near and far clipping planes to include the entire specified bounding box
           */
          adjustClipPlanes(
            /**
             * Bounding box
             */
            boundingBox: THREE.Box3
          ): sap.ui.vk.threejs.PerspectiveCamera;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.PerspectiveCamera with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.PerspectiveCamera.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.PerspectiveCamera>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.PerspectiveCamera.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * Updates the camera properties with width and height of viewport
           */
          update(
            /**
             * width of the viewport
             */
            width: float,
            /**
             * height of the viewport
             */
            height: float
          ): void;
        }
        /**
         * Provides the interface for the 3D model.
         *
         * The objects of this class should not be created directly.
         */
        class Scene extends sap.ui.vk.Scene {
          /**
           * Constructor for a new Scene.
           */
          constructor(
            /**
             * The three.js scene object.
             */
            scene: THREE.Scene
          );

          /**
           * Gets all materials defined in scene nodes
           */
          enumerateMaterials(): sap.ui.vk.Material[];
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Scene with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Scene.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.Scene>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default node hierarchy in the Scene object.
           */
          getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the unique ID of the Scene object.
           */
          getId(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Scene.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
          /**
           * Gets the scene reference for the Scene object.
           */
          getSceneRef(): THREE.Scene;
          /**
           * Gets the persistent ID from node reference.
           */
          nodeRefToPersistentId(
            /**
             * The reference to the node or the array of references to the nodes.
             */
            nodeRefs: THREE.Object3D | THREE.Object3D[]
          ): string | string[];
          /**
           * Gets the node reference from persistent ID.
           */
          persistentIdToNodeRef(
            /**
             * The persistent ID or the array of the persistent IDs.
             */
            pIDs: string | string[]
          ): THREE.Object3D | THREE.Object3D[];
        }
        /**
         * @EXPERIMENTAL (since 1.60.0)
         *
         * Provides the interface for the material.
         */
        class Texture extends sap.ui.vk.Texture {
          /**
           * Constructor for a new Material.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Texture with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Texture.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.Texture>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Texture.
           */
          static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        }
        /**
         * Provides a base class control for three js canvas.
         */
        class Viewport extends sap.ui.vk.ViewportBase {
          /**
           * Constructor for a ThreeJs viewport.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * @SINCE 1.52.0
           *
           * Activates the view based on view object passed
           */
          activateView(
            /**
             * View object definition
             */
            view: sap.ui.vk.View,
            /**
             * true if view activation is part of playing view group
             */
            playViewGroup: boolean,
            /**
             * true if not animating the change of camera
             */
            notAnimateCameraChange: boolean
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cameraChanged cameraChanged} event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachCameraChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cameraChanged cameraChanged} event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachCameraChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachFrameRenderingFinished(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachFrameRenderingFinished(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:cameraChanged cameraChanged} event of this
           * `sap.ui.vk.threejs.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCameraChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.threejs.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFrameRenderingFinished(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Viewport with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewportBase.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.Viewport>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:cameraChanged cameraChanged} to attached listeners.
           */
          fireCameraChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Returns a new camera position.
               */
              position?: float[];
              /**
               * Returns a new camera rotation quaternion.
               */
              quaternion?: float[];
              /**
               * Returns a new camera orthographic zoom factor.
               */
              zoom?: float;
            }
          ): this;
          /**
           * Fires event {@link #event:frameRenderingFinished frameRenderingFinished} to attached listeners.
           */
          fireFrameRenderingFinished(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): this;
          /**
           * Get current view - remembered when activateView function is called
           */
          getCurrentView(): sap.ui.vk.View;
          /**
           * Returns viewport content as an image of desired size.
           */
          getImage(
            /**
             * Requested image width in pixels. Allowed values are 8 to 2048, default is 16
             */
            width: int,
            /**
             * Requested image height in pixels. Allowed values are 8 to 2048, default is 16
             */
            height: int,
            /**
             * The sap.ui.core.CSSColor to be used for top background color
             */
            topColor: string,
            /**
             * The sap.ui.core.CSSColor to be used for bottom background color
             */
            bottomColor: string,
            /**
             * Include selected nodes
             */
            includeSelection: boolean
          ): string;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Viewport.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * @EXPERIMENTAL (since 1.82.0)
           *
           * Returns object as an image of desired size.
           */
          getObjectImage(
            /**
             * The node reference.
             */
            nodeRef: any,
            /**
             * Requested image width in pixels. Allowed values are 8 to 2048, default is 256
             */
            width: int,
            /**
             * Requested image height in pixels. Allowed values are 8 to 2048, default is 256
             */
            height: int,
            /**
             * The sap.ui.core.CSSColor to be used for top background color
             */
            topColor: string,
            /**
             * The sap.ui.core.CSSColor to be used for bottom background color
             */
            bottomColor: string,
            /**
             * Optional camera rotation quaternion
             */
            quaternion: THREE.Quaternion,
            /**
             * The object margin
             */
            margin: float
          ): string;
          /**
           * Gets position and size of the viewport square. The information can be used for making calculations when
           * restoring Redlining elements.
           */
          getOutputSize(): object;
          /**
           * Gets the Viewport Scene
           */
          getScene(): sap.ui.vk.threejs.Scene;
          /**
           * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like
           * object. The information can then be used at a later time to restore the scene to the same camera view
           * using the {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.
           */
          getViewInfo(
            /**
             * Query object which indicates what information to be retrieved.
             */
            query?: {
              /**
               * Indicator to retrieve camera information.
               */
              camera?:
                | boolean
                | {
                    /**
                     * Indicator to retrieve camera view and projection matrices.
                     */
                    matrices?: boolean;
                    /**
                     * Indicator to retrieve the transition camera properties instead of regular one's.
                     */
                    useTransitionCamera?: boolean;
                  };
              /**
               * Indicator to retrieve visibility information.
               */
              visibility?:
                | boolean
                | {
                    /**
                     * Indicator to retrieve the complete visibility definition or just the difference.
                     */
                    mode?: sap.ui.vk.VisibilityMode;
                  };
              /**
               * Indicator to retrieve selection information.
               */
              selection?: boolean | object;
            }
          ): object;
          /**
           * Project 3D point to screen space
           */
          projectToScreen(
            /**
             * X coordinate in world space
             */
            x: float,
            /**
             * Y coordinate in world space
             */
            y: float,
            /**
             * Z coordinate in world space
             */
            z: float,
            /**
             * Camera to be used with calculation of projection
             */
            camera: sap.ui.vk.Camera
          ): object;
          /**
           * Queues a command for execution during the rendering cycle. All gesture operations should be called using
           * this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Sets the camera for the Viewport
           */
          setCamera(
            /**
             * parameter
             */
            camera: sap.ui.vk.Camera
          ): sap.ui.vk.threejs.Viewport;
          /**
           * @deprecated (since 1.50.0)
           *
           * Attaches the scene to the Viewport for rendering.
           */
          setScene(
            /**
             * The scene to attach to the Viewport.
             */
            scene: sap.ui.vk.threejs.Scene
          ): sap.ui.vk.threejs.Viewport;
          /**
           *
           */
          setShouldRenderFrame(): sap.ui.vk.threejs.Viewport;
          /**
           * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo
           * getViewInfo} method.
           *  Internally, the `setViewInfo` method activates certain steps at certain animation times, and then changes
           * the camera position, rotation and field of view (FOV) / zoom factor.
           */
          setViewInfo(
            /**
             * A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo
             * getViewInfo} method.
             */
            viewInfo: {
              /**
               * A JSON-like object containing the camera information.
               */
              camera?: {
                /**
                 * Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
                 */
                rotation: {
                  /**
                   * Angle around the vertical axis in degrees.
                   */
                  yaw: float;
                  /**
                   * Angle around the lateral axis in degrees.
                   */
                  pitch: float;
                  /**
                   * Angle around the longitudinal axis in degrees.
                   */
                  roll: float;
                };
                /**
                 * Position defined in 3-dimensional space.
                 */
                position: {
                  /**
                   * X coordinate.
                   */
                  x: float;
                  /**
                   * Y coordinate.
                   */
                  y: float;
                  /**
                   * Z coordinate.
                   */
                  z: float;
                };
                /**
                 * Camera field of view binding type.
                 */
                bindingType: sap.ui.vk.CameraFOVBindingType;
                /**
                 * Camera projection type.
                 */
                projectionType: sap.ui.vk.CameraProjectionType;
                /**
                 * Camera field of view in degrees. Applicable only to perspective cameras.
                 */
                fieldOfView: float;
                /**
                 * Camera zoom factor. Applicable only to orthographic cameras.
                 */
                zoomFactor: float;
              };
              /**
               * A JSON-like object containing the animation information.
               */
              animation?: {
                /**
                 * Step VE ID. If it is omitted then procedure and step indices are used.
                 */
                stepVeId?: string;
                /**
                 * Procedure index in the list of procedures.
                 */
                procedureIndex?: int;
                /**
                 * Step index in the list of steps in the procedure.
                 */
                stepIndex?: int;
                /**
                 * Time at which to activate the step.
                 */
                animationTime?: float;
              };
              /**
               * A JSON-like object containing the visibility information.
               */
              visibility?: {
                /**
                 * If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete} then the visible and hidden
                 * fields are defined. If the mode equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
                 * the changes field is defined.
                 */
                mode: sap.ui.vk.VisibilityMode;
                /**
                 * List of Ids of visible nodes.
                 */
                visible: string[];
                /**
                 * List of Ids of hidden nodes.
                 */
                hidden: string[];
                /**
                 * List of Ids of nodes with inverted visibility.
                 */
                changes: string[];
              };
              /**
               * A JSON-like object containing the selection information.
               */
              selection?: {
                /**
                 * List of Ids of selected nodes.
                 */
                selected: string[];
                /**
                 * List of Ids of outlined nodes.
                 */
                outlined: string[];
              };
            },
            /**
             * Fly-to animation duration in seconds.
             */
            flyToDuration?: float
          ): sap.ui.vk.Viewport;
          /**
           * Zooms the scene to a bounding box created from a particular set of nodes.
           */
          zoomTo(
            /**
             * What set of nodes to zoom to.
             */
            what: sap.ui.vk.ZoomTo | sap.ui.vk.ZoomTo[],
            /**
             * Is used if what == (sap.ui.vk.ZoomTo.Node || ZoomTo.NodeSetIsolation)
             */
            nodeRef: any,
            /**
             * Time to perform the "fly to" animation. Set to 0 to do this immediately.
             */
            crossFadeSeconds: float,
            /**
             * Margin. Set to 0 to zoom to the entire screen.
             */
            margin: float
          ): sap.ui.vk.Viewport;
        }
        /**
         * @SINCE 1.32.0
         *
         * Manages the visibility and selection states of nodes in the scene.
         */
        class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: sap.ui.vk.threejs.$ViewStateManagerSettings
          );
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * ID for the new ViewStateManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: sap.ui.vk.threejs.$ViewStateManagerSettings
          );

          /**
           * Enumerates IDs of the outlined nodes.
           */
          enumerateOutlinedNodes(
            /**
             * A function to call when the outlined nodes are enumerated. The function takes one parameter of type `string`.
             */
            callback: Function
          ): sap.ui.vk.ViewStateManager;
          /**
           * Enumerates IDs of the selected nodes.
           */
          enumerateSelection(
            /**
             * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
             */
            callback: Function
          ): sap.ui.vk.ViewStateManager;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.ViewStateManager with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.threejs.ViewStateManager>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default highlighting color
           */
          getHighlightColor(
            /**
             * This flag indicates to return the highlighting color in the ABGR format, if it equals `false` then the
             * color is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | string | int;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.ViewStateManager.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets the NodeHierarchy object associated with this ViewStateManager object.
           */
          getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the opacity of the node.
           *
           * If a single node is passed to the method then a single value is returned.
           *  If an array of nodes is passed to the method then an array of values is returned.
           */
          getOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): float | float[];
          /**
           * Gets the outline color
           */
          getOutlineColor(
            /**
             * This flag indicates to return the outline color in the ABGR format, if it equals `false` then the color
             * is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | string | int;
          /**
           * Gets the outline width
           */
          getOutlineWidth(): float;
          /**
           * Gets the outlining state of the node.
           *
           * If a single node reference is passed to the method then a single outlining state is returned.
           *  If an array of node references is passed to the method then an array of outlining states is returned.
           */
          getOutliningState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Gets the selection state of the node.
           *
           * If a single node reference is passed to the method then a single selection state is returned.
           *  If an array of node references is passed to the method then an array of selection states is returned.
           */
          getSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Gets if showing the bounding box when nodes are selected
           */
          getShowSelectionBoundingBox(): boolean;
          /**
           * @EXPERIMENTAL (since 1.82.0)
           *
           * Get the Symbol node from nodeId, if nodeId is not set, returns a collection of all Symbol nodes
           */
          getSymbolNodes(
            /**
             * node Id string, optional
             */
            nodeId: string
          ): any[];
          /**
           * Gets the tint color of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          getTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
             * is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | int | int[];
          /**
           * Gets the visibility changes in the current ViewStateManager object.
           */
          getVisibilityChanges(): string[];
          /**
           * Gets the visibility state of nodes.
           *
           * If a single node is passed to the method then a single visibility state is returned.
           *  If an array of nodes is passed to the method then an array of visibility states is returned.
           */
          getVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Reset node property to the value defined by current view..
           */
          resetNodeProperty(
            /**
             * reference to node.
             */
            nodeRef: object,
            /**
             * node property
             */
            property: string
          ): void;
          /**
           * Sets the default highlighting color
           */
          setHighlightColor(
            /**
             * The new highlighting color. The value can be defined as a string in the CSS color format or as an integer
             * in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint color should
             * be used.
             */
            color: /* was: sap.ui.vk.CSSColor */ any | string | int
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the opacity of the nodes.
           */
          setOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
             * should be used.
             */
            opacity: float | float[] | null,
            /**
             * This flag is not used, as opacity is always recursively applied to the offspring nodes by multiplication
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the outline color
           */
          setOutlineColor(
            /**
             * The new outline color. The value can be defined as a string in the CSS color format or as an integer
             * in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint color should
             * be used.
             */
            color: /* was: sap.ui.vk.CSSColor */ any | string | int
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the outline width
           */
          setOutlineWidth(
            /**
             * width of outline
             */
            width: float
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets or resets the outlining state of the nodes.
           */
          setOutliningStates(
            /**
             * The node reference or the array of node references of outlined nodes.
             */
            outlinedNodeRefs: any | any[],
            /**
             * The node reference or the array of node references of un-outlined nodes.
             */
            unoutlinedNodeRefs: any | any[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress outlineChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * @deprecated (since 1.56.3)
           *
           * Sets the selection state of the nodes.
           */
          setSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new selection state of the nodes.
             */
            selected: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets or resets the selection state of the nodes.
           */
          setSelectionStates(
            /**
             * The node reference or the array of node references of selected nodes.
             */
            selectedNodeRefs: any | any[],
            /**
             * The node reference or the array of node references of unselected nodes.
             */
            unselectedNodeRefs: any | any[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppress selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets if showing the bounding box when nodes are selected
           */
          setShowSelectionBoundingBox(
            /**
             * `true` if bounding boxes of selected nodes are shown, `false` otherwise.
             */
            val: boolean
          ): void;
          /**
           * Sets the tint color of the nodes.
           */
          setTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
             * integer in the ABGR format or it could be array of these values. If `null` is passed then the tint color
             * is reset and the node's own tint color should be used.
             */
            tintColor: /* was: sap.ui.vk.CSSColor */
              | any
              | int
              | /* was: sap.ui.vk.CSSColor */ any[]
              | int[]
              | null,
            /**
             * This flag indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the visibility state of the nodes.
           */
          setVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new visibility state or array of states of the nodes.
             */
            visible: boolean | boolean[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean
          ): sap.ui.vk.ViewStateManager;
        }
      }

      namespace tools {
        interface $AnchorPointToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * If set to true values will change in round number increments instead of continual change
           */
          enableStepping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates the type of allowed operations
           */
          allowOperation?:
            | sap.ui.vk.tools.AnchorPointToolOperation
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Whether or not to allow context menu on right-click
           */
          allowContextMenu?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The anchor point tool position in the world coordinate system. This property is read-only.
           */
          position?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The anchor point tool quaternion. This property is read-only.
           */
          quaternion?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when movement occurs.
           */
          moving?: Function;

          /**
           * This event will be fired when movement finished.
           */
          moved?: Function;

          /**
           * This event will be fired when rotation occurs.
           */
          rotating?: Function;

          /**
           * This event will be fired when rotation finished.
           */
          rotated?: Function;
        }

        interface $AxisAngleRotationToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * If set to `true` values will change in round number increments instead of continual change
           */
          enableStepping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if snapping when rotating is enabled
           */
          enableSnapping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Whether or not to allow context menu on right-click
           */
          allowContextMenu?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determine what set of nodes will be transformed with this tool
           */
          nodeSet?:
            | sap.ui.vk.tools.ToolNodeSet
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties:
           * 	 - `node: any` - A node reference.
           * 	 - `angle: float` - An angle of rotation about the axis.
           * 	 - `azimuth: float` - An azimuth of the axis of rotation in degrees in the parent's space.
           * 	 - `elevation: float` - An elevation of the axis of rotation in degrees in the parent's space.
           * 	 - `axis: float[]` - An axis of rotation in cartesian coordinates in the parent's space.  An axis
           * 			of rotation in animation keys is stored in cartesian coordinates, in UI an axis of rotation is displayed
           * 			in polar coordinates using azimuth and elevation.
           */
          rotating?: Function;

          /**
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties:
           * 	 - `node: any` - A node reference.
           * 	 - `angle: float` - An angle of rotation about the axis.
           * 	 - `azimuth: float` - An azimuth of the axis of rotation in degrees in the parent's space.
           * 	 - `elevation: float` - An elevation of the axis of rotation in degrees in the parent's space.
           * 	 - `axis: float[]` - An axis of rotation in cartesian coordinates in the parent's space.  An axis
           * 			of rotation in animation keys is stored in cartesian coordinates, in UI an axis of rotation is displayed
           * 			in polar coordinates using azimuth and elevation.
           */
          rotated?: Function;
        }

        interface $CreateEllipseToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Parent node for new elements.
           */
          parentNode?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates that the tool creates a circle instead of an ellipse.
           */
          uniformMode?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Fired when a new element is created.
           */
          completed?: Function;
        }

        interface $CreatePathToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Parent node for new elements.
           */
          parentNode?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Flag to always create closed path elements.
           */
          closePath?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Fired when a new element is created.
           */
          completed?: Function;
        }

        interface $CreateRectangleToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Parent node for the rectangle that will be created.
           */
          parentNode?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates that the tool creates a square instead of a rectangle.
           */
          uniformMode?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Fired when a new element is created.
           */
          completed?: Function;
        }

        interface $CreateTextToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Parent node for new elements.
           */
          parentNode?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Font size
           */
          fontSize?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Font face
           */
          fontFace?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Fired when a new element is created.
           */
          completed?: Function;
        }

        interface $CrossSectionToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        interface $DuplicateSvgHotspotToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Parent node for new elements.
           */
          parentNode?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines a list of nodes to be duplicated.
           */
          nodeList?: any[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Fired when the duplicated nodes are created.
           */
          nodesCreated?: Function;
        }

        interface $GizmoSettings extends sap.ui.core.$ControlSettings {}

        interface $HitTestToolSettings extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Indicates what schema the tool should use to extract IDs from hit objects
           */
          IdMode?:
            | sap.ui.vk.tools.HitTestIdMode
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when 3D object is detected under hit position.
           */
          hit?: Function;
        }

        interface $MoveToolSettings extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           */
          coordinateSystem?:
            | sap.ui.vk.tools.CoordinateSystem
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           */
          placementMode?:
            | sap.ui.vk.tools.GizmoPlacementMode
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set to `true` values will change in round number increments instead of continual change
           */
          enableStepping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if snapping when moving is enabled
           */
          enableSnapping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if auto reset values mode is enabled
           */
          autoResetValues?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Whether or not to allow context menu on right-click
           */
          allowContextMenu?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determine what set of nodes will be transformed with this tool
           */
          nodeSet?:
            | sap.ui.vk.tools.ToolNodeSet
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when movement occurs. This event contains parameter 'nodesProperties' that is
           * array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * translate relative to rest position in local coordinates {float[]} offsetToPrevious, translate relative
           * to end position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, translate in parent coordinates {float[]} world, translate in world coordinates {float[]} restDifference,
           * change of rest position translation in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position translation in current coordinates
           */
          moving?: Function;

          /**
           * This event will be fired when movement finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * translate relative to rest position in local coordinates {float[]} offsetToPrevious, translate relative
           * to end position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, translate in parent coordinates {float[]} world, translate in world coordinates {float[]} restDifference,
           * change of rest position translation in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position translation in current coordinates
           */
          moved?: Function;

          /**
           * This event will be fired when the coordinate system changes.
           */
          coordinateSystemChanged?: Function;

          placementModeChanged?: Function;
        }

        interface $RectSelectToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * If set to true then this tool will remove selected nodes from the selection set. Default is to always
           * add them to the selection
           */
          subtractMode?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        interface $RedlineToolSettings extends sap.ui.vk.tools.$ToolSettings {
          /**
           * The redline element/elements which will be rendered as soon as the redline tool is activated.
           */
          redlineElements?:
            | sap.ui.vk.RedlineElement[]
            | sap.ui.vk.RedlineElement
            | sap.ui.base.ManagedObject.AggregationBindingInfo;

          elementCreated?: Function;

          elementClicked?: Function;

          elementHovered?: Function;
        }

        interface $RotateOrbitToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * This event will be fired when rotation occurs.
           */
          rotate?: Function;
        }

        interface $RotateToolSettings extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           */
          coordinateSystem?:
            | sap.ui.vk.tools.CoordinateSystem
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls which axis are rotatable around. Can be All, X, Y, or Z
           */
          axis?:
            | sap.ui.vk.tools.RotatableAxis
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set to `true` values will change in round number increments instead of continual change
           */
          enableStepping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if snapping when rotating is enabled
           */
          enableSnapping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if auto reset values mode is enabled
           */
          autoResetValues?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Whether or not to allow context menu on right-click
           */
          allowContextMenu?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determine what set of nodes will be transformed with this tool
           */
          nodeSet?:
            | sap.ui.vk.tools.ToolNodeSet
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           */
          placementMode?:
            | sap.ui.vk.tools.GizmoPlacementMode
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties: {any} node: node reference, {float[]} offsetToRest,
           * quaternion relative to rest position in parent coordinates {float[]} offsetToPrevious, euler rotation
           * relative to end position of previous sequence, or euler rotation relative to rest position if no previous
           * sequence in parent coordinates {float[]} absolute, quaternion in parent coordinates {float[]} world,
           * quaternion in world coordinates {float[]} restDifference, change of rest position quaternion in parent
           * coordinates {float[]} restDifferenceInCoordinates, change of rest position in euler rotation in current
           * coordinates
           */
          rotating?: Function;

          /**
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties: {any} node: node reference, {float[]} offsetToRest,
           * quaternion relative to rest position in parent coordinates {float[]} offsetToPrevious, euler rotation
           * relative to end position of previous sequence, or euler rotation relative to rest position if no previous
           * sequence in parent coordinates {float[]} absolute, quaternion in parent coordinates {float[]} world,
           * quaternion in world coordinates {float[]} restDifference, change of rest position quaternion in parent
           * coordinates {float[]} restDifferenceInCoordinates, change of rest position in euler rotation in current
           * coordinates
           */
          rotated?: Function;

          axisChanged?: Function;

          /**
           * This event will be fired when the coordinate system changes.
           */
          coordinateSystemChanged?: Function;

          placementModeChanged?: Function;
        }

        interface $RotateTurntableToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * This event will be fired when rotation occurs.
           */
          rotate?: Function;
        }

        interface $ScaleToolSettings extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           */
          coordinateSystem?:
            | sap.ui.vk.tools.CoordinateSystem
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set to `true` then this tool will enable scaling along a single axis, otherwise it will scale objects
           * along all three axes proportionaly
           */
          nonUniformScaleEnabled?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set to `true` values will change in round number increments instead of continual change
           */
          enableStepping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Enable snapping if set true
           */
          enableSnapping?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if auto reset values mode is enabled
           */
          autoResetValues?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Whether or not to allow context menu on right-click
           */
          allowContextMenu?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determine what set of nodes will be transformed with this tool
           */
          nodeSet?:
            | sap.ui.vk.tools.ToolNodeSet
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           */
          placementMode?:
            | sap.ui.vk.tools.GizmoPlacementMode
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when scaling occurs. This event contains parameter 'nodesProperties' that is
           * array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * scale relative to rest position in local coordinates {float[]} offsetToPrevious, scale relative to end
           * position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, scale in parent coordinates {float[]} world, scale in world coordinate {float[]} restDifference,
           * change of rest position scale in ratio in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position scale in ratio in current coordinates
           */
          scaling?: Function;

          /**
           * This event will be fired when scaling finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * scale relative to rest position in local coordinates {float[]} offsetToPrevious, scale relative to end
           * position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, scale in parent coordinates {float[]} world, scale in world coordinate {float[]} restDifference,
           * change of rest position scale in ratio in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position scale in ratio in current coordinates
           */
          scaled?: Function;

          /**
           * This event will be fired when the coordinate system changes.
           */
          coordinateSystemChanged?: Function;

          placementModeChanged?: Function;
        }

        interface $SceneOrientationToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          enablePredefinedViews?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          enableInitialView?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        interface $ToolSettings extends sap.ui.core.$ElementSettings {
          targetViewportType?:
            | any
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * GUID identifier for the tool to prevent naming conflicts.
           */
          toolid?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Used to control the tool rendering and interaction pipeline.
           */
          active?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Used to decide whether this tool should be enabled for the target viewport.
           */
          footprint?: string[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * sap.ui.vk.tools.Gizmo owned by this control and used for rendering floating UI
           */
          gizmo?: sap.ui.vk.tools.Gizmo;

          /**
           * Control into which the gizmo is intended to render .
           */
          gizmoContainer?: sap.ui.core.Control | string;

          enabled?: Function;
        }

        interface $TooltipToolSettings extends sap.ui.vk.tools.$ToolSettings {
          followCursor?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          animate?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

          offsetX?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

          offsetY?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when mouse hover occurs.
           */
          hover?: Function;
        }

        interface $TransformSvgElementToolSettings
          extends sap.ui.vk.tools.$ToolSettings {
          /**
           * Determine what set of nodes will be transformed with this tool
           */
          nodeSet?:
            | sap.ui.vk.tools.ToolNodeSet
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set to `true` then this tool will enable uniform scaling.
           */
          uniformScaleEnabled?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This event will be fired when movement occurs.
           */
          moving?: Function;

          /**
           * This event will be fired when movement finished.
           */
          moved?: Function;

          /**
           * This event will be fired when rotation occurs.
           */
          rotating?: Function;

          /**
           * This event will be fired when rotation finished.
           */
          rotated?: Function;

          /**
           * This event will be fired when scaling occurs.
           */
          scaling?: Function;

          /**
           * This event will be fired when scaling finished.
           */
          scaled?: Function;
        }

        /**
         * Tool used to define an anchor point and orientation in 3D space which can be used to rotate, move or
         * scale one or more selected objects
         */
        class AnchorPointTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for an AnchorPointTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$AnchorPointToolSettings
          );
          /**
           * Constructor for an AnchorPointTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$AnchorPointToolSettings
          );

          /**
           * Aligns the anchor point rotation to the object rotation.
           */
          alignTo(
            /**
             * The node reference.
             */
            nodeRef: any
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Aligns the anchor point rotation to the camera rotation.
           */
          alignToScreen(): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Aligns the anchor point rotation to the world coordinate system.
           */
          alignToWorld(): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moved moved} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoved(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moving moving} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoving(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotating(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.AnchorPointTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.AnchorPointTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:moved moved} to attached listeners.
           */
          fireMoved(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;
            }
          ): this;
          /**
           * Fires event {@link #event:moving moving} to attached listeners.
           */
          fireMoving(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;
            }
          ): this;
          /**
           * Fires event {@link #event:rotated rotated} to attached listeners.
           */
          fireRotated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;
            }
          ): this;
          /**
           * Fires event {@link #event:rotating rotating} to attached listeners.
           */
          fireRotating(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;
            }
          ): this;
          /**
           * Gets current value of property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * Default value is `true`.
           */
          getAllowContextMenu(): boolean;
          /**
           * Gets current value of property {@link #getAllowOperation allowOperation}.
           *
           * Indicates the type of allowed operations
           *
           * Default value is `All`.
           */
          getAllowOperation(): sap.ui.vk.tools.AnchorPointToolOperation;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.AnchorPointTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getPosition position}.
           *
           * The anchor point tool position in the world coordinate system. This property is read-only.
           */
          getPosition(): any;
          /**
           * Gets current value of property {@link #getQuaternion quaternion}.
           *
           * The anchor point tool quaternion. This property is read-only.
           */
          getQuaternion(): any;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * Performs movement of the anchor point.
           */
          move(
            /**
             * Movement offset along x axis.
             */
            x?: float,
            /**
             * Movement offset along y axis.
             */
            y?: float,
            /**
             * Movement offset along z axis.
             */
            z?: float
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Moves the anchor point to the center of objects or object's origin.
           */
          moveTo(
            /**
             * The node reference or the array of node references.
             */
            target: any | any[],
            /**
             * Use the object's origin if true or the center of objects if false.
             */
            useObjectsOrigin: boolean
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Performs rotation of the anchor point.
           */
          rotate(
            /**
             * Rotation angle around x axis in degrees.
             */
            x?: float,
            /**
             * Rotation angle around y axis in degrees.
             */
            y?: float,
            /**
             * Rotation angle around z axis in degrees.
             */
            z?: float
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Sets a new value for property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowContextMenu(
            /**
             * New value for property `allowContextMenu`
             */
            bAllowContextMenu?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getAllowOperation allowOperation}.
           *
           * Indicates the type of allowed operations
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `All`.
           */
          setAllowOperation(
            /**
             * New value for property `allowOperation`
             */
            sAllowOperation?: sap.ui.vk.tools.AnchorPointToolOperation
          ): this;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getPosition position}.
           *
           * The anchor point tool position in the world coordinate system. This property is read-only.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPosition(
            /**
             * New value for property `position`
             */
            oPosition?: any
          ): this;
          /**
           * Sets a new value for property {@link #getQuaternion quaternion}.
           *
           * The anchor point tool quaternion. This property is read-only.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setQuaternion(
            /**
             * New value for property `quaternion`
             */
            oQuaternion?: any
          ): this;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI?: boolean
          ): this;
        }
        /**
         * @EXPERIMENTAL
         *
         * Tool to rotate 3D objects in space
         */
        class AxisAngleRotationTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new AxisAngleRotationTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$AxisAngleRotationToolSettings
          );
          /**
           * Constructor for a new AxisAngleRotationTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$AxisAngleRotationToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AxisAngleRotationTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AxisAngleRotationTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties:
           * 	 - `node: any` - A node reference.
           * 	 - `angle: float` - An angle of rotation about the axis.
           * 	 - `azimuth: float` - An azimuth of the axis of rotation in degrees in the parent's space.
           * 	 - `elevation: float` - An elevation of the axis of rotation in degrees in the parent's space.
           * 	 - `axis: float[]` - An axis of rotation in cartesian coordinates in the parent's space.  An axis
           * 			of rotation in animation keys is stored in cartesian coordinates, in UI an axis of rotation is displayed
           * 			in polar coordinates using azimuth and elevation.
           */
          attachRotated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AxisAngleRotationTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AxisAngleRotationTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AxisAngleRotationTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties:
           * 	 - `node: any` - A node reference.
           * 	 - `angle: float` - An angle of rotation about the axis.
           * 	 - `azimuth: float` - An azimuth of the axis of rotation in degrees in the parent's space.
           * 	 - `elevation: float` - An elevation of the axis of rotation in degrees in the parent's space.
           * 	 - `axis: float[]` - An axis of rotation in cartesian coordinates in the parent's space.  An axis
           * 			of rotation in animation keys is stored in cartesian coordinates, in UI an axis of rotation is displayed
           * 			in polar coordinates using azimuth and elevation.
           */
          attachRotated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AxisAngleRotationTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AxisAngleRotationTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AxisAngleRotationTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties:
           * 	 - `node: any` - A node reference.
           * 	 - `angle: float` - An angle of rotation about the axis.
           * 	 - `azimuth: float` - An azimuth of the axis of rotation in degrees in the parent's space.
           * 	 - `elevation: float` - An elevation of the axis of rotation in degrees in the parent's space.
           * 	 - `axis: float[]` - An axis of rotation in cartesian coordinates in the parent's space.  An axis
           * 			of rotation in animation keys is stored in cartesian coordinates, in UI an axis of rotation is displayed
           * 			in polar coordinates using azimuth and elevation.
           */
          attachRotating(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AxisAngleRotationTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AxisAngleRotationTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AxisAngleRotationTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties:
           * 	 - `node: any` - A node reference.
           * 	 - `angle: float` - An angle of rotation about the axis.
           * 	 - `azimuth: float` - An azimuth of the axis of rotation in degrees in the parent's space.
           * 	 - `elevation: float` - An elevation of the axis of rotation in degrees in the parent's space.
           * 	 - `axis: float[]` - An axis of rotation in cartesian coordinates in the parent's space.  An axis
           * 			of rotation in animation keys is stored in cartesian coordinates, in UI an axis of rotation is displayed
           * 			in polar coordinates using azimuth and elevation.
           */
          attachRotating(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AxisAngleRotationTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AxisAngleRotationTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AxisAngleRotationTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotating(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.AxisAngleRotationTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.ui.vk.tools.AxisAngleRotationTool
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:rotated rotated} to attached listeners.
           */
          fireRotated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              nodesProperties?: object[];
            }
          ): this;
          /**
           * Fires event {@link #event:rotating rotating} to attached listeners.
           */
          fireRotating(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              nodesProperties?: object[];
            }
          ): this;
          /**
           * Gets current value of property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * Default value is `true`.
           */
          getAllowContextMenu(): boolean;
          /**
           * Gets current value of property {@link #getEnableSnapping enableSnapping}.
           *
           * Determines if snapping when rotating is enabled
           *
           * Default value is `false`.
           */
          getEnableSnapping(): boolean;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.AxisAngleRotationTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * Default value is `Highlight`.
           */
          getNodeSet(): sap.ui.vk.tools.ToolNodeSet;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.AxisAngleRotationTool;
          /**
           * Sets a new value for property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowContextMenu(
            /**
             * New value for property `allowContextMenu`
             */
            bAllowContextMenu?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getEnableSnapping enableSnapping}.
           *
           * Determines if snapping when rotating is enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableSnapping(
            /**
             * New value for property `enableSnapping`
             */
            bEnableSnapping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Highlight`.
           */
          setNodeSet(
            /**
             * New value for property `nodeSet`
             */
            sNodeSet?: sap.ui.vk.tools.ToolNodeSet
          ): this;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI?: boolean
          ): this;
        }
        /**
         * The CreateEllipseTool allows applications to create an ellipse/circle svg element.
         */
        class CreateEllipseTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new CreateEllipseTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreateEllipseToolSettings
          );
          /**
           * Constructor for a new CreateEllipseTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreateEllipseToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateEllipseTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreateEllipseTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreateEllipseTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateEllipseTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreateEllipseTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreateEllipseTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateEllipseTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCompleted(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.CreateEllipseTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.CreateEllipseTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:completed completed} to attached listeners.
           */
          fireCompleted(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Created node.
               *
               * node.sid - node's sid node.nodeContentType - node content type node.materialId - assigned meterial sid
               * node.name - node's name node.matrix - node transformation matrix node.parametric - index of created parametric
               * object in parametrics array
               */
              node?: any;
              /**
               * Request payload for a storage server to create a parametric primitive.
               */
              request?: any;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CreateEllipseTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           */
          getParentNode(): any;
          /**
           * Gets current value of property {@link #getUniformMode uniformMode}.
           *
           * Indicates that the tool creates a circle instead of an ellipse.
           *
           * Default value is `false`.
           */
          getUniformMode(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.CreateEllipseTool;
          /**
           * Sets a new value for property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setParentNode(
            /**
             * New value for property `parentNode`
             */
            oParentNode?: any
          ): this;
          /**
           * Sets a new value for property {@link #getUniformMode uniformMode}.
           *
           * Indicates that the tool creates a circle instead of an ellipse.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUniformMode(
            /**
             * New value for property `uniformMode`
             */
            bUniformMode?: boolean
          ): this;
        }
        /**
         * The CreatePathTool allows applications to create a path svg element.
         */
        class CreatePathTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new CreatePathTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreatePathToolSettings
          );
          /**
           * Constructor for a new CreatePathTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreatePathToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreatePathTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreatePathTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreatePathTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreatePathTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreatePathTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreatePathTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreatePathTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCompleted(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.CreatePathTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.CreatePathTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:completed completed} to attached listeners.
           */
          fireCompleted(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Created node.
               *
               * node.sid - node's sid node.nodeContentType - node content type node.materialId - assigned meterial sid
               * node.name - node's name node.matrix - node transformation matrix node.parametric - index of created parametric
               * object in parametrics array
               */
              node?: any;
              /**
               * Request payload for a storage server to create a parametric primitive.
               */
              request?: any;
              /**
               * Indicates whether the created path is closed.
               */
              closed?: boolean;
            }
          ): this;
          /**
           * Gets current value of property {@link #getClosePath closePath}.
           *
           * Flag to always create closed path elements.
           *
           * Default value is `false`.
           */
          getClosePath(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CreatePathTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           */
          getParentNode(): any;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.CreatePathTool;
          /**
           * Sets a new value for property {@link #getClosePath closePath}.
           *
           * Flag to always create closed path elements.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setClosePath(
            /**
             * New value for property `closePath`
             */
            bClosePath?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setParentNode(
            /**
             * New value for property `parentNode`
             */
            oParentNode?: any
          ): this;
        }
        /**
         * The CreateRectangleTool allows applications to create a rectangle/square svg element.
         */
        class CreateRectangleTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new CreateRectangleTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreateRectangleToolSettings
          );
          /**
           * Constructor for a new CreateRectangleTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreateRectangleToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateRectangleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreateRectangleTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreateRectangleTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateRectangleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreateRectangleTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreateRectangleTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateRectangleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCompleted(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.CreateRectangleTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.CreateRectangleTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:completed completed} to attached listeners.
           */
          fireCompleted(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Created node.
               *
               * node.sid - node's sid node.nodeContentType - node content type node.materialId - assigned meterial sid
               * node.name - node's name node.matrix - node transformation matrix node.parametric - index of created parametric
               * object in parametrics array
               */
              node?: any;
              /**
               * Request payload for a storage server to create a parametric primitive.
               */
              request?: any;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CreateRectangleTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getParentNode parentNode}.
           *
           * Parent node for the rectangle that will be created.
           */
          getParentNode(): any;
          /**
           * Gets current value of property {@link #getUniformMode uniformMode}.
           *
           * Indicates that the tool creates a square instead of a rectangle.
           *
           * Default value is `false`.
           */
          getUniformMode(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.CreateRectangleTool;
          /**
           * Sets a new value for property {@link #getParentNode parentNode}.
           *
           * Parent node for the rectangle that will be created.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setParentNode(
            /**
             * New value for property `parentNode`
             */
            oParentNode?: any
          ): this;
          /**
           * Sets a new value for property {@link #getUniformMode uniformMode}.
           *
           * Indicates that the tool creates a square instead of a rectangle.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUniformMode(
            /**
             * New value for property `uniformMode`
             */
            bUniformMode?: boolean
          ): this;
        }
        /**
         * The CreateTextTool allows applications to create a text svg element.
         */
        class CreateTextTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new CreateTextTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreateTextToolSettings
          );
          /**
           * Constructor for a new CreateTextTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CreateTextToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateTextTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreateTextTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreateTextTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateTextTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.CreateTextTool` itself.
           *
           * Fired when a new element is created.
           */
          attachCompleted(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.CreateTextTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:completed completed} event of this `sap.ui.vk.tools.CreateTextTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCompleted(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.CreateTextTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.CreateTextTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:completed completed} to attached listeners.
           */
          fireCompleted(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Created node.
               *
               * node.sid - node's sid node.nodeContentType - node content type node.materialId - assigned meterial sid
               * node.name - node's name node.matrix - node transformation matrix node.parametric - index of created parametric
               * object in parametrics array
               */
              node?: any;
              /**
               * Request payload for a storage server to create a parametric primitive.
               */
              request?: any;
            }
          ): this;
          /**
           * Gets current value of property {@link #getFontFace fontFace}.
           *
           * Font face
           *
           * Default value is `"Verdana,Arial,Helvetica,sans-serif"`.
           */
          getFontFace(): string;
          /**
           * Gets current value of property {@link #getFontSize fontSize}.
           *
           * Font size
           *
           * Default value is `"14"`.
           */
          getFontSize(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CreateTextTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           */
          getParentNode(): any;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.CreateTextTool;
          /**
           * Sets a new value for property {@link #getFontFace fontFace}.
           *
           * Font face
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `"Verdana,Arial,Helvetica,sans-serif"`.
           */
          setFontFace(
            /**
             * New value for property `fontFace`
             */
            sFontFace?: string
          ): this;
          /**
           * Sets a new value for property {@link #getFontSize fontSize}.
           *
           * Font size
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `"14"`.
           */
          setFontSize(
            /**
             * New value for property `fontSize`
             */
            sFontSize?: string
          ): this;
          /**
           * Sets a new value for property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setParentNode(
            /**
             * New value for property `parentNode`
             */
            oParentNode?: any
          ): this;
        }
        /**
         * The CrossSection tool can be used to cut all 3D objects along one of three spatial axis to expose their
         * internal structures.
         */
        class CrossSectionTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new CrossSectionTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CrossSectionToolSettings
          );
          /**
           * Constructor for a new CrossSectionTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$CrossSectionToolSettings
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.CrossSectionTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.CrossSectionTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CrossSectionTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.Viewport;
          /**
           * Sets the clipping plane axis.
           */
          setAxis(
            /**
             * Axis index from 0 to 2: 0 - X, 1 - Y, 2 - Z.
             */
            index?: number
          ): sap.ui.vk.tools.CrossSectionTool;
          /**
           * Flips the clipping plane.
           */
          setFlip(
            /**
             * If set to `true`, the clipping plane will be flipped.
             */
            flip?: boolean
          ): sap.ui.vk.tools.CrossSectionTool;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI?: boolean
          ): this;
        }
        /**
         * The DuplicateSvgHotspotTool allows applications to duplicate svg hotspots.
         */
        class DuplicateSvgHotspotTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new DuplicateSvgHotspotTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$DuplicateSvgHotspotToolSettings
          );
          /**
           * Constructor for a new DuplicateSvgHotspotTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$DuplicateSvgHotspotToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:nodesCreated nodesCreated} event of this `sap.ui.vk.tools.DuplicateSvgHotspotTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.DuplicateSvgHotspotTool` itself.
           *
           * Fired when the duplicated nodes are created.
           */
          attachNodesCreated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.DuplicateSvgHotspotTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:nodesCreated nodesCreated} event of this `sap.ui.vk.tools.DuplicateSvgHotspotTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.DuplicateSvgHotspotTool` itself.
           *
           * Fired when the duplicated nodes are created.
           */
          attachNodesCreated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.DuplicateSvgHotspotTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:nodesCreated nodesCreated} event of this `sap.ui.vk.tools.DuplicateSvgHotspotTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNodesCreated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.DuplicateSvgHotspotTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.ui.vk.tools.DuplicateSvgHotspotTool
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:nodesCreated nodesCreated} to attached listeners.
           */
          fireNodesCreated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Offset in x direction
               */
              x?: float;
              /**
               * Offset in y direction
               */
              y?: float;
              /**
               * Created nodes.
               */
              nodes?: any[];
              /**
               * Request payload for a storage server to create a parametric primitive.
               */
              request?: object;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.DuplicateSvgHotspotTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getNodeList nodeList}.
           *
           * Defines a list of nodes to be duplicated.
           *
           * Default value is `[]`.
           */
          getNodeList(): any[];
          /**
           * Gets current value of property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           */
          getParentNode(): any;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.DuplicateSvgHotspotTool;
          /**
           * Sets a new value for property {@link #getNodeList nodeList}.
           *
           * Defines a list of nodes to be duplicated.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[]`.
           */
          setNodeList(
            /**
             * New value for property `nodeList`
             */
            sNodeList?: any[]
          ): this;
          /**
           * Sets a new value for property {@link #getParentNode parentNode}.
           *
           * Parent node for new elements.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setParentNode(
            /**
             * New value for property `parentNode`
             */
            oParentNode?: any
          ): this;
        }
        /**
         * Provides buttons to hide or show certain sap.ui.vk controls.
         */
        class Gizmo extends sap.ui.core.Control {
          /**
           * Constructor for base of all Gizmo Controls.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
           * sap.ui.core.Control} can be used.
           */
          constructor(
            /**
             * Initial settings for the new control
             */
            mSettings?: sap.ui.vk.tools.$GizmoSettings
          );
          /**
           * Constructor for base of all Gizmo Controls.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
           * sap.ui.core.Control} can be used.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: sap.ui.vk.tools.$GizmoSettings
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.Gizmo with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.Gizmo>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.Gizmo.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
        }
        /**
         * When user clicks/taps inside of 3D Viewport this tool can be used to find if there is an object at this
         * point
         */
        class HitTestTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new HitTestTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$HitTestToolSettings
          );
          /**
           * Constructor for a new HitTestTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$HitTestToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:hit hit} event of this `sap.ui.vk.tools.HitTestTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.HitTestTool` itself.
           *
           * This event will be fired when 3D object is detected under hit position.
           */
          attachHit(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.HitTestTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:hit hit} event of this `sap.ui.vk.tools.HitTestTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.HitTestTool` itself.
           *
           * This event will be fired when 3D object is detected under hit position.
           */
          attachHit(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.HitTestTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:hit hit} event of this `sap.ui.vk.tools.HitTestTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachHit(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.HitTestTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.HitTestTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:hit hit} to attached listeners.
           */
          fireHit(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              id?: any;

              object?: any;

              point?: any;

              clickType?: sap.ui.vk.tools.HitTestClickType;
            }
          ): this;
          /**
           * Gets current value of property {@link #getIdMode IdMode}.
           *
           * Indicates what schema the tool should use to extract IDs from hit objects
           *
           * Default value is `ThreeJS`.
           */
          getIdMode(): sap.ui.vk.tools.HitTestIdMode;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.HitTestTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Figure out which helper is needed and execute hit test
           */
          hitTest(
            /**
             * The tap gesture's x-coordinate.
             */
            x: int,
            /**
             * The tap gesture's y-coordinate.
             */
            y: int,
            /**
             * Scene object used in current viewport.
             */
            scene: sap.ui.vk.Scene,
            /**
             * Current viewport's camera.
             */
            camera: sap.ui.vk.Camera,
            /**
             * One of predefined click types, this is passed to the hit event
             */
            clickType: sap.ui.vk.tools.HitTestClickType
          ): any;
          /**
           * Queues a command for execution during the rendering cycle. All gesture operations should be called using
           * this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.Viewport;
          /**
           * Sets a new value for property {@link #getIdMode IdMode}.
           *
           * Indicates what schema the tool should use to extract IDs from hit objects
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `ThreeJS`.
           */
          setIdMode(
            /**
             * New value for property `IdMode`
             */
            sIdMode?: sap.ui.vk.tools.HitTestIdMode
          ): this;
        }
        /**
         * Tool used to move objects in 3D space
         */
        class MoveTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new MoveTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$MoveToolSettings
          );
          /**
           * Constructor for a new MoveTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$MoveToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * translate relative to rest position in local coordinates {float[]} offsetToPrevious, translate relative
           * to end position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, translate in parent coordinates {float[]} world, translate in world coordinates {float[]} restDifference,
           * change of rest position translation in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position translation in current coordinates
           */
          attachMoved(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * translate relative to rest position in local coordinates {float[]} offsetToPrevious, translate relative
           * to end position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, translate in parent coordinates {float[]} world, translate in world coordinates {float[]} restDifference,
           * change of rest position translation in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position translation in current coordinates
           */
          attachMoved(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement occurs. This event contains parameter 'nodesProperties' that is
           * array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * translate relative to rest position in local coordinates {float[]} offsetToPrevious, translate relative
           * to end position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, translate in parent coordinates {float[]} world, translate in world coordinates {float[]} restDifference,
           * change of rest position translation in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position translation in current coordinates
           */
          attachMoving(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement occurs. This event contains parameter 'nodesProperties' that is
           * array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * translate relative to rest position in local coordinates {float[]} offsetToPrevious, translate relative
           * to end position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, translate in parent coordinates {float[]} world, translate in world coordinates {float[]} restDifference,
           * change of rest position translation in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position translation in current coordinates
           */
          attachMoving(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:placementModeChanged placementModeChanged} event
           * of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           */
          attachPlacementModeChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:placementModeChanged placementModeChanged} event
           * of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           */
          attachPlacementModeChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCoordinateSystemChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moved moved} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoved(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moving moving} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoving(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:placementModeChanged placementModeChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPlacementModeChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.MoveTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.MoveTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:coordinateSystemChanged coordinateSystemChanged} to attached listeners.
           */
          fireCoordinateSystemChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              coordinateSystem?: sap.ui.vk.tools.CoordinateSystem;
            }
          ): this;
          /**
           * Fires event {@link #event:moved moved} to attached listeners.
           */
          fireMoved(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;

              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:moving moving} to attached listeners.
           */
          fireMoving(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;

              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:placementModeChanged placementModeChanged} to attached listeners.
           */
          firePlacementModeChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              placementMode?: sap.ui.vk.tools.GizmoPlacementMode;
            }
          ): this;
          /**
           * Gets current value of property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * Default value is `true`.
           */
          getAllowContextMenu(): boolean;
          /**
           * Gets current value of property {@link #getAutoResetValues autoResetValues}.
           *
           * Determines if auto reset values mode is enabled
           *
           * Default value is `true`.
           */
          getAutoResetValues(): boolean;
          /**
           * Gets current value of property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           *
           * Default value is `World`.
           */
          getCoordinateSystem(): sap.ui.vk.tools.CoordinateSystem;
          /**
           * Gets current value of property {@link #getEnableSnapping enableSnapping}.
           *
           * Determines if snapping when moving is enabled
           *
           * Default value is `false`.
           */
          getEnableSnapping(): boolean;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.MoveTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * Default value is `Highlight`.
           */
          getNodeSet(): sap.ui.vk.tools.ToolNodeSet;
          /**
           * Gets current value of property {@link #getPlacementMode placementMode}.
           *
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           *
           * Default value is `Default`.
           */
          getPlacementMode(): sap.ui.vk.tools.GizmoPlacementMode;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * Performs movement of selected objects.
           */
          move(
            /**
             * Movement offset of x component in currently selected coordinate system.
             */
            x: float,
            /**
             * Movement offset of y component in currently selected coordinate system.
             */
            y: float,
            /**
             * Movement offset of z component in currently selected coordinate system.
             */
            z: float,
            /**
             * Optional parameter to define coordinate system to be used when these coordinates are applied. If not
             * specified then currently set coordinate ssystem will be used.
             */
            coordinateSystem?: sap.ui.vk.tools.CoordinateSystem
          ): sap.ui.vk.tools.MoveTool;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Sets a new value for property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowContextMenu(
            /**
             * New value for property `allowContextMenu`
             */
            bAllowContextMenu?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getAutoResetValues autoResetValues}.
           *
           * Determines if auto reset values mode is enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAutoResetValues(
            /**
             * New value for property `autoResetValues`
             */
            bAutoResetValues?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `World`.
           */
          setCoordinateSystem(
            /**
             * New value for property `coordinateSystem`
             */
            sCoordinateSystem?: sap.ui.vk.tools.CoordinateSystem
          ): this;
          /**
           * Sets a new value for property {@link #getEnableSnapping enableSnapping}.
           *
           * Determines if snapping when moving is enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableSnapping(
            /**
             * New value for property `enableSnapping`
             */
            bEnableSnapping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Highlight`.
           */
          setNodeSet(
            /**
             * New value for property `nodeSet`
             */
            sNodeSet?: sap.ui.vk.tools.ToolNodeSet
          ): this;
          /**
           * Sets a new value for property {@link #getPlacementMode placementMode}.
           *
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Default`.
           */
          setPlacementMode(
            /**
             * New value for property `placementMode`
             */
            sPlacementMode?: sap.ui.vk.tools.GizmoPlacementMode
          ): this;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI?: boolean
          ): this;
        }
        /**
         * This tool provides rectangular selection
         */
        class RectSelectTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RectSelectTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RectSelectToolSettings
          );
          /**
           * Constructor for a new RectSelectTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RectSelectToolSettings
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.RectSelectTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.RectSelectTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RectSelectTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getSubtractMode subtractMode}.
           *
           * If set to true then this tool will remove selected nodes from the selection set. Default is to always
           * add them to the selection
           *
           * Default value is `false`.
           */
          getSubtractMode(): boolean;
          /**
           * Find all objects fully contained inside of specified rectangle
           */
          select(
            /**
             * x coordinate of top-left/bottom-right corner of selection rectangle.
             */
            x1: int,
            /**
             * y coordinate of top-left/bottom-right corner of selection rectangle.
             */
            y1: int,
            /**
             * x coordinate of bottom-right/top-left corner of selection rectangle.
             */
            x2: int,
            /**
             * y coordinate of bottom-right/top-left corner of selection rectangle.
             */
            y2: int,
            /**
             * Scene object used in current viewport.
             */
            scene: sap.ui.vk.Scene,
            /**
             * Current viewport's camera.
             */
            camera: sap.ui.vk.Camera
          ): any[];
          /**
           * Sets a new value for property {@link #getSubtractMode subtractMode}.
           *
           * If set to true then this tool will remove selected nodes from the selection set. Default is to always
           * add them to the selection
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSubtractMode(
            /**
             * New value for property `subtractMode`
             */
            bSubtractMode?: boolean
          ): this;
        }
        /**
         * The RedlineTool allows applications to display custom tooltip text on top of 3D object over which pointer
         * is hovering
         */
        class RedlineTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RedlineTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RedlineToolSettings
          );
          /**
           * Constructor for a new RedlineTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RedlineToolSettings
          );

          /**
           * Adds some redlineElement to the aggregation {@link #getRedlineElements redlineElements}.
           */
          addRedlineElement(
            /**
             * The redlineElement to add; if empty, nothing is inserted
             */
            oRedlineElement: sap.ui.vk.RedlineElement
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:elementClicked elementClicked} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RedlineTool` itself.
           */
          attachElementClicked(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RedlineTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:elementClicked elementClicked} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RedlineTool` itself.
           */
          attachElementClicked(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RedlineTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RedlineTool` itself.
           */
          attachElementCreated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RedlineTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RedlineTool` itself.
           */
          attachElementCreated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RedlineTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:elementHovered elementHovered} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RedlineTool` itself.
           */
          attachElementHovered(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RedlineTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:elementHovered elementHovered} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RedlineTool` itself.
           */
          attachElementHovered(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RedlineTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Destroys all the redlineElements in the aggregation {@link #getRedlineElements redlineElements}.
           */
          destroyRedlineElements(): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:elementClicked elementClicked} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachElementClicked(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:elementCreated elementCreated} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachElementCreated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:elementHovered elementHovered} event of this
           * `sap.ui.vk.tools.RedlineTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachElementHovered(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Exports all the current redline elements as an array of JSON objects.
           */
          exportJSON(): object[];
          /**
           * Exports all the current redline elements as an array of SVG objects.
           */
          exportSVG(): object[];
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RedlineTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.RedlineTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:elementClicked elementClicked} to attached listeners.
           */
          fireElementClicked(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              elementId?: string;
            }
          ): this;
          /**
           * Fires event {@link #event:elementCreated elementCreated} to attached listeners.
           */
          fireElementCreated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              element?: object;
            }
          ): this;
          /**
           * Fires event {@link #event:elementHovered elementHovered} to attached listeners.
           */
          fireElementHovered(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              elementId?: string;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RedlineTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets content of aggregation {@link #getRedlineElements redlineElements}.
           *
           * The redline element/elements which will be rendered as soon as the redline tool is activated.
           */
          getRedlineElements(): sap.ui.vk.RedlineElement[];
          /**
           * Iterates through all JSON objects from the array passed as parameter, and creates and restores the redline
           * elements serialized in the array.
           */
          importJSON(
            /**
             * An array of serialized redline elements.
             */
            jsonElements: object[]
          ): sap.ui.vk.tools.RedlineTool;
          /**
           * Iterates through all SVG objects from the array passed as parameter, and creates and restores the redline
           * elements in the array.
           */
          importSVG(
            /**
             * An array of redline elements in SVG format.
             */
            svg: object[]
          ): sap.ui.vk.tools.RedlineTool;
          /**
           * Checks for the provided `sap.ui.vk.RedlineElement` in the aggregation {@link #getRedlineElements redlineElements}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfRedlineElement(
            /**
             * The redlineElement whose index is looked for
             */
            oRedlineElement: sap.ui.vk.RedlineElement
          ): int;
          /**
           * Inserts a redlineElement into the aggregation {@link #getRedlineElements redlineElements}.
           */
          insertRedlineElement(
            /**
             * The redlineElement to insert; if empty, nothing is inserted
             */
            oRedlineElement: sap.ui.vk.RedlineElement,
            /**
             * The `0`-based index the redlineElement should be inserted at; for a negative value of `iIndex`, the redlineElement
             * is inserted at position 0; for a value greater than the current size of the aggregation, the redlineElement
             * is inserted at the last position
             */
            iIndex: int
          ): this;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.RedlineTool;
          /**
           * Removes all the controls from the aggregation {@link #getRedlineElements redlineElements}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllRedlineElements(): sap.ui.vk.RedlineElement[];
          /**
           * Removes a redlineElement from the aggregation {@link #getRedlineElements redlineElements}.
           */
          removeRedlineElement(
            /**
             * The redlineElement to remove or its index or id
             */
            vRedlineElement: int | string | sap.ui.vk.RedlineElement
          ): sap.ui.vk.RedlineElement;
          /**
           * Prepares the RedlineTool control for adding a new instance of {sap.ui.vk.RedlineElement}.
           */
          startAdding(
            /**
             * The redlining element which needs to be added.
             */
            elementInstance: sap.ui.vk.RedlineElement
          ): /* was: sap.ui.vk.RedlineTool */ any;
          /**
           * Stops the mode for adding redlining, which begins when the {@link sap.ui.vk.RedlineTool#startAdding startAdding}
           * method is called.
           */
          stopAdding(): /* was: sap.ui.vk.RedlineTool */ any;
        }
        /**
         * Tool to rotate scene in orbit mode
         */
        class RotateOrbitTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RotateOrbitTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RotateOrbitToolSettings
          );
          /**
           * Constructor for a new RotateOrbitTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new content resource. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RotateOrbitToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateOrbitTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateOrbitTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateOrbitTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateOrbitTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateOrbitTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateOrbitTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateOrbitTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateOrbitTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.RotateOrbitTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:rotate rotate} to attached listeners.
           */
          fireRotate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: int;

              dy?: int;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateOrbitTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Executes Orbit rotation for the target Viewport.
           */
          rotate(
            /**
             * The change in x-coordinate used to define the desired rotation.
             */
            dx: int,
            /**
             * The change in y-coordinate used to define the desired rotation.
             */
            dy: int
          ): void;
        }
        /**
         * Tool to rotate 3D objects in space
         */
        class RotateTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RotateTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RotateToolSettings
          );
          /**
           * Constructor for a new RotateTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RotateToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:axisChanged axisChanged} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           */
          attachAxisChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:axisChanged axisChanged} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           */
          attachAxisChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:placementModeChanged placementModeChanged} event
           * of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           */
          attachPlacementModeChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:placementModeChanged placementModeChanged} event
           * of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           */
          attachPlacementModeChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties: {any} node: node reference, {float[]} offsetToRest,
           * quaternion relative to rest position in parent coordinates {float[]} offsetToPrevious, euler rotation
           * relative to end position of previous sequence, or euler rotation relative to rest position if no previous
           * sequence in parent coordinates {float[]} absolute, quaternion in parent coordinates {float[]} world,
           * quaternion in world coordinates {float[]} restDifference, change of rest position quaternion in parent
           * coordinates {float[]} restDifferenceInCoordinates, change of rest position in euler rotation in current
           * coordinates
           */
          attachRotated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties: {any} node: node reference, {float[]} offsetToRest,
           * quaternion relative to rest position in parent coordinates {float[]} offsetToPrevious, euler rotation
           * relative to end position of previous sequence, or euler rotation relative to rest position if no previous
           * sequence in parent coordinates {float[]} absolute, quaternion in parent coordinates {float[]} world,
           * quaternion in world coordinates {float[]} restDifference, change of rest position quaternion in parent
           * coordinates {float[]} restDifferenceInCoordinates, change of rest position in euler rotation in current
           * coordinates
           */
          attachRotated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties: {any} node: node reference, {float[]} offsetToRest,
           * quaternion relative to rest position in parent coordinates {float[]} offsetToPrevious, euler rotation
           * relative to end position of previous sequence, or euler rotation relative to rest position if no previous
           * sequence in parent coordinates {float[]} absolute, quaternion in parent coordinates {float[]} world,
           * quaternion in world coordinates {float[]} restDifference, change of rest position quaternion in parent
           * coordinates {float[]} restDifferenceInCoordinates, change of rest position in euler rotation in current
           * coordinates
           */
          attachRotating(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has five properties: {any} node: node reference, {float[]} offsetToRest,
           * quaternion relative to rest position in parent coordinates {float[]} offsetToPrevious, euler rotation
           * relative to end position of previous sequence, or euler rotation relative to rest position if no previous
           * sequence in parent coordinates {float[]} absolute, quaternion in parent coordinates {float[]} world,
           * quaternion in world coordinates {float[]} restDifference, change of rest position quaternion in parent
           * coordinates {float[]} restDifferenceInCoordinates, change of rest position in euler rotation in current
           * coordinates
           */
          attachRotating(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:axisChanged axisChanged} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAxisChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCoordinateSystemChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:placementModeChanged placementModeChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPlacementModeChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotating(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.RotateTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:axisChanged axisChanged} to attached listeners.
           */
          fireAxisChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              axis?: sap.ui.vk.tools.RotatableAxis;
            }
          ): this;
          /**
           * Fires event {@link #event:coordinateSystemChanged coordinateSystemChanged} to attached listeners.
           */
          fireCoordinateSystemChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              coordinateSystem?: sap.ui.vk.tools.CoordinateSystem;
            }
          ): this;
          /**
           * Fires event {@link #event:placementModeChanged placementModeChanged} to attached listeners.
           */
          firePlacementModeChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              placementMode?: sap.ui.vk.tools.GizmoPlacementMode;
            }
          ): this;
          /**
           * Fires event {@link #event:rotated rotated} to attached listeners.
           */
          fireRotated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;

              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:rotating rotating} to attached listeners.
           */
          fireRotating(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;

              nodesProperties?: any[];
            }
          ): this;
          /**
           * Gets current value of property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * Default value is `true`.
           */
          getAllowContextMenu(): boolean;
          /**
           * Gets current value of property {@link #getAutoResetValues autoResetValues}.
           *
           * Determines if auto reset values mode is enabled
           *
           * Default value is `true`.
           */
          getAutoResetValues(): boolean;
          /**
           * Gets current value of property {@link #getAxis axis}.
           *
           * Controls which axis are rotatable around. Can be All, X, Y, or Z
           *
           * Default value is `All`.
           */
          getAxis(): sap.ui.vk.tools.RotatableAxis;
          /**
           * Gets current value of property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           *
           * Default value is `World`.
           */
          getCoordinateSystem(): sap.ui.vk.tools.CoordinateSystem;
          /**
           * Gets current value of property {@link #getEnableSnapping enableSnapping}.
           *
           * Determines if snapping when rotating is enabled
           *
           * Default value is `false`.
           */
          getEnableSnapping(): boolean;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * Default value is `Highlight`.
           */
          getNodeSet(): sap.ui.vk.tools.ToolNodeSet;
          /**
           * Gets current value of property {@link #getPlacementMode placementMode}.
           *
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           *
           * Default value is `Default`.
           */
          getPlacementMode(): sap.ui.vk.tools.GizmoPlacementMode;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Performs rotation of selected objects. If coordinate system is specified a moved event is fired
           */
          rotate(
            /**
             * Euler rotation x axis angle in degrees.
             */
            x: float,
            /**
             * Euler rotation y axis angle in degrees.
             */
            y: float,
            /**
             * Euler rotation z axis angle in degrees.
             */
            z: float,
            /**
             * Optional parameter to define coordinate system to be used when these coordinates are applied. If not
             * specified then currently set coordinate ssystem will be used.
             */
            coordinateSystem?: sap.ui.vk.tools.CoordinateSystem
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Sets a new value for property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowContextMenu(
            /**
             * New value for property `allowContextMenu`
             */
            bAllowContextMenu?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getAutoResetValues autoResetValues}.
           *
           * Determines if auto reset values mode is enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAutoResetValues(
            /**
             * New value for property `autoResetValues`
             */
            bAutoResetValues?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getAxis axis}.
           *
           * Controls which axis are rotatable around. Can be All, X, Y, or Z
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `All`.
           */
          setAxis(
            /**
             * New value for property `axis`
             */
            sAxis?: sap.ui.vk.tools.RotatableAxis
          ): this;
          /**
           * Sets a new value for property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `World`.
           */
          setCoordinateSystem(
            /**
             * New value for property `coordinateSystem`
             */
            sCoordinateSystem?: sap.ui.vk.tools.CoordinateSystem
          ): this;
          /**
           * Sets a new value for property {@link #getEnableSnapping enableSnapping}.
           *
           * Determines if snapping when rotating is enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableSnapping(
            /**
             * New value for property `enableSnapping`
             */
            bEnableSnapping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Highlight`.
           */
          setNodeSet(
            /**
             * New value for property `nodeSet`
             */
            sNodeSet?: sap.ui.vk.tools.ToolNodeSet
          ): this;
          /**
           * Sets a new value for property {@link #getPlacementMode placementMode}.
           *
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Default`.
           */
          setPlacementMode(
            /**
             * New value for property `placementMode`
             */
            sPlacementMode?: sap.ui.vk.tools.GizmoPlacementMode
          ): this;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI?: boolean
          ): this;
        }
        /**
         * Tool to rotate scene in turntable mode
         */
        class RotateTurntableTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RotateTurntableTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RotateTurntableToolSettings
          );
          /**
           * Constructor for a new RotateTurntableTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$RotateTurntableToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateTurntableTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTurntableTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTurntableTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateTurntableTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTurntableTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTurntableTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateTurntableTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateTurntableTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.RotateTurntableTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:rotate rotate} to attached listeners.
           */
          fireRotate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: int;

              dy?: int;
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateTurntableTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Executes Turntable rotation for the target Viewport.
           */
          rotate(
            /**
             * The change in x-coordinate used to define the desired rotation.
             */
            dx: int,
            /**
             * The change in y-coordinate used to define the desired rotation.
             */
            dy: int
          ): void;
        }
        /**
         * Tool to scale 3D objects
         */
        class ScaleTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new ScaleTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$ScaleToolSettings
          );
          /**
           * Constructor for a new ScaleTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new content resource. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$ScaleToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:placementModeChanged placementModeChanged} event
           * of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           */
          attachPlacementModeChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:placementModeChanged placementModeChanged} event
           * of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           */
          attachPlacementModeChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * scale relative to rest position in local coordinates {float[]} offsetToPrevious, scale relative to end
           * position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, scale in parent coordinates {float[]} world, scale in world coordinate {float[]} restDifference,
           * change of rest position scale in ratio in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position scale in ratio in current coordinates
           */
          attachScaled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling finished. This event contains parameter 'nodesProperties' that
           * is array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * scale relative to rest position in local coordinates {float[]} offsetToPrevious, scale relative to end
           * position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, scale in parent coordinates {float[]} world, scale in world coordinate {float[]} restDifference,
           * change of rest position scale in ratio in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position scale in ratio in current coordinates
           */
          attachScaled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling occurs. This event contains parameter 'nodesProperties' that is
           * array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * scale relative to rest position in local coordinates {float[]} offsetToPrevious, scale relative to end
           * position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, scale in parent coordinates {float[]} world, scale in world coordinate {float[]} restDifference,
           * change of rest position scale in ratio in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position scale in ratio in current coordinates
           */
          attachScaling(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling occurs. This event contains parameter 'nodesProperties' that is
           * array of objects, each object has four properties: {any} node: node reference, {float[]} offsetToRest,
           * scale relative to rest position in local coordinates {float[]} offsetToPrevious, scale relative to end
           * position of previous sequence or rest position if no previous sequence in local coordinates {float[]}
           * absolute, scale in parent coordinates {float[]} world, scale in world coordinate {float[]} restDifference,
           * change of rest position scale in ratio in parent coordinates {float[]} restDifferenceInCoordinates, change
           * of rest position scale in ratio in current coordinates
           */
          attachScaling(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCoordinateSystemChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:placementModeChanged placementModeChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPlacementModeChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachScaled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachScaling(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.ScaleTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.ScaleTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:coordinateSystemChanged coordinateSystemChanged} to attached listeners.
           */
          fireCoordinateSystemChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              coordinateSystem?: sap.ui.vk.tools.CoordinateSystem;
            }
          ): this;
          /**
           * Fires event {@link #event:placementModeChanged placementModeChanged} to attached listeners.
           */
          firePlacementModeChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              placementMode?: sap.ui.vk.tools.GizmoPlacementMode;
            }
          ): this;
          /**
           * Fires event {@link #event:scaled scaled} to attached listeners.
           */
          fireScaled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;

              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:scaling scaling} to attached listeners.
           */
          fireScaling(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;

              z?: float;

              nodesProperties?: any[];
            }
          ): this;
          /**
           * Gets current value of property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * Default value is `true`.
           */
          getAllowContextMenu(): boolean;
          /**
           * Gets current value of property {@link #getAutoResetValues autoResetValues}.
           *
           * Determines if auto reset values mode is enabled
           *
           * Default value is `true`.
           */
          getAutoResetValues(): boolean;
          /**
           * Gets current value of property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           *
           * Default value is `World`.
           */
          getCoordinateSystem(): sap.ui.vk.tools.CoordinateSystem;
          /**
           * Gets current value of property {@link #getEnableSnapping enableSnapping}.
           *
           * Enable snapping if set true
           *
           * Default value is `false`.
           */
          getEnableSnapping(): boolean;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.ScaleTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * Default value is `Highlight`.
           */
          getNodeSet(): sap.ui.vk.tools.ToolNodeSet;
          /**
           * Gets current value of property {@link #getNonUniformScaleEnabled nonUniformScaleEnabled}.
           *
           * If set to `true` then this tool will enable scaling along a single axis, otherwise it will scale objects
           * along all three axes proportionaly
           *
           * Default value is `false`.
           */
          getNonUniformScaleEnabled(): boolean;
          /**
           * Gets current value of property {@link #getPlacementMode placementMode}.
           *
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           *
           * Default value is `Default`.
           */
          getPlacementMode(): sap.ui.vk.tools.GizmoPlacementMode;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Performs scaling of selected objects.
           */
          scale(
            /**
             * Scaling value for x axis.
             */
            x: float,
            /**
             * Scaling value for y axis.
             */
            y: float,
            /**
             * Scaling value for z axis.
             */
            z: float,
            /**
             * Optional parameter to define coordinate system to be used when these coordinates are applied. If not
             * specified then currently set coordinate ssystem will be used.
             */
            coordinateSystem?: sap.ui.vk.tools.CoordinateSystem
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Sets a new value for property {@link #getAllowContextMenu allowContextMenu}.
           *
           * Whether or not to allow context menu on right-click
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowContextMenu(
            /**
             * New value for property `allowContextMenu`
             */
            bAllowContextMenu?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getAutoResetValues autoResetValues}.
           *
           * Determines if auto reset values mode is enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAutoResetValues(
            /**
             * New value for property `autoResetValues`
             */
            bAutoResetValues?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Parent, Screen or Custom
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `World`.
           */
          setCoordinateSystem(
            /**
             * New value for property `coordinateSystem`
             */
            sCoordinateSystem?: sap.ui.vk.tools.CoordinateSystem
          ): this;
          /**
           * Sets a new value for property {@link #getEnableSnapping enableSnapping}.
           *
           * Enable snapping if set true
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableSnapping(
            /**
             * New value for property `enableSnapping`
             */
            bEnableSnapping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to `true` values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Highlight`.
           */
          setNodeSet(
            /**
             * New value for property `nodeSet`
             */
            sNodeSet?: sap.ui.vk.tools.ToolNodeSet
          ): this;
          /**
           * Sets a new value for property {@link #getNonUniformScaleEnabled nonUniformScaleEnabled}.
           *
           * If set to `true` then this tool will enable scaling along a single axis, otherwise it will scale objects
           * along all three axes proportionaly
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setNonUniformScaleEnabled(
            /**
             * New value for property `nonUniformScaleEnabled`
             */
            bNonUniformScaleEnabled?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getPlacementMode placementMode}.
           *
           * Sets the placement mode. Can be Default, ObjectCenter, or OnScreen
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Default`.
           */
          setPlacementMode(
            /**
             * New value for property `placementMode`
             */
            sPlacementMode?: sap.ui.vk.tools.GizmoPlacementMode
          ): this;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI?: boolean
          ): this;
        }
        /**
         * Tool to display current scene orientation and to provide pre-defined camera positions
         */
        class SceneOrientationTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new SceneOrientationTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$SceneOrientationToolSettings
          );
          /**
           * Constructor for a new SceneOrientationTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$SceneOrientationToolSettings
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.SceneOrientationTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.SceneOrientationTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableInitialView enableInitialView}.
           *
           * Default value is `true`.
           */
          getEnableInitialView(): boolean;
          /**
           * Gets current value of property {@link #getEnablePredefinedViews enablePredefinedViews}.
           *
           * Default value is `true`.
           */
          getEnablePredefinedViews(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.SceneOrientationTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.SceneOrientationTool;
          /**
           * Sets a new value for property {@link #getEnableInitialView enableInitialView}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableInitialView(
            /**
             * New value for property `enableInitialView`
             */
            bEnableInitialView?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getEnablePredefinedViews enablePredefinedViews}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnablePredefinedViews(
            /**
             * New value for property `enablePredefinedViews`
             */
            bEnablePredefinedViews?: boolean
          ): this;
          /**
           * Performs camera "fly to" animation to the predefined view.
           */
          setView(
            /**
             * Predefined view.
             */
            view?: sap.ui.vk.tools.PredefinedView,
            /**
             * Time to perform the "fly to" animation.
             */
            milliseconds?: number
          ): sap.ui.vk.tools.SceneOrientationTool;
        }
        /**
         * Specifies base for all tools to extend
         */
        class Tool extends sap.ui.core.Element {
          /**
           * Base for all tool controls.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$ToolSettings,
            /**
             * scope An object for resolving string-based type and formatter references in bindings.
             */
            oScope?: object
          );
          /**
           * Base for all tool controls.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$ToolSettings,
            /**
             * scope An object for resolving string-based type and formatter references in bindings.
             */
            oScope?: object
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:enabled enabled} event of this `sap.ui.vk.tools.Tool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.Tool` itself.
           */
          attachEnabled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.Tool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:enabled enabled} event of this `sap.ui.vk.tools.Tool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.Tool` itself.
           */
          attachEnabled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.Tool` itself
             */
            oListener?: object
          ): this;
          /**
           * Destroys the gizmo in the aggregation {@link #getGizmo gizmo}.
           */
          destroyGizmo(): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:enabled enabled} event of this `sap.ui.vk.tools.Tool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEnabled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.Tool with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.Tool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:enabled enabled} to attached listeners.
           */
          fireEnabled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Returns the true or false to indicated that the tool is enabled or not. This event is fired by the tool
               * under various conditions, including an attempt to set an activeViewport that is incompatible with the
               * tool. use getActive / setActive to turn the tool on or off
               */
              enabled?: boolean;

              reason?: string;
            }
          ): this;
          /**
           * Gets current value of property {@link #getActive active}.
           *
           * Used to control the tool rendering and interaction pipeline.
           *
           * Default value is `false`.
           */
          getActive(): boolean;
          /**
           * Gets current value of property {@link #getFootprint footprint}.
           *
           * Used to decide whether this tool should be enabled for the target viewport.
           */
          getFootprint(): string[];
          /**
           * Gets content of aggregation {@link #getGizmo gizmo}.
           *
           * sap.ui.vk.tools.Gizmo owned by this control and used for rendering floating UI
           */
          getGizmo(): sap.ui.vk.tools.Gizmo;
          /**
           * ID of the element which is the current target of the association {@link #getGizmoContainer gizmoContainer},
           * or `null`.
           */
          getGizmoContainer(): sap.ui.core.ID;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.Tool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getTargetViewportType targetViewportType}.
           */
          getTargetViewportType(): any;
          /**
           * Gets current value of property {@link #getToolid toolid}.
           *
           * GUID identifier for the tool to prevent naming conflicts.
           */
          getToolid(): string;
          /**
           * Manages the 'active' flag for this tool and any other internals required
           */
          setActive(
            /**
             * indicates whether this tools is active or not
             */
            value?: boolean,
            /**
             * the tool target is used by the tool to carry out its operations
             */
            activeTarget?: object,
            /**
             * used to evaluate whether a tool should be rendered as part of the activeTarget
             */
            gizmoContainer?: object
          ): void;
          /**
           * Sets a new value for property {@link #getFootprint footprint}.
           *
           * Used to decide whether this tool should be enabled for the target viewport.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFootprint(
            /**
             * New value for property `footprint`
             */
            sFootprint: string[]
          ): this;
          /**
           * Sets the aggregated {@link #getGizmo gizmo}.
           */
          setGizmo(
            /**
             * The gizmo to set
             */
            oGizmo: sap.ui.vk.tools.Gizmo
          ): this;
          /**
           * Sets the associated {@link #getGizmoContainer gizmoContainer}.
           */
          setGizmoContainer(
            /**
             * ID of an element which becomes the new target of this gizmoContainer association; alternatively, an element
             * instance may be given
             */
            oGizmoContainer: sap.ui.core.ID | sap.ui.core.Control
          ): this;
          /**
           * Sets a new value for property {@link #getTargetViewportType targetViewportType}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTargetViewportType(
            /**
             * New value for property `targetViewportType`
             */
            oTargetViewportType: any
          ): this;
          /**
           * Sets a new value for property {@link #getToolid toolid}.
           *
           * GUID identifier for the tool to prevent naming conflicts.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setToolid(
            /**
             * New value for property `toolid`
             */
            sToolid: string
          ): this;
        }
        /**
         * The TooltipTool allowes applications to display custom tooltip text on top of 3D object over which pointer
         * is hovering
         */
        class TooltipTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new TooltipTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$TooltipToolSettings
          );
          /**
           * Constructor for a new TooltipTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$TooltipToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.ui.vk.tools.TooltipTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TooltipTool` itself.
           *
           * This event will be fired when mouse hover occurs.
           */
          attachHover(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TooltipTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.ui.vk.tools.TooltipTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TooltipTool` itself.
           *
           * This event will be fired when mouse hover occurs.
           */
          attachHover(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TooltipTool` itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:hover hover} event of this `sap.ui.vk.tools.TooltipTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachHover(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.TooltipTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.ui.vk.tools.TooltipTool>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:hover hover} to attached listeners.
           */
          fireHover(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: int;

              y?: int;

              nodeRef?: any;
            }
          ): this;
          /**
           * Gets current value of property {@link #getAnimate animate}.
           *
           * Default value is `false`.
           */
          getAnimate(): boolean;
          /**
           * Gets current value of property {@link #getFollowCursor followCursor}.
           *
           * Default value is `true`.
           */
          getFollowCursor(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.TooltipTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getOffsetX offsetX}.
           *
           * Default value is `10`.
           */
          getOffsetX(): float;
          /**
           * Gets current value of property {@link #getOffsetY offsetY}.
           *
           * Default value is `15`.
           */
          getOffsetY(): float;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.TooltipTool;
          /**
           * Sets a new value for property {@link #getAnimate animate}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setAnimate(
            /**
             * New value for property `animate`
             */
            bAnimate?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getFollowCursor followCursor}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setFollowCursor(
            /**
             * New value for property `followCursor`
             */
            bFollowCursor?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getOffsetX offsetX}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10`.
           */
          setOffsetX(
            /**
             * New value for property `offsetX`
             */
            fOffsetX?: float
          ): this;
          /**
           * Sets a new value for property {@link #getOffsetY offsetY}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `15`.
           */
          setOffsetY(
            /**
             * New value for property `offsetY`
             */
            fOffsetY?: float
          ): this;
          /**
           * Sets the tooltip title
           */
          setTitle(
            /**
             * Title
             */
            title?: string
          ): sap.ui.vk.tools.TooltipTool;
        }
        /**
         * The TransformSvgElementTool allows applications to transform an svg element.
         */
        class TransformSvgElementTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new TransformSvgElementTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$TransformSvgElementToolSettings
          );
          /**
           * Constructor for a new TransformSvgElementTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: sap.ui.vk.tools.$TransformSvgElementToolSettings
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when scaling finished.
           */
          attachScaled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when scaling finished.
           */
          attachScaled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when scaling occurs.
           */
          attachScaling(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TransformSvgElementTool` itself.
           *
           * This event will be fired when scaling occurs.
           */
          attachScaling(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TransformSvgElementTool`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moved moved} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoved(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moving moving} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoving(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotating(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachScaled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.TransformSvgElementTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachScaling(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.TransformSvgElementTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.ui.vk.tools.TransformSvgElementTool
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:moved moved} to attached listeners.
           */
          fireMoved(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;
              /**
               * Array of affected nodes properties. Each object contains following properties: {any} node - node reference
               * {float} x - offset in x direction {float} y - offset in y direction
               */
              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:moving moving} to attached listeners.
           */
          fireMoving(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;
              /**
               * Array of affected nodes properties. Each object contains following properties: {any} node - node reference
               * {float} x - offset in x direction {float} y - offset in y direction
               */
              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:rotated rotated} to attached listeners.
           */
          fireRotated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              angle?: float;
              /**
               * Array of affected nodes properties. Each object contains following properties: {any} node - node reference
               * {float} angle - angle of rotation
               */
              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:rotating rotating} to attached listeners.
           */
          fireRotating(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              angle?: float;
              /**
               * Array of affected nodes properties. Each object contains following properties: {any} node - node reference
               * {float} angle - angle of rotation
               */
              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:scaled scaled} to attached listeners.
           */
          fireScaled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;
              /**
               * Array of affected nodes properties. Each object contains following properties: {any} node - node reference
               * {float} x - scale in x direction {float} y - scale in y direction
               */
              nodesProperties?: any[];
            }
          ): this;
          /**
           * Fires event {@link #event:scaling scaling} to attached listeners.
           */
          fireScaling(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: float;

              y?: float;
              /**
               * Array of affected nodes properties. Each object contains following properties: {any} node - node reference
               * {float} x - scale in x direction {float} y - scale in y direction
               */
              nodesProperties?: any[];
            }
          ): this;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.TransformSvgElementTool.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Gets current value of property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * Default value is `Highlight`.
           */
          getNodeSet(): sap.ui.vk.tools.ToolNodeSet;
          /**
           * Gets current value of property {@link #getUniformScaleEnabled uniformScaleEnabled}.
           *
           * If set to `true` then this tool will enable uniform scaling.
           *
           * Default value is `false`.
           */
          getUniformScaleEnabled(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.TransformSvgElementTool;
          /**
           * Sets a new value for property {@link #getNodeSet nodeSet}.
           *
           * Determine what set of nodes will be transformed with this tool
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Highlight`.
           */
          setNodeSet(
            /**
             * New value for property `nodeSet`
             */
            sNodeSet?: sap.ui.vk.tools.ToolNodeSet
          ): this;
          /**
           * Sets a new value for property {@link #getUniformScaleEnabled uniformScaleEnabled}.
           *
           * If set to `true` then this tool will enable uniform scaling.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUniformScaleEnabled(
            /**
             * New value for property `uniformScaleEnabled`
             */
            bUniformScaleEnabled?: boolean
          ): this;
        }
        /**
         * Sets the allowed operations on the anchor point tool
         */
        enum AnchorPointToolOperation {
          /**
           * Allow both rotation and move
           */
          All = "All",
          /**
           * Allow only move
           */
          Move = "Move",
          /**
           * Allow only rotation
           */
          Rotate = "Rotate",
        }
        /**
         * Defines the coordinate system type.
         */
        enum CoordinateSystem {
          /**
           * Custom coordinate system, defined by anchor point tool
           */
          Custom = "Custom",
          /**
           * Local coordinate system
           */
          Local = "Local",
          /**
           * Parent coordinate system
           */
          Parent = "Parent",
          /**
           * Screen coordinate system
           */
          Screen = "Screen",
          /**
           * World coordinate system
           */
          World = "World",
        }
        /**
         * Sets the placement mode for move tool.
         */
        enum GizmoPlacementMode {
          /**
           * Default PlacementMode
           */
          Default = "Default",
          /**
           * Object center PlacementMode
           */
          ObjectCenter = "ObjectCenter",
          /**
           * On screen PlacementMode
           */
          OnScreen = "OnScreen",
          /**
           * Rest position PlacementMode
           */
          Rest = "Rest",
        }
        /**
         * Describes the type of click or tap event that triggered the hitTest.
         */
        enum HitTestClickType {
          /**
           * Right click or context event
           */
          Context = "Context",
          /**
           * Double click or tap
           */
          Double = "Double",
          /**
           * Single click or tap event
           */
          Single = "Single",
        }
        /**
         * Sets the expected schema for the extraction of ids for hit nodes .
         */
        enum HitTestIdMode {
          /**
           * HitTest will call an application supplied method to extract Id
           */
          Callback = "Callback",
          /**
           * ThreeJS Id mode. HitTest result returns a threejs Id for the object
           */
          ThreeJS = "ThreeJS",
          /**
           * HitTest result and event extracts an id for hit nodes based on VE Cloud Service Data Model
           */
          VEsID = "VEsID",
        }
        /**
         * Sets the predefined view type.
         */
        enum PredefinedView {
          /**
           * Back view
           */
          Back = "Back",
          /**
           * Bottom view
           */
          Bottom = "Bottom",
          /**
           * Front view
           */
          Front = "Front",
          /**
           * Initial view
           */
          Initial = "Initial",
          /**
           * Left view
           */
          Left = "Left",
          /**
           * Right view
           */
          Right = "Right",
          /**
           * Top view
           */
          Top = "Top",
        }
        /**
         * Sets the Rotatable Axis type.
         */
        enum RotatableAxis {
          /**
           * All three axises rotatable
           */
          All = "All",
          /**
           * X axis rotatable
           */
          X = "X",
          /**
           * Y axis rotatable
           */
          Y = "Y",
          /**
           * Z axis rotatable
           */
          Z = "Z",
        }
        /**
         * Selection display options.
         */
        enum ToolNodeSet {
          Highlight = "Highlight",

          Outline = "Outline",
        }
      }
      /**
       * @SINCE 1.60.0
       *
       * Contract for authorization callback function
       *
       * A callback function which can be implemented by an application to provide an authorization token. Such
       * function receives single parameter which is connection URL and must return a promise which will be resolved
       * when authorization token is obtained.
       *
       * A sample implementation of authorization handler::
       * ```javascript
       *
       * ...
       * var viewer = new sap.ui.vk.Viewer();
       * viewer.setAuthorizationHandler(function(url) {
       *     var headers = new Headers();
       *     headers.append("Content-Type", "application/x-www-form-urlencoded");
       *     headers.append("Authorization", "Basic " + basicAuth);
       *
       *     return fetch(accessTokenUrl, {
       *             method: "POST",
       *             body: "grant_type=client_credentials",
       *             headers: headers
       *         }).then(response => response.json())
       * });
       * ...
       * ```
       */
      interface AuthorizationHandler {
        __implements__sap_ui_vk_AuthorizationHandler: boolean;
      }

      /**
       * @SINCE 1.38.0
       *
       * Contract for objects that implement decryption.
       *
       * An interface for an object provided by an application to decrypt content of encrypted models.
       *
       * Content is encrypted with the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard AES128}
       * algorithm in the {@link https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
       * CBC} mode.
       *
       * A key is derived with the {@link https://en.wikipedia.org/wiki/PBKDF2 PBKDF2} algorithm by applying the
       * {@link https://en.wikipedia.org/wiki/Hash-based_message_authentication_code HMAC}-{@link https://en.wikipedia.org/wiki/SHA-2
       * SHA256} function 10,000 times.
       *
       * A sample implementation and usage of the sap.ui.vk.DecryptionHandler interface with the {@link https://cdnjs.cloudflare.com/ajax/libs/asmCrypto/0.16.4/asmcrypto.js
       * asmCrypto} library::
       * ```javascript
       *
       * ...
       * <script src="https://cdnjs.cloudflare.com/ajax/libs/asmCrypto/0.16.4/asmcrypto.js"></script>
       * ...
       * var decryptionHandler = {
       *     deriveKey: function(salt, password) {
       *         try {
       *             return asmCrypto.PBKDF2_HMAC_SHA256.bytes(password, salt, 10000, 16);
       *         } catch (ex) {
       *             return null;
       *         }
       *     },
       *     decrypt: function(key, iv, input) {
       *         try {
       *             return asmCrypto.AES_CBC.decrypt(input, key, true, iv);
       *         } catch (ex) {
       *             return null;
       *         }
       *     }
       * };
       * ...
       * var viewer = new sap.ui.vk.Viewer();
       * viewer.setDecryptionHandler(decryptionHandler);
       * var contentResource = new sap.ui.vk.ContentResource({
       *     source: "http://my-web-server.com/my-encrypted-model.vds",
       *     sourceType: "vds",
       *     sourceId: "abc",
       *     password: "abracadabra"
       * });
       * viewer.addContentResource(contentResource);
       * ```
       */
      interface DecryptionHandler {
        __implements__sap_ui_vk_DecryptionHandler: boolean;

        /**
         * Decrypts the input buffer with the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
         * AES128} algorithm in the {@link https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
         * CBC} mode.
         */
        decrypt(
          /**
           * The derived key generated by the previous call to {@link sap.ui.vk.DecryptionHandler#deriveKey sap.ui.vk.DecryptionHandler.deriveKey}.
           */
          key: object,
          /**
           * The 128-bit {@link https://en.wikipedia.org/wiki/Initialization_vector initialization vector}.
           */
          iv: Uint8Array,
          /**
           * The encrypted buffer.
           */
          encryptedData: Uint8Array
        ): Uint8Array;
        /**
         * Generates a cryptographic session key derived from a base data value.
         *
         * The key must be derived with the {@link https://en.wikipedia.org/wiki/PBKDF2 PBKDF2} algorithm by applying
         * the {@link https://en.wikipedia.org/wiki/Hash-based_message_authentication_code HMAC}-{@link https://en.wikipedia.org/wiki/SHA-2
         * SHA256} function 10,000 times.
         *
         * The resulting 128-bit key should be passed to subseqeunt calls to {@link sap.ui.vk.DecryptionHandler#decrypt
         * sap.ui.vk.DecryptionHandler.decrypt}.
         */
        deriveKey(
          /**
           * Random data that is used as an additional input to a one-way function that "hashes" a password or passphrase.
           */
          salt: Uint8Array,
          /**
           * A password used for encryption/decryption.
           */
          password: Uint8Array
        ): object;
      }

      /**
       * Contract for objects that provide access to animation playbacks.
       */
      interface IPlaybackCollection {
        __implements__sap_ui_vk_IPlaybackCollection: boolean;
      }

      interface $AnimationPlayerSettings extends sap.ui.core.$ElementSettings {
        viewStateManager?: sap.ui.vk.ViewStateManagerBase | string;

        viewActivated?: Function;

        beforeTimeChanged?: Function;

        timeChanged?: Function;

        stateChanged?: Function;
      }

      interface $AnnotationSettings extends sap.ui.core.$ControlSettings {
        /**
         * Reference to the annotation Id
         */
        annotationId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Reference to the annotation name
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Reference to the node that represents the annotation
         */
        nodeRef?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The text that will be displayed in the annotation
         */
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The style of the annotation
         */
        style?:
          | sap.ui.vk.AnnotationStyle
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the visibility of the annotation
         */
        display?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the animation of the annotation. If set to `false` then animation is not played.
         */
        animate?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Amount of time in seconds to wait before animation is played. Default value of -1 means that this is
         * not set.
         */
        animationDelay?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the annotation is slected or unselected
         */
        selected?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If annotation is editable then double click event is fired when user double clicks on the annotation
         * and text editing is allowed by calling openEditor() method. If annotation is also selected then resize
         * and reposition handles will be displayed.
         */
        editable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the X Coordinate of the annotation. This uses a scale of -0.5 to 0.5, left to right respectively.
         * This is relative to the Viewport's safe area if present, otherwise it is relative to the Viewport.
         */
        xCoordinate?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the Y Coordinate of the annotation. This uses a scale of -0.5 to 0.5, top to bottom respectively.
         * This is relative to the Viewport's safe area if present, otherwise it is relative to the Viewport.
         */
        yCoordinate?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets horizontal offset of annotation's position relative to the point where it should be normally placed.
         * Can be used to offset annotation from attachment node (if set). This uses a scale of -0.5 to 0.5, left
         * to right respectively.
         */
        xOffset?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets horizontal offset of annotation's position relative to the point where it should be normally placed.
         * Can be used to offset annotation from attachment node (if set). This uses a scale of -0.5 to 0.5, top
         * to bottom respectively.
         */
        yOffset?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the height of the annotation. This uses a scale of 0 to 1, 0% to 100% respectively. This is relative
         * to the Viewport's safe area if present, otherwise it is relative to the Viewport. Negative values will
         * be ignored.
         */
        height?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the width of the annotation. This uses a scale of 0 to 1, 0% to 100% respectively. This is relative
         * to the Viewport's safe area if present, otherwise it is relative to the Viewport. Negative values will
         * be ignored.
         */
        width?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        textEditor?: sap.ui.core.Control;

        viewport?: sap.ui.vk.Viewport | string;
      }

      interface $CameraSettings extends sap.ui.base.$ManagedObjectSettings {
        /**
         * Camera position in global space (x, y, z coordinates)
         */
        position?: float[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Camera direction vector in global space (normalized x, y, z vector values)
         */
        targetDirection?:
          | float[]
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Camera up vector in global space (normalized x, y, z vector values)
         */
        upDirection?: float[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Near clipping plane distance
         */
        nearClipPlane?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Far clipping plane distance
         */
        farClipPlane?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ContainerBaseSettings extends sap.ui.core.$ControlSettings {
        /**
         * Show fullscreen toggle button in toolbar
         */
        showFullScreen?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show settings button in toolbar
         */
        showSettings?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show selection button in toolbar
         */
        showSelection?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls whether the control is show fullscreen or embedded
         */
        fullScreen?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Title to show in toolbar
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        autoAdjustHeight?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Content Aggregation.
         */
        content?:
          | sap.ui.vk.ContainerContent[]
          | sap.ui.vk.ContainerContent
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
         */
        ariaDescribedBy?: Array<sap.ui.core.Control | string>;

        /**
         * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledBy).
         */
        ariaLabelledBy?: Array<sap.ui.core.Control | string>;

        contentChange?: Function;

        settingsPressed?: Function;
      }

      interface $ContainerContentSettings extends sap.ui.core.$ControlSettings {
        /**
         * Icon to show up in the toolbar
         */
        icon?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Title for the icon in the toolbar
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        content?: sap.ui.core.Control;
      }

      interface $ContentConnectorSettings extends sap.ui.core.$ElementSettings {
        /**
         * Content resources to load and display.
         */
        contentResources?:
          | sap.ui.vk.ContentResource[]
          | sap.ui.vk.ContentResource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * View state managers.
         */
        viewStateManagers?:
          | sap.ui.vk.ViewStateManager[]
          | sap.ui.vk.ViewStateManager
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * This event will be fired when content resource changes are about to be processed.
         */
        contentChangesStarted?: Function;

        /**
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        contentChangesFinished?: Function;

        /**
         * This event will be fired to report the progress of content changes.
         */
        contentChangesProgress?: Function;

        /**
         * This event will be fired when content loading is finished.
         */
        contentLoadingFinished?: Function;

        /**
         * This event will be fired when the current content is completely rebuilt or destroyed as a result of changes
         * in content resources.
         */
        contentReplaced?: Function;

        /**
         * This event will be fired when the current content is about to be destroyed.
         */
        contentDestroying?: Function;
      }

      interface $ContentManagerSettings
        extends sap.ui.base.$ManagedObjectSettings {
        /**
         * This event will be fired when content resources are about to be loaded.
         */
        contentChangesStarted?: Function;

        /**
         * This event will be fired when content resources have been loaded successfully or with a failure.
         */
        contentChangesFinished?: Function;

        /**
         * This event will be fired to report the progress of content changes.
         */
        contentChangesProgress?: Function;

        /**
         * This event will be fired when content loading is finished.
         */
        contentLoadingFinished?: Function;
      }

      interface $ContentResourceSettings
        extends sap.ui.base.$ManagedObjectSettings {
        /**
         * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the
         * content resource/file to load from. The source may be omitted if a grouping node is needed.
         */
        source?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The source type of the content resource. Valid types:
         * 	 - vds
         * 	 - vds4
         * 	 - svg
         * 	 - png
         * 	 - jpg
         * 	 - jpeg
         * 	 - gif
         * 	 - bmp
         * 	 - tif*
         * 	 - tiff*
         * 	 - stream  The source type may be omitted if this is a grouping content node.
         * NOTE: The tif and tiff image formats are not supported on all browsers. Source type "vds" initializes
         * deprecated DVL namespace and uses legacy library to load and display VDS file content. If source type
         * of "vds4" is used then new namespace based on Threejs rendering model will be used to load and display
         * VDS file content. Since DVL namespace is deprecated in one of future releases it will be removed and
         * source type "vds" will also use Threejs model.
         */
        sourceType?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The unique ID of the content resource.
         */
        sourceId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The local transformation matrix of the node created for this content resource.
         */
        localMatrix?:
          | sap.ui.vk.TransformationMatrix
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The name of the node created for this content resource.
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The password to use when opening the resource.
         */
        password?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If set to false, unsecure connections will be used. Default: true.
         */
        useSecureConnection?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Id of scene to retrieve tree for. Mandatory for the stream source type.
         */
        veid?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Send structural data for hidden objects, if false they will be omitted, reducing data size. Default:
         * true.
         */
        includeHidden?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Send structural data for animation objects, if false they will be omitted, reducing data size. Default:
         * true.
         */
        includeAnimation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If set to true, elements for PMI rendering content will be returned. Default: false.
         */
        pushPMI?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Optional metadata filter that can trim the tree before sending to the client only keeping nodes that
         * passed the filter and their parents. Default: null. Format: Comma-separated list of meta.category1.tag1.value1,
         * meta.category2.tag2.value2. "meta." is the prefix and all metadata filters must start with it. Multiple
         * filters are supported, they are combined using `OR` operator. Includes parent nodes of matching nodes
         * (e.g. breadcrumb) even if they don't pass the filter.
         */
        metadataFilter?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Optional parameter with view id which shall be activated when scene is loaded.
         */
        activateView?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Optional boolean parameter to enable detailed logging. Can be used to track performance issues during
         * data streaming from SAP 3D Visualisation Service.
         */
        enableLogger?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If set to true, information of view groups will be returned. Default: true.
         */
        pushViewGroups?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If set to true, will return nodes with the type background
         */
        includeBackground?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If set to true, will load parametric nodes
         */
        includeParametric?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Child content resources.
         */
        contentResources?:
          | sap.ui.vk.ContentResource[]
          | sap.ui.vk.ContentResource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $DrawerToolbarSettings extends sap.ui.core.$ControlSettings {
        /**
         * Indicates whether the DrawerToolbar is expanded or not. If expanded is set to true, then both the toolbar
         * and 'Close' icon are rendered. If expanded is set to false, then only the 'Open' icon is rendered.
         */
        expanded?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Determines the content of the DrawerToolbar. See {@link sap.m.OverflowToolbar} for list of allowed controls.
         * The content visible when the DrawerToolbar is expanded.
         */
        content?:
          | sap.ui.core.Control[]
          | sap.ui.core.Control
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        viewport?: sap.ui.vk.Viewport | string;
      }

      interface $FlexibleControlSettings extends sap.ui.core.$ControlSettings {
        /**
         * CSS width of the vertical layout.
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        layout?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If not enabled all controls inside are not enabled automatically.
         */
        enabled?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Child Controls within the layout.
         */
        content?:
          | sap.ui.core.Control[]
          | sap.ui.core.Control
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $FlexibleControlLayoutDataSettings
        extends sap.ui.core.$LayoutDataSettings {
        /**
         * Sets the size of the content.
         */
        size?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the minimum size of the content in px.
         */
        minSize?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the margin-bottom of the content in px.
         */
        marginTop?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        marginBottom?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ImageContentManagerSettings
        extends sap.ui.vk.$ContentManagerSettings {}

      interface $LegendItemSettings extends sap.m.$StandardListItemSettings {
        /**
         * show color square
         */
        color?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The semantic spot type for the legend marker.
         */
        semanticSpotType?:
          | sap.ui.vbm.SemanticType
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ListPanelSettings extends sap.ui.core.$ControlSettings {
        /**
         * Header text
         */
        headerText?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Header icon
         */
        headerIcon?:
          | sap.ui.core.URI
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Expansion state
         */
        expanded?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Expand animation
         */
        expandAnimation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Selection Mode
         */
        selectionMode?:
          | sap.m.ListMode
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Item aggregation
         */
        items?:
          | sap.m.ListItemBase[]
          | sap.m.ListItemBase
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Event is fired if the header icon is pressed
         */
        headerIconPress?: Function;

        /**
         * Event is fired if the panel is expanded of collapsed
         */
        expand?: Function;

        /**
         * Event is fired when selection is changed via user interaction inside the control.
         */
        selectionChange?: Function;

        /**
         * Event is fired when an item is pressed unless the item's `type` property is `Inactive`.
         */
        itemPress?: Function;
      }

      interface $ListPanelStackSettings extends sap.ui.core.$ControlSettings {
        /**
         * Control width
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Expansion state
         */
        expanded?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Expand animation
         */
        expandAnimation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Ability to collapse
         */
        collapsible?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        content?:
          | sap.ui.vk.ListPanel[]
          | sap.ui.vk.ListPanel
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $MapContainerSettings extends sap.ui.vk.$ContainerBaseSettings {
        /**
         * Show navbar
         */
        showNavbar?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the visibility of the home button
         */
        showHome?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the visibility of the Map Layer Select
         */
        showMapLayer?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the visibility of the rectangular zoom button
         */
        showRectangularZoom?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the visibility of the zoom buttons
         */
        showZoom?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * List Panel aggregation
         */
        listPanelStack?: sap.ui.vk.ListPanelStack;
      }

      interface $MaterialSettings extends sap.ui.base.$ManagedObjectSettings {
        /**
         * Material id
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Material name
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Ambient colour (optional) - red, green, blue, and alhpa
         */
        ambientColour?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Diffuse colour (optional) - red, green, blue, and alhpa
         */
        diffuseColour?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Specular colour (optional) - red, green, blue, and alhpa
         */
        specularColour?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Emissive colour (optional) - red, green, blue, and alhpa
         */
        emissiveColour?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Opacity (optional)
         */
        opacity?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Glossiness (optional)
         */
        glossiness?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Line colour (optional) - red, green, blue, and alhpa
         */
        lineColour?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Line width (optional)
         */
        lineWidth?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Diffuse texture (optional)
         */
        textureDiffuse?:
          | sap.ui.vk.Texture
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Bump texture (optional)
         */
        textureBump?:
          | sap.ui.vk.Texture
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Opacity texture (optional)
         */
        textureOpacity?:
          | sap.ui.vk.Texture
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Reflection texture (optional)
         */
        textureReflection?:
          | sap.ui.vk.Texture
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Emissive texture (optional)
         */
        textureEmissive?:
          | sap.ui.vk.Texture
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Ambient occlusion texture (optional)
         */
        textureAmbientOcclusion?:
          | sap.ui.vk.Texture
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $NativeViewportSettings extends sap.ui.core.$ControlSettings {
        /**
         * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full
         * view (best fit).
         */
        limitZoomOut?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * An association to the `ContentConnector` instance that manages content resources.
         */
        contentConnector?: sap.ui.vk.ContentConnector | string;

        /**
         * Raised when the display size of the image in the Native Viewport changes.
         */
        resize?: Function;

        /**
         * Raised when the display position or magnification of the image in the Native Viewport changes.
         */
        move?: Function;
      }

      interface $NodeHierarchySettings
        extends sap.ui.base.$ManagedObjectSettings {
        /**
         * This event will be fired when the node hierarchy changes, e.g. a node is added or removed.
         */
        changed?: Function;

        /**
         * This event will be fired when a new node is created.
         */
        nodeCreated?: Function;

        /**
         * This event will be fired when a node is about to be removed.
         */
        nodeRemoving?: Function;

        nodeReplaced?: Function;

        nodeUpdated?: Function;
      }

      interface $NodeProxySettings extends sap.ui.base.$ManagedObjectSettings {
        /**
         * The node reference. This property is read-only.
         */
        nodeRef?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The node VE IDs. This property is read-only.
         */
        veIds?: object[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The name of the node. This property is read-only.
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The local transformation matrix of the node.
         */
        localMatrix?:
          | sap.ui.vk.TransformationMatrix
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The world transformation matrix of the node.
         */
        worldMatrix?:
          | sap.ui.vk.TransformationMatrix
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The material of the node (optional).
         */
        material?:
          | sap.ui.vk.Material
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The node opacity.
         */
        opacity?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The tint color.
         *
         *
         * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material
         * color and tint color.
         */
        tintColorABGR?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The tint color.
         */
        tintColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The node metadata. This property is read-only.
         */
        nodeMetadata?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The indicator showing if the node has child nodes. This property is read-only.
         */
        hasChildren?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The indicator showing if the node is closed. This property is read-only.
         */
        closed?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $NotificationsSettings extends sap.ui.core.$ControlSettings {
        /**
         * This event will be fired when all messages in the log are deleted.
         */
        allMessagesCleared?: Function;

        /**
         * This event will be fired when a new log message is added.
         */
        messageAdded?: Function;
      }

      interface $OrthographicCameraSettings extends sap.ui.vk.$CameraSettings {
        /**
         * Camera zoom factor
         */
        zoomFactor?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $OutputSettingsSettings extends sap.ui.core.$ElementSettings {
        /**
         * width of the output, unit in mm
         */
        width?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * height of the output, unit in mm
         */
        height?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * density of the output, unit in dpi (dots-per-inch)
         */
        dpi?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $OverlaySettings extends sap.ui.core.$ControlSettings {
        zoomOnResize?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Aggregation of Highlight Areas.
         */
        areas?:
          | sap.ui.vk.OverlayArea[]
          | sap.ui.vk.OverlayArea
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Aggregation of Highlight Areas.
         */
        target?: sap.ui.core.Control | string;

        /**
         * Raised when the Control is clicked.
         */
        click?: Function;

        /**
         * Raised when the Control is right clicked/longPress(tap and hold).
         */
        contextMenu?: Function;
      }

      interface $OverlayAreaSettings extends sap.ui.core.$ElementSettings {
        /**
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs a unique and stable identifier.
         */
        key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
         */
        position?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The fill color of the OverlayArea.
         */
        color?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The border color of the OverlayArea.
         */
        colorBorder?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The select color of the OverlayArea in case selection highligthing is desired.
         */
        colorSelect?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
         */
        colorNonSelect?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(;;;)
         */
        deltaColorHot?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * set to true if the element is selected
         */
        select?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Set to true if OverlayArea is changeable.
         */
        changeable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The event is raised when there is a click action on an OverlayArea.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
         */
        contextMenu?: Function;

        /**
         * This event is raised when the edge of an OverlayArea is clicked.
         */
        edgeClick?: Function;

        /**
         * This event is raised when the edge of an OverlayArea is right clicked.
         */
        edgeContextMenu?: Function;

        /**
         * This event is raised when the design handle of a changable OverlayArea is moved.
         */
        handleMoved?: Function;

        /**
         * This event is raised when the design handle of a changable OverlayArea is right clicked.
         */
        handleContextMenu?: Function;

        /**
         * This event is raised when the design handle of a changable OverlayArea is clicked.
         */
        handleClick?: Function;
      }

      interface $PerspectiveCameraSettings extends sap.ui.vk.$CameraSettings {
        /**
         * Camera frustum field of view in degree
         */
        fov?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ProgressIndicatorSettings
        extends sap.m.$ProgressIndicatorSettings {}

      interface $RedlineCollaborationSettings
        extends sap.ui.core.$ElementSettings {
        /**
         * A list of available conversations.
         */
        conversations?:
          | sap.ui.vk.RedlineConversation[]
          | sap.ui.vk.RedlineConversation
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        viewport?: sap.ui.vk.Viewport | string;

        /**
         * Currently active conversation.
         */
        activeConversation?: sap.ui.vk.RedlineConversation | string;

        /**
         * Currently active comment.
         */
        activeComment?: /* was: sap.ui.vk.RedlineComment */ any | string;

        elementCreated?: Function;

        elementClicked?: Function;

        elementHovered?: Function;

        conversationActivating?: Function;

        conversationActivated?: Function;
      }

      interface $RedlineConversationSettings
        extends sap.ui.core.$ElementSettings {
        conversationName?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        timestamp?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        viewId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        viewInfo?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        animationOffset?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        comments?:
          | sap.ui.vk.RedlineElementComment[]
          | sap.ui.vk.RedlineElementComment
          | sap.ui.base.ManagedObject.AggregationBindingInfo;
      }

      interface $RedlineDesignSettings
        extends sap.ui.vk.$RedlineSurfaceSettings {
        elementCreated?: Function;
      }

      interface $RedlineElementSettings extends sap.ui.core.$ElementSettings {
        originX?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        originY?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        opacity?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        strokeWidth?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        strokeColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        strokeDashArray?:
          | float[]
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        halo?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        haloColor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        createdByUser?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        createTimestamp?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        deletedByUser?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        deleteTimestamp?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        suppress?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineElementCommentSettings
        extends sap.ui.core.$ElementSettings {
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        createdByUser?: any | sap.ui.base.ManagedObject.PropertyBindingInfo;

        createTimestamp?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineElementEllipseSettings
        extends sap.ui.vk.$RedlineElementSettings {
        radiusX?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        radiusY?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        fillColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineElementFreehandSettings
        extends sap.ui.vk.$RedlineElementSettings {
        path?: float[] | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineElementLineSettings
        extends sap.ui.vk.$RedlineElementSettings {
        deltaX?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        deltaY?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineElementRectangleSettings
        extends sap.ui.vk.$RedlineElementSettings {
        width?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        height?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        fillColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineElementTextSettings
        extends sap.ui.vk.$RedlineElementSettings {
        text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        font?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        fontSize?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        fillColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $RedlineSurfaceSettings extends sap.ui.core.$ControlSettings {
        virtualLeft?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        virtualTop?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        virtualSideLength?:
          | float
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        panningRatio?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        redlineElements?:
          | sap.ui.vk.RedlineElement[]
          | sap.ui.vk.RedlineElement
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        pan?: Function;

        zoom?: Function;
      }

      interface $SafeAreaSettings extends sap.ui.core.$ControlSettings {
        /**
         * Application defined setting control which can be used to control SafeArea and aspect ratio settings
         */
        settingsControl?: sap.ui.core.Control;
      }

      interface $SceneSettings extends sap.ui.base.$ManagedObjectSettings {
        /**
         * Enables or disables double-sided materials
         */
        doubleSided?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $SceneTreeSettings extends sap.ui.core.$ControlSettings {
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        showTitle?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        showSearchField?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        treeTable?: /* was: sap.ui.table.TreeTable */ any;

        /**
         * An association to the `ContentConnector` instance that manages content resources.
         */
        contentConnector?: sap.ui.vk.ContentConnector | string;

        /**
         * An association to the `ViewStateManager` instance.
         */
        viewStateManager?: sap.ui.vk.ViewStateManagerBase | string;

        /**
         * This event will be fired when a scene tree content is replaced.
         */
        contentChanged?: Function;
      }

      interface $StepNavigationSettings extends sap.ui.core.$ControlSettings {
        /**
         * Managed settings and properties for Step Navigation events.
         */
        settings?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Width of the Step Navigation control.
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Height of the Step Navigation control.
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates that the Step Navigation control should display thumbnails. If set to `true`, then thumbnails
         * are rendered. If set to `false`, then thumbnails are hidden.
         */
        showThumbnails?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates that the Step Navigation control should display a toolbar. If set to `true`, then the toolbar
         * is rendered. If set to `false`, then the toolbar is hidden.
         */
        showToolbar?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates that the Step Navigation control should display a popup containing information around the step
         * that is playing. If set to `true`, then the popup is rendered. If set to `false`, the popup is hidden.
         */
        showStepInfo?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Template control for Procedure items.
         */
        procedureItemTemplate?: sap.ui.core.Item;

        /**
         * sap.ui.core.Popup used to render step information in a popup.
         */
        stepInfoPopup?: sap.ui.core.Control;

        /**
         * sap.m.Toolbar used to render the entire Step Navigation control's content.
         */
        layout?: sap.m.Toolbar;

        /**
         * sap.m.ScrollContainer used to render a list of thumbnails for the available steps.
         */
        thumbnailsContainer?: sap.m.ScrollContainer;

        contentConnector?: sap.ui.vk.ContentConnector | string;

        resize?: Function;

        /**
         * Raised each time a step starts, changes, or finishes.
         */
        stepChanged?: Function;
      }

      interface $TextureSettings extends sap.ui.base.$ManagedObjectSettings {
        /**
         * texture ID (optional)
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * filter mode - Bilinear = 0, NearestNeighbor = 1
         */
        filterMode?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Rotation angle of uv coordinates
         */
        uvRotationAngle?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Horizontal offset of uv coordinates
         */
        uvHorizontalOffset?:
          | float
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * VerticalOffset offset of uv coordinates
         */
        uvVerticalOffset?:
          | float
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Horizontal scale of uv coordinates
         */
        uvHorizontalScale?:
          | float
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Vertical scale of uv coordinates
         */
        uvVerticalScale?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Is the uv horizontal tiling enabled
         */
        uvHorizontalTilingEnabled?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Is the uv vertical tiling enabled
         */
        uvVerticalTilingEnabled?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ToolbarSettings extends sap.ui.core.$ControlSettings {
        /**
         * Used to set the title of the Toolbar
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Toolbar content, this can be used to add/remove buttons and other SAP UI5 controls to the toolbar
         */
        content?:
          | sap.ui.core.Control[]
          | sap.ui.core.Control
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * A toolbar instance is associated with an instance of the Viewer
         */
        viewer?: sap.ui.vk.Viewer | string;
      }

      interface $ViewSettings extends sap.ui.base.$ManagedObjectSettings {
        /**
         * View persistent ID (optional)
         */
        viewId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * View name (optional)
         */
        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * View description (optional)
         */
        description?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Aspect ratio for Safe Area (optional). This can be 0 to 25. Values above or below this range will be
         * ignored.
         */
        aspectRatio?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ViewerSettings extends sap.ui.core.$ControlSettings {
        /**
         * Enables or disables the Overlay control
         */
        enableOverlay?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Disables the scene tree control Button on the menu
         */
        enableSceneTree?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Shows or hides the scene tree control
         */
        showSceneTree?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Disables the Step Navigation Control Button on the menu
         */
        enableStepNavigation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Disables the Message Popover Control
         */
        enableNotifications?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Shows or hides the Step Navigation Control
         */
        showStepNavigation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Shows or hides the Step Navigation thumbnails
         */
        showStepNavigationThumbnails?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If enabled the Step Navigation will be overlayed on top of the viewport. Only set this during initialization.
         * Will not work when set at runtime.
         */
        overlayStepNavigation?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Shows or hides Toolbar control
         */
        enableToolbar?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Enable / disable progress indicator for downloading and rendering VDS files
         */
        enableProgressIndicator?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Width of the Viewer control
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Height of the Viewer control
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The toolbar title
         */
        toolbarTitle?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Whether or not we want ViewStateManager to keep track of visibility changes.
         */
        shouldTrackVisibilityChanges?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Whether or not we want ViewStateManager to have recursive selection.
         */
        recursiveSelection?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Optional Emscripten runtime module settings. A JSON object with the following properties:
         * 	 - totalMemory {int} size of Emscripten module memory in bytes, default value: 512 MB.
         * 	 - logElementId {string} ID of a textarea DOM element to write the log to.
         * 	 - statusElementId {string} ID of a DOM element to write the status messages to.  Emscripten runtime
         * 			module settings cannot be changed after the control is fully initialized.
         */
        runtimeSettings?:
          | object
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Optional WebGL context attributes. A JSON object with the following boolean properties:
         * 	 - antialias {boolean} default value `true`. If set to `true`, the context will attempt to perform antialiased
         * 			rendering if possible.
         * 	 - alpha {boolean} default value `true`. If set to `true`, the context will have an alpha (transparency)
         * 			channel.
         * 	 - premultipliedAlpha {boolean} default value `false`. If set to `true`, the color channels in the framebuffer
         * 			will be stored premultiplied by the alpha channel to improve performance.  Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
         * 			WebGL context attributes} are also supported. WebGL context attributes cannot be changed after the control
         * 			is fully initialized.
         */
        webGLContextAttributes?:
          | object
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Enables or disables showing of all hotspots
         */
        showAllHotspots?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color used for highlighting Smart2D hotspots in the ABGR format.
         */
        hotspotColorABGR?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color used for highlighting Smart2D hotspots in the CSS Color format.
         */
        hotspotColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Content resources to load and display in the Viewer control.
         */
        contentResources?:
          | sap.ui.vk.ContentResource[]
          | sap.ui.vk.ContentResource
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        overlay?: sap.ui.vk.Overlay;

        /**
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        contentResourceChangesProcessed?: Function;

        /**
         * This event will be fired when a scene / image has been loaded into the Viewer.
         */
        sceneLoadingSucceeded?: Function;

        /**
         * This event will be fired when a critical error occurs during scene / image loading.
         */
        sceneLoadingFailed?: Function;

        /**
         * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
         */
        sceneDestroying?: Function;

        /**
         * This event is fired when the nodes are selected/unselected.
         */
        selectionChanged?: Function;

        /**
         * This event is fired when viewer enters/exits full screen mode.
         */
        fullScreen?: Function;

        /**
         * This event will be fired when a URL in a note is clicked.
         */
        urlClicked?: Function;

        /**
         * This event will be fired when a node is clicked.
         */
        nodeClicked?: Function;
      }

      interface $ViewGallerySettings extends sap.ui.core.$ControlSettings {
        /**
         * Indicates that the View Gallery control should display animation slider showing time of animation in
         * current view.
         */
        showAnimationTimeSlider?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates that the View Gallery control should display toolbar
         */
        showToolbar?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates that the View Gallery control should display thumbnails
         */
        showThumbnailContainer?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Index of selected view
         */
        selectedViewIndex?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Index of selected view group
         */
        selectedViewGroupIndex?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates that the View Gallery control should allow view reordering
         */
        enableViewReordering?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Sets the transparency level of the viewgallery. Range is 0-1, with 1 being 100% opaque and 0 being 0%
         * opaque
         */
        transparency?: float | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If disabled, viewgallery is non-interactive and greyed out
         */
        enabled?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        animationPlayer?: sap.ui.vk.AnimationPlayer | string;

        contentConnector?: sap.ui.vk.ContentConnector | string;

        host?: sap.ui.vk.ViewportBase | string;

        viewManager?: /* was: sap.ui.vk.ViewManager */ any | string;

        /**
         * Fires when selection is changed via user interaction inside the control.
         */
        selectionChange?: Function;

        /**
         * Fires when views are reordered
         */
        viewOrderChange?: Function;
      }

      interface $ViewGroupSettings extends sap.ui.base.$ManagedObjectSettings {
        viewGroupId?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        description?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ViewportSettings extends sap.ui.vk.$ViewportBaseSettings {}

      interface $ViewportBaseSettings extends sap.ui.core.$ControlSettings {
        /**
         * Shows or hides the debug info.
         */
        showDebugInfo?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Viewport background top color in the CSS Color format
         */
        backgroundColorTop?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Viewport background bottom color in the CSS Color format
         */
        backgroundColorBottom?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Viewport width
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Viewport height
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Selection mode
         */
        selectionMode?:
          | sap.ui.vk.SelectionMode
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Selection display mode
         */
        selectionDisplayMode?:
          | sap.ui.vk.SelectionDisplayMode
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show selection bounding boxes
         */
        showSelectionBoundingBoxes?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Freeze camera
         */
        freezeCamera?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Viewport render mode
         */
        renderMode?:
          | sap.ui.vk.RenderMode
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Shows or hides the Safe Area
         */
        showSafeArea?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Enables or disables showing of all hotspots
         */
        showAllHotspots?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Disables hotspot hovering
         */
        disableHotspotHovering?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color used for highlighting hotspots in the ABGR format
         */
        hotspotColorABGR?: int | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Color used for highlighting hotspots in the CSS Color format
         */
        hotspotColor?:
          | sap.ui.core.CSSColor
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        keepOutputSize?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The controls inside the viewport.
         */
        content?:
          | sap.ui.core.Control[]
          | sap.ui.core.Control
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * SafeArea control for viewport
         */
        safeArea?: sap.ui.vk.SafeArea;

        /**
         * HTML Annotations present in the active view
         */
        annotations?:
          | sap.ui.vk.Annotation[]
          | sap.ui.vk.Annotation
          | sap.ui.base.ManagedObject.AggregationBindingInfo;

        /**
         * Output size settings of the viewport
         */
        outputSettings?: sap.ui.vk.OutputSettings;

        /**
         * An association to the `ContentConnector` instance that manages content resources.
         */
        contentConnector?: sap.ui.vk.ContentConnector | string;

        /**
         * An association to the `ViewStateManager` instance.
         */
        viewStateManager?: sap.ui.vk.ViewStateManagerBase | string;

        /**
         * The tools of this viewport.
         */
        tools?: Array<sap.ui.vk.tools.Tool | string>;

        /**
         * This event is fired when a URL in a note is clicked.
         */
        urlClicked?: Function;

        /**
         * This event will be fired when a node is clicked.
         */
        nodeClicked?: Function;

        /**
         * This event is fired when viewport size is changed.
         */
        resize?: Function;

        /**
         * This event is fired when nodes in the scene are picked by user action. If application requires different
         * selection behaviour then it can handle this event and implement its own selection method. In this case
         * {@link sap.ui.vk.Viewport#selectionMode selectionMode} property should be set to `sap.ui.vk.SelectionMode.None`
         * Application can modify list of picked node references to alter selection behaviour.
         */
        nodesPicked?: Function;

        /**
         * This event is fired when a node in the scene is zoomed in/out by double-clicking.
         */
        nodeZoomed?: Function;

        /**
         * This event is fired when a view in the viewport is activated
         */
        viewActivated?: Function;

        /**
         * This event is fired when the current procedure is done playing
         */
        procedureFinished?: Function;

        /**
         * This event is fired when the current view is done playing
         */
        viewFinished?: Function;
      }

      interface $ViewStateManagerSettings
        extends sap.ui.vk.$ViewStateManagerBaseSettings {}

      interface $ViewStateManagerBaseSettings
        extends sap.ui.core.$ElementSettings {
        shouldTrackVisibilityChanges?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        recursiveSelection?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        recursiveOutlining?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        contentConnector?: sap.ui.vk.ContentConnector | string;

        viewManager?: /* was: sap.ui.vk.ViewManager */ any | string;

        /**
         * This event is fired when the visibility of the node changes.
         */
        visibilityChanged?: Function;

        /**
         * This event is fired when the nodes are selected/unselected.
         */
        selectionChanged?: Function;

        /**
         * This event is fired when the nodes are outlined/unoutlined.
         */
        outliningChanged?: Function;

        /**
         * This event is fired when opacity of the nodes is changed.
         */
        opacityChanged?: Function;

        /**
         * This event is fired when tint color of the nodes is changed.
         */
        tintColorChanged?: Function;

        /**
         * This event is fired when the node hierarchy is replaced.
         */
        nodeHierarchyReplaced?: Function;

        /**
         * This event is fired when highlighting color is changed.
         */
        highlightColorChanged?: Function;

        /**
         * This event is fired when node's transformation changed.
         */
        transformationChanged?: Function;

        /**
         * This event is fired when View is about to be activated.
         */
        viewStateApplying?: Function;

        /**
         * This event is fired when View activated.
         */
        viewStateApplied?: Function;

        /**
         * This event is fired when viewport is ready for playing animation (e.g, camera is ready).
         */
        readyForAnimation?: Function;

        /**
         * This event is fired when outlining color is changed.
         */
        outlineColorChanged?: Function;

        /**
         * This event is fired when outline width is changed.
         */
        outlineWidthChanged?: Function;
      }

      /**
       * @EXPERIMENTAL (since 1.67.0)
       *
       * Provides definition for an animation playback
       */
      class AnimationPlayer extends sap.ui.core.Element {
        /**
         * Constructor for a new AnimationPlayer.
         *
         * The objects of this class contain necessary information to define how an animation sequence is played
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Attaches event handler `fnFunction` to the {@link #event:beforeTimeChanged beforeTimeChanged} event of
         * this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachBeforeTimeChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:beforeTimeChanged beforeTimeChanged} event of
         * this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachBeforeTimeChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stateChanged stateChanged} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachStateChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stateChanged stateChanged} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachStateChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:timeChanged timeChanged} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachTimeChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:timeChanged timeChanged} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachTimeChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewActivated viewActivated} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachViewActivated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewActivated viewActivated} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationPlayer` itself.
         */
        attachViewActivated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationPlayer` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:beforeTimeChanged beforeTimeChanged} event
         * of this `sap.ui.vk.AnimationPlayer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachBeforeTimeChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:stateChanged stateChanged} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachStateChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:timeChanged timeChanged} event of this `sap.ui.vk.AnimationPlayer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTimeChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewActivated viewActivated} event of this
         * `sap.ui.vk.AnimationPlayer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewActivated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.AnimationPlayer with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.AnimationPlayer>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:beforeTimeChanged beforeTimeChanged} to attached listeners.
         */
        fireBeforeTimeChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:stateChanged stateChanged} to attached listeners.
         */
        fireStateChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:timeChanged timeChanged} to attached listeners.
         */
        fireTimeChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:viewActivated viewActivated} to attached listeners.
         */
        fireViewActivated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Get the animated property of a node at the current time, should be called after {@link sap.ui.vk.AnimationPlayer#setTime
         * setTime}.
         */
        getAnimatedProperty(
          /**
           * A node reference
           */
          nodeRef: any,
          /**
           * A property name
           */
          property: /* was: sap.ui.vk.AnimationTrackType */ any
        ): object;
        /**
         * Gets animation playback currently playing.
         */
        getCurrentPlayback(): /* was: sap.ui.vk.AnimationPlayback */ any;
        /**
         * Gets current animation time position in the current animation playback.
         */
        getCurrentPlaybackTime(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.AnimationPlayer.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets start time for specified animation playback.
         */
        getStartTime(
          /**
           * Animation playback or animation playback index in the current view.
           */
          playback: /* was: sap.ui.vk.AnimationPlayback */ any | int
        ): float;
        /**
         * Gets current absolute animation time position.
         */
        getTime(): float;
        /**
         * Gets current total animation duration.
         */
        getTotalDuration(): float;
        /**
         * ID of the element which is the current target of the association {@link #getViewStateManager viewStateManager},
         * or `null`.
         */
        getViewStateManager(): sap.ui.core.ID;
        /**
         * Starts playing animation from the current time position.
         */
        play(): sap.ui.vk.AnimationPlayer;
        /**
         * Moves animation to a specified time.
         */
        setTime(
          /**
           * Time to set
           */
          time: float,
          /**
           * Optional, when specified, `time` is relative to beginning of specified playback.
           */
          playbackIndex: int,
          /**
           * Optional, block the beforeTimeChanged and timeChanged events
           */
          blockTimeChangeEvents: boolean
        ): sap.ui.vk.AnimationPlayer;
        /**
         * Moves animation to a specified time.
         */
        setTime(
          /**
           * Time to set
           */
          time: float,
          /**
           * Optional, block the beforeTimeChanged and timeChanged events
           */
          blockTimeChangeEvents: boolean
        ): sap.ui.vk.AnimationPlayer;
        /**
         * Sets the associated {@link #getViewStateManager viewStateManager}.
         */
        setViewStateManager(
          /**
           * ID of an element which becomes the new target of this viewStateManager association; alternatively, an
           * element instance may be given
           */
          oViewStateManager: sap.ui.core.ID | sap.ui.vk.ViewStateManagerBase
        ): this;
        /**
         * Stops playing animation.
         */
        stop(): sap.ui.vk.AnimationPlayer;
      }
      /**
       * @EXPERIMENTAL (since 1.76.0)
       *
       * Annotation allows applications to display custom html annotation on top of Viewport and associate it
       * with 3D object
       */
      class Annotation extends sap.ui.core.Control {
        /**
         * Constructor for a new Annotation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * The main method for creation of annotations
         */
        static createAnnotation(
          /**
           * Object with annotation settings
           */
          divAnnotation: any,
          /**
           * Viewport where annotation are displayed
           */
          viewport: sap.ui.vk.Viewport
        ): sap.ui.vk.Annotation;
        /**
         * Destroys the textEditor in the aggregation {@link #getTextEditor textEditor}.
         */
        destroyTextEditor(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.Annotation with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Annotation>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Adjust annotation size to fit text
         */
        fitToText(
          /**
           * If set then maximum width of annotation will be limited to this number in pixels.
           */
          maxWidth?: number,
          /**
           * If set then maximum height of annotation will be limited to this number in pixels.
           */
          maxHeight?: number
        ): sap.ui.vk.Annotation;
        /**
         * Gets current value of property {@link #getAnimate animate}.
         *
         * Controls the animation of the annotation. If set to `false` then animation is not played.
         *
         * Default value is `true`.
         */
        getAnimate(): boolean;
        /**
         * Gets current value of property {@link #getAnimationDelay animationDelay}.
         *
         * Amount of time in seconds to wait before animation is played. Default value of -1 means that this is
         * not set.
         *
         * Default value is `-1`.
         */
        getAnimationDelay(): float;
        /**
         * Gets current value of property {@link #getAnnotationId annotationId}.
         *
         * Reference to the annotation Id
         */
        getAnnotationId(): string;
        /**
         * Gets current value of property {@link #getDisplay display}.
         *
         * Controls the visibility of the annotation
         *
         * Default value is `false`.
         */
        getDisplay(): boolean;
        /**
         * Gets current value of property {@link #getEditable editable}.
         *
         * If annotation is editable then double click event is fired when user double clicks on the annotation
         * and text editing is allowed by calling openEditor() method. If annotation is also selected then resize
         * and reposition handles will be displayed.
         *
         * Default value is `false`.
         */
        getEditable(): boolean;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Sets the height of the annotation. This uses a scale of 0 to 1, 0% to 100% respectively. This is relative
         * to the Viewport's safe area if present, otherwise it is relative to the Viewport. Negative values will
         * be ignored.
         */
        getHeight(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.Annotation.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * Reference to the annotation name
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getNodeRef nodeRef}.
         *
         * Reference to the node that represents the annotation
         */
        getNodeRef(): any;
        /**
         * Gets current value of property {@link #getSelected selected}.
         *
         * Controls the annotation is slected or unselected
         *
         * Default value is `false`.
         */
        getSelected(): boolean;
        /**
         * Gets current value of property {@link #getStyle style}.
         *
         * The style of the annotation
         *
         * Default value is `Default`.
         */
        getStyle(): sap.ui.vk.AnnotationStyle;
        /**
         * Return list of target nodes.
         */
        getTargetNodes(): any[];
        /**
         * Gets current value of property {@link #getText text}.
         *
         * The text that will be displayed in the annotation
         *
         * Default value is `empty string`.
         */
        getText(): string;
        /**
         * Gets content of aggregation {@link #getTextEditor textEditor}.
         */
        getTextEditor(): sap.ui.core.Control;
        /**
         * Get transformation matrix from the annotation node
         */
        getTransform(): number[];
        /**
         * ID of the element which is the current target of the association {@link #getViewport viewport}, or `null`.
         */
        getViewport(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Sets the width of the annotation. This uses a scale of 0 to 1, 0% to 100% respectively. This is relative
         * to the Viewport's safe area if present, otherwise it is relative to the Viewport. Negative values will
         * be ignored.
         */
        getWidth(): float;
        /**
         * Gets current value of property {@link #getXCoordinate xCoordinate}.
         *
         * Sets the X Coordinate of the annotation. This uses a scale of -0.5 to 0.5, left to right respectively.
         * This is relative to the Viewport's safe area if present, otherwise it is relative to the Viewport.
         *
         * Default value is `0`.
         */
        getXCoordinate(): float;
        /**
         * Gets current value of property {@link #getXOffset xOffset}.
         *
         * Sets horizontal offset of annotation's position relative to the point where it should be normally placed.
         * Can be used to offset annotation from attachment node (if set). This uses a scale of -0.5 to 0.5, left
         * to right respectively.
         *
         * Default value is `0`.
         */
        getXOffset(): float;
        /**
         * Gets current value of property {@link #getYCoordinate yCoordinate}.
         *
         * Sets the Y Coordinate of the annotation. This uses a scale of -0.5 to 0.5, top to bottom respectively.
         * This is relative to the Viewport's safe area if present, otherwise it is relative to the Viewport.
         *
         * Default value is `0`.
         */
        getYCoordinate(): float;
        /**
         * Gets current value of property {@link #getYOffset yOffset}.
         *
         * Sets horizontal offset of annotation's position relative to the point where it should be normally placed.
         * Can be used to offset annotation from attachment node (if set). This uses a scale of -0.5 to 0.5, top
         * to bottom respectively.
         *
         * Default value is `0`.
         */
        getYOffset(): float;
        /**
         * Sets a new value for property {@link #getAnimate animate}.
         *
         * Controls the animation of the annotation. If set to `false` then animation is not played.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setAnimate(
          /**
           * New value for property `animate`
           */
          bAnimate?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getAnimationDelay animationDelay}.
         *
         * Amount of time in seconds to wait before animation is played. Default value of -1 means that this is
         * not set.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `-1`.
         */
        setAnimationDelay(
          /**
           * New value for property `animationDelay`
           */
          fAnimationDelay?: float
        ): this;
        /**
         * Sets a new value for property {@link #getAnnotationId annotationId}.
         *
         * Reference to the annotation Id
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAnnotationId(
          /**
           * New value for property `annotationId`
           */
          sAnnotationId: string
        ): this;
        /**
         * Sets a new value for property {@link #getDisplay display}.
         *
         * Controls the visibility of the annotation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDisplay(
          /**
           * New value for property `display`
           */
          bDisplay?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEditable editable}.
         *
         * If annotation is editable then double click event is fired when user double clicks on the annotation
         * and text editing is allowed by calling openEditor() method. If annotation is also selected then resize
         * and reposition handles will be displayed.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEditable(
          /**
           * New value for property `editable`
           */
          bEditable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Sets the height of the annotation. This uses a scale of 0 to 1, 0% to 100% respectively. This is relative
         * to the Viewport's safe area if present, otherwise it is relative to the Viewport. Negative values will
         * be ignored.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          fHeight: float
        ): this;
        /**
         * Adjust annotation size and position so it is placed close to the object it's pointing to. This method
         * can be used if precise position is not known by the application.
         */
        setInitialOffset(): sap.ui.vk.Annotation;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * Reference to the annotation name
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): this;
        /**
         * Sets a new value for property {@link #getNodeRef nodeRef}.
         *
         * Reference to the node that represents the annotation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeRef(
          /**
           * New value for property `nodeRef`
           */
          oNodeRef: any
        ): this;
        /**
         * Sets a new value for property {@link #getSelected selected}.
         *
         * Controls the annotation is slected or unselected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelected(
          /**
           * New value for property `selected`
           */
          bSelected?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getStyle style}.
         *
         * The style of the annotation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Default`.
         */
        setStyle(
          /**
           * New value for property `style`
           */
          sStyle?: sap.ui.vk.AnnotationStyle
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * The text that will be displayed in the annotation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
        /**
         * Sets the aggregated {@link #getTextEditor textEditor}.
         */
        setTextEditor(
          /**
           * The textEditor to set
           */
          oTextEditor: sap.ui.core.Control
        ): this;
        /**
         * Set transformation matrix to the annotation node
         */
        setTransform(
          /**
           * The transformation matrix
           */
          transform: number[]
        ): sap.ui.vk.Annotation;
        /**
         * Sets the associated {@link #getViewport viewport}.
         */
        setViewport(
          /**
           * ID of an element which becomes the new target of this viewport association; alternatively, an element
           * instance may be given
           */
          oViewport: sap.ui.core.ID | sap.ui.vk.Viewport
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Sets the width of the annotation. This uses a scale of 0 to 1, 0% to 100% respectively. This is relative
         * to the Viewport's safe area if present, otherwise it is relative to the Viewport. Negative values will
         * be ignored.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth: float
        ): this;
        /**
         * Sets a new value for property {@link #getXCoordinate xCoordinate}.
         *
         * Sets the X Coordinate of the annotation. This uses a scale of -0.5 to 0.5, left to right respectively.
         * This is relative to the Viewport's safe area if present, otherwise it is relative to the Viewport.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setXCoordinate(
          /**
           * New value for property `xCoordinate`
           */
          fXCoordinate?: float
        ): this;
        /**
         * Sets a new value for property {@link #getXOffset xOffset}.
         *
         * Sets horizontal offset of annotation's position relative to the point where it should be normally placed.
         * Can be used to offset annotation from attachment node (if set). This uses a scale of -0.5 to 0.5, left
         * to right respectively.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setXOffset(
          /**
           * New value for property `xOffset`
           */
          fXOffset?: float
        ): this;
        /**
         * Sets a new value for property {@link #getYCoordinate yCoordinate}.
         *
         * Sets the Y Coordinate of the annotation. This uses a scale of -0.5 to 0.5, top to bottom respectively.
         * This is relative to the Viewport's safe area if present, otherwise it is relative to the Viewport.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setYCoordinate(
          /**
           * New value for property `yCoordinate`
           */
          fYCoordinate?: float
        ): this;
        /**
         * Sets a new value for property {@link #getYOffset yOffset}.
         *
         * Sets horizontal offset of annotation's position relative to the point where it should be normally placed.
         * Can be used to offset annotation from attachment node (if set). This uses a scale of -0.5 to 0.5, top
         * to bottom respectively.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setYOffset(
          /**
           * New value for property `yOffset`
           */
          fYOffset?: float
        ): this;
      }
      /**
       * Provides a simple, lightweight proxy object to a node in a node hierarchy.
       *
       * The objects of this class should not be created directly, and should only be created through the use
       * of the following methods:
       * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
       * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
       * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
       */
      class BaseNodeProxy
        extends sap.ui.base.Object
        implements sap.ui.base.Poolable, sap.ui.vk.BaseNodeProxy {
        __implements__sap_ui_base_Poolable: boolean;
        __implements__sap_ui_vk_BaseNodeProxy: boolean;
        /**
         * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
         * only be created through the use of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.BaseNodeProxy with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.BaseNodeProxy>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Indicates whether the node has child nodes.
         */
        getHasChildren(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.BaseNodeProxy.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the name of the node.
         */
        getName(): string;
        /**
         * Gets the ID of the node.
         */
        getNodeId(): string;
        /**
         * Gets the metadata of the node.
         */
        getNodeMetadata(): object;
        /**
         * Gets the reference object of the node.
         */
        getNodeRef(): any;
        /**
         * Gets the scene reference that this BaseNodeProxy object wraps.
         */
        getSceneRef(): any;
        /**
         * Initialize this BaseNodeProxy with its data.
         *
         * The `init` method is called by an object pool when the object is (re-)activated for a new caller.
         * See:
         * 	sap.ui.base.Poolable.prototype#init
         */
        init(
          /**
           * The NodeHierarchy object this BaseNodeProxy object belongs to.
           */
          nodeHierarchy: sap.ui.vk.NodeHierarchy,
          /**
           * The ID or reference (depending on the concrete BaseNodeProxy implementation) of the node for which to
           * get BaseNodeProxy.
           */
          nodeRef: any
        ): void;
        /**
         * Reset BaseNodeProxy data, needed for pooling.
         * See:
         * 	sap.ui.base.Poolable.prototype#reset
         */
        reset(): void;
      }
      /**
       * @SINCE 1.52.0
       *
       * Provides the base interface for the camera.
       *
       * The objects of this class should not be created directly. Use PerspectiveCamera or OrthographicCamera
       * instead.
       */
      class Camera extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Camera.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.Camera with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Camera>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         *
         */
        getCameraRef(): any;
        /**
         * Gets current value of property {@link #getFarClipPlane farClipPlane}.
         *
         * Far clipping plane distance
         *
         * Default value is `1.0`.
         */
        getFarClipPlane(): float;
        /**
         *
         */
        getIsModified(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.Camera.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getNearClipPlane nearClipPlane}.
         *
         * Near clipping plane distance
         *
         * Default value is `0.1`.
         */
        getNearClipPlane(): float;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * Camera position in global space (x, y, z coordinates)
         *
         * Default value is `[0, 0, 0]`.
         */
        getPosition(): float[];
        /**
         * Gets current value of property {@link #getTargetDirection targetDirection}.
         *
         * Camera direction vector in global space (normalized x, y, z vector values)
         *
         * Default value is `[1, 0, 0]`.
         */
        getTargetDirection(): float[];
        /**
         * Gets current value of property {@link #getUpDirection upDirection}.
         *
         * Camera up vector in global space (normalized x, y, z vector values)
         *
         * Default value is `[0, 1, 0]`.
         */
        getUpDirection(): float[];
        /**
         * Sets a new value for property {@link #getFarClipPlane farClipPlane}.
         *
         * Far clipping plane distance
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1.0`.
         */
        setFarClipPlane(
          /**
           * New value for property `farClipPlane`
           */
          fFarClipPlane?: float
        ): this;
        /**
         *
         */
        setIsModified(
          /**
           * Set or reset flag to indicate if this object is modified
           */
          val: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getNearClipPlane nearClipPlane}.
         *
         * Near clipping plane distance
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.1`.
         */
        setNearClipPlane(
          /**
           * New value for property `nearClipPlane`
           */
          fNearClipPlane?: float
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * Camera position in global space (x, y, z coordinates)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[0, 0, 0]`.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: float[]
        ): this;
        /**
         * Sets a new value for property {@link #getTargetDirection targetDirection}.
         *
         * Camera direction vector in global space (normalized x, y, z vector values)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[1, 0, 0]`.
         */
        setTargetDirection(
          /**
           * New value for property `targetDirection`
           */
          sTargetDirection?: float[]
        ): this;
        /**
         * Sets a new value for property {@link #getUpDirection upDirection}.
         *
         * Camera up vector in global space (normalized x, y, z vector values)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[0, 1, 0]`.
         */
        setUpDirection(
          /**
           * New value for property `upDirection`
           */
          sUpDirection?: float[]
        ): this;
      }
      /**
       * @SINCE 1.38.0
       *
       * Abstract Constructor for a new Container.
       */
      class ContainerBase extends sap.ui.core.Control {
        /**
         * Abstract Constructor for a new Container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ContainerBaseSettings
        );
        /**
         * Abstract Constructor for a new Container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ContainerBaseSettings
        );

        /**
         * adjusts customizable buttons of overflow toolbar, displays content buttons
         */
        _addToolbarContent(): void;
        /**
         * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
         */
        addAriaDescribedBy(
          /**
           * The ariaDescribedBy to add; if empty, nothing is inserted
           */
          vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control
        ): this;
        /**
         * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
         */
        addAriaLabelledBy(
          /**
           * The ariaLabelledBy to add; if empty, nothing is inserted
           */
          vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
        ): this;
        /**
         * add container content - map, table..
         */
        addContent(
          /**
           * content object to add
           */
          oObject: sap.ui.vk.ContainerContent
        ): void;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachContentChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachContentChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:settingsPressed settingsPressed} event of this
         * `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachSettingsPressed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:settingsPressed settingsPressed} event of this
         * `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachSettingsPressed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChange contentChange} event of this
         * `sap.ui.vk.ContainerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:settingsPressed settingsPressed} event of
         * this `sap.ui.vk.ContainerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSettingsPressed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ContainerBase with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ContainerBase>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChange contentChange} to attached listeners.
         */
        fireContentChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            selectedItemId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:settingsPressed settingsPressed} to attached listeners.
         */
        fireSettingsPressed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
         * ariaDescribedBy}.
         */
        getAriaDescribedBy(): sap.ui.core.ID[];
        /**
         * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
         * ariaLabelledBy}.
         */
        getAriaLabelledBy(): sap.ui.core.ID[];
        /**
         * Gets current value of property {@link #getAutoAdjustHeight autoAdjustHeight}.
         *
         * Default value is `false`.
         */
        getAutoAdjustHeight(): boolean;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Content Aggregation.
         */
        getContent(): sap.ui.vk.ContainerContent[];
        /**
         * Gets current value of property {@link #getFullScreen fullScreen}.
         *
         * Controls whether the control is show fullscreen or embedded
         *
         * Default value is `false`.
         */
        getFullScreen(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.ContainerBase.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * get selected content
         */
        getSelectedContent(): sap.ui.vk.ContainerContent;
        /**
         * Gets current value of property {@link #getShowFullScreen showFullScreen}.
         *
         * Show fullscreen toggle button in toolbar
         *
         * Default value is `true`.
         */
        getShowFullScreen(): boolean;
        /**
         * Gets current value of property {@link #getShowSelection showSelection}.
         *
         * Show selection button in toolbar
         *
         * Default value is `true`.
         */
        getShowSelection(): boolean;
        /**
         * Gets current value of property {@link #getShowSettings showSettings}.
         *
         * Show settings button in toolbar
         *
         * Default value is `true`.
         */
        getShowSettings(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title to show in toolbar
         *
         * Default value is `empty string`.
         */
        getTitle(): string;
        /**
         * Checks for the provided `sap.ui.vk.ContainerContent` in the aggregation {@link #getContent content}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.vk.ContainerContent
        ): int;
        /**
         * insert container content - map, table..
         */
        insertContent(
          /**
           * content object to insert
           */
          oObject: sap.ui.vk.ContainerContent,
          /**
           * index in the content aggregation where to insert the new content object
           */
          iIndex: int
        ): void;
        /**
         * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
         */
        removeAllAriaDescribedBy(): sap.ui.core.ID[];
        /**
         * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
         */
        removeAllAriaLabelledBy(): sap.ui.core.ID[];
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.vk.ContainerContent[];
        /**
         * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
         */
        removeAriaDescribedBy(
          /**
           * The ariaDescribedBy to be removed or its index or ID
           */
          vAriaDescribedBy: int | sap.ui.core.ID | sap.ui.core.Control
        ): sap.ui.core.ID;
        /**
         * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
         */
        removeAriaLabelledBy(
          /**
           * The ariaLabelledBy to be removed or its index or ID
           */
          vAriaLabelledBy: int | sap.ui.core.ID | sap.ui.core.Control
        ): sap.ui.core.ID;
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: int | string | sap.ui.vk.ContainerContent
        ): sap.ui.vk.ContainerContent;
        /**
         * Sets a new value for property {@link #getAutoAdjustHeight autoAdjustHeight}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setAutoAdjustHeight(
          /**
           * New value for property `autoAdjustHeight`
           */
          bAutoAdjustHeight?: boolean
        ): this;
        /**
         * set FullScreen - default is normal mode, but app can call this method to set the default to full screen
         */
        setFullScreen(
          /**
           * Fullscreen mode on or off
           */
          bFullScreen: boolean
        ): void;
        /**
         * set selected content
         */
        setSelectedContent(
          /**
           * the selected content; involves no re-rendering
           */
          oContent: sap.ui.vk.ContainerContent
        ): void;
        /**
         * Sets a new value for property {@link #getShowFullScreen showFullScreen}.
         *
         * Show fullscreen toggle button in toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowFullScreen(
          /**
           * New value for property `showFullScreen`
           */
          bShowFullScreen?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowSelection showSelection}.
         *
         * Show selection button in toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSelection(
          /**
           * New value for property `showSelection`
           */
          bShowSelection?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowSettings showSettings}.
         *
         * Show settings button in toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSettings(
          /**
           * New value for property `showSettings`
           */
          bShowSettings?: boolean
        ): this;
        /**
         * Display title
         */
        setTitle(
          /**
           * the title
           */
          sValue: string
        ): void;
        /**
         * default Content could be defined in application
         */
        switchContent(
          /**
           * the content to be visible; involves re-rendering
           */
          oContent: sap.ui.vk.ContainerContent
        ): void;
        /**
         * update container to allow dynamic change button layout
         */
        updateContainer(): void;
      }
      /**
       * @SINCE 1.38.0
       *
       * Aggregation element for the Container Base
       */
      class ContainerContent extends sap.ui.core.Control {
        /**
         * Constructor for a new ContainerContent.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ContainerContentSettings
        );
        /**
         * Constructor for a new ContainerContent.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ContainerContentSettings
        );

        /**
         * Destroys the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ContainerContent with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ContainerContent>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getContent content}.
         */
        getContent(): sap.ui.core.Control;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * Icon to show up in the toolbar
         */
        getIcon(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.ContainerContent.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title for the icon in the toolbar
         */
        getTitle(): string;
        /**
         * Sets the aggregated {@link #getContent content}.
         */
        setContent(
          /**
           * The content to set
           */
          oContent: sap.ui.core.Control
        ): this;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * Icon to show up in the toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon?: string
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title for the icon in the toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle?: string
        ): this;
      }
      /**
       * Provides an object that owns content resources, tracks their changes and loads and destroys the content
       * built from the content resources.
       */
      class ContentConnector extends sap.ui.core.Element {
        /**
         * Constructor for a new ContentConnector.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new ContentConnector object.
           */
          mSettings?: sap.ui.vk.$ContentConnectorSettings
        );
        /**
         * Constructor for a new ContentConnector.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new ContentConnector object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ContentConnector object.
           */
          mSettings?: sap.ui.vk.$ContentConnectorSettings
        );

        /**
         * @SINCE 1.50.0
         *
         * Adds a new content manager resolver.
         *
         * The last added resolver will be executed the first.
         *
         * Content manager resolver analyzes the content resource definition and returns the type of the content
         * manager to use for loading the content resource.
         *
         * The simplest resolver tests the content resource source type. The test can be either a string comparison
         * or a regular expression.
         *
         * A more sofisticated resolver is a function that can use the full content resource definition to find
         * a proper content manager dynamically, e.g. the resolver can use the 'HEAD' HTTP request to get the 'Content-Type'
         * header to find out the type of the content resource.
         */
        static addContentManagerResolver(
          /**
           * Object that defines how to find out the content manager class name.
           *  If `resolver` is a function then this function takes one parameter of type {@link sap.ui.vk.ContentResource
           * sap.ui.vk.ContentResource} and returns a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
           * Promise} that resolves with an object with the following properties:
           * 	 - `dimension: int` - dimension of the model. E.g. 2 or 3.
           * 	 - `contentManagerClassName: string` - name of content manager class to use for loading the content
           * 			resource.
           * 	 - `settings: object` - optional settings specific to the content manager.
           *  See {@link sap.ui.vk.threejs.ContentManager sap.ui.vk.threejs.ContentManager}.  If `resolver` is
           * an object then it has the following properties:
           */
          resolver:
            | Function
            | {
                /**
                 * The pattern the {@link sap.ui.vk.ContentResource#getSourceType sourceType} property of the content resource
                 * is compared with.
                 */
                pattern?: string | RegExp;
                /**
                 * Dimension of models of this source type. E.g. 2 or 3.
                 */
                dimension?: int;
                /**
                 * Name of the content manager class to use for loading content resources of this type. E.g. sap.ui.vk.dvl.ContentManager,
                 * sap.ui.vk.threejs.ContentManager, sap.ui.vk.ImageContentManager.
                 */
                contentManagerClassName?: string;
                /**
                 * Optional settings specific to the content manager class.
                 */
                settings?: object;
              }
        ): Function;
        /**
         * Adds some contentResource to the aggregation {@link #getContentResources contentResources}.
         */
        addContentResource(
          /**
           * The contentResource to add; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource
        ): this;
        /**
         * Adds some viewStateManager to the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        addViewStateManager(
          /**
           * The viewStateManager to add; if empty, nothing is inserted
           */
          oViewStateManager: sap.ui.vk.ViewStateManager
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentChangesFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentChangesFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when content resource changes are about to be processed.
         */
        attachContentChangesStarted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when content resource changes are about to be processed.
         */
        attachContentChangesStarted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentDestroying contentDestroying} event of
         * this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is about to be destroyed.
         */
        attachContentDestroying(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentDestroying contentDestroying} event of
         * this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is about to be destroyed.
         */
        attachContentDestroying(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentLoadingFinished contentLoadingFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when content loading is finished.
         */
        attachContentLoadingFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentLoadingFinished contentLoadingFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when content loading is finished.
         */
        attachContentLoadingFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentReplaced contentReplaced} event of this
         * `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is completely rebuilt or destroyed as a result of changes
         * in content resources.
         */
        attachContentReplaced(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentReplaced contentReplaced} event of this
         * `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is completely rebuilt or destroyed as a result of changes
         * in content resources.
         */
        attachContentReplaced(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): this;
        /**
         * Binds aggregation {@link #getContentResources contentResources} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindContentResources(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.AggregationBindingInfo
        ): this;
        /**
         * Destroys all the contentResources in the aggregation {@link #getContentResources contentResources}.
         */
        destroyContentResources(): this;
        /**
         * Destroys all the viewStateManagers in the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        destroyViewStateManagers(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesProgress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesStarted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentDestroying contentDestroying} event
         * of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentDestroying(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentLoadingFinished contentLoadingFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentLoadingFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentReplaced contentReplaced} event of
         * this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentReplaced(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ContentConnector with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ContentConnector>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChangesFinished contentChangesFinished} to attached listeners.
         */
        fireContentChangesFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The content created or updated.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            content?: any;
            /**
             * The failure reason if any.
             *  An single element or an array of elements with the following structure:
             * 	error - An object with details of the error. contentResource - A {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object when it is possible to match the Error object to a {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object.
             */
            failureReason?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:contentChangesProgress contentChangesProgress} to attached listeners.
         */
        fireContentChangesProgress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The name of the loading phase. It can be e.g. 'downloading', 'building the scene' etc. It might be null
             * if reporting this parameter does not make sense.
             */
            phase?: string;
            /**
             * The overall percentage of the loading process.
             */
            percentage?: float;
            /**
             * The content resource currently being loaded. It might be null if reporting this parameter does not make
             * sense.
             */
            source?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:contentChangesStarted contentChangesStarted} to attached listeners.
         */
        fireContentChangesStarted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:contentDestroying contentDestroying} to attached listeners.
         */
        fireContentDestroying(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The content to be destroyed.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            content?: any;
            /**
             * Returns a `function(prevent: boolean)` with one boolean parameter. To prevent garbage collection after
             * the content is destroyed call this function passing `true` as a parameter.
             */
            preventGarbageCollection?: Function;
          }
        ): this;
        /**
         * Fires event {@link #event:contentLoadingFinished contentLoadingFinished} to attached listeners.
         */
        fireContentLoadingFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            source?: any;

            node?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:contentReplaced contentReplaced} to attached listeners.
         */
        fireContentReplaced(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * New content.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            newContent?: any;
            /**
             * Old content.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            oldContent?: any;
          }
        ): this;
        /**
         * @SINCE 1.50.0
         *
         * Gets the content currently loaded.
         */
        getContent(): any;
        /**
         * @SINCE 1.50.0
         *
         * Gets the content manager used to load the current content.
         */
        getContentManager(): sap.ui.vk.ContentManager;
        /**
         * Gets content of aggregation {@link #getContentResources contentResources}.
         *
         * Content resources to load and display.
         */
        getContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Returns a metadata object for class sap.ui.vk.ContentConnector.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets content of aggregation {@link #getViewStateManagers viewStateManagers}.
         *
         * View state managers.
         */
        getViewStateManagers(): sap.ui.vk.ViewStateManager[];
        /**
         * Checks for the provided `sap.ui.vk.ContentResource` in the aggregation {@link #getContentResources contentResources}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContentResource(
          /**
           * The contentResource whose index is looked for
           */
          oContentResource: sap.ui.vk.ContentResource
        ): int;
        /**
         * Checks for the provided `sap.ui.vk.ViewStateManager` in the aggregation {@link #getViewStateManagers
         * viewStateManagers}. and returns its index if found or -1 otherwise.
         */
        indexOfViewStateManager(
          /**
           * The viewStateManager whose index is looked for
           */
          oViewStateManager: sap.ui.vk.ViewStateManager
        ): int;
        /**
         * Inserts a contentResource into the aggregation {@link #getContentResources contentResources}.
         */
        insertContentResource(
          /**
           * The contentResource to insert; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource,
          /**
           * The `0`-based index the contentResource should be inserted at; for a negative value of `iIndex`, the
           * contentResource is inserted at position 0; for a value greater than the current size of the aggregation,
           * the contentResource is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a viewStateManager into the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        insertViewStateManager(
          /**
           * The viewStateManager to insert; if empty, nothing is inserted
           */
          oViewStateManager: sap.ui.vk.ViewStateManager,
          /**
           * The `0`-based index the viewStateManager should be inserted at; for a negative value of `iIndex`, the
           * viewStateManager is inserted at position 0; for a value greater than the current size of the aggregation,
           * the viewStateManager is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * @SINCE 1.50.0
         *
         * Removes all content manager resolvers.
         */
        static removeAllContentManagerResolvers(): Function;
        /**
         * Removes all the controls from the aggregation {@link #getContentResources contentResources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Removes all the controls from the aggregation {@link #getViewStateManagers viewStateManagers}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllViewStateManagers(): sap.ui.vk.ViewStateManager[];
        /**
         * @SINCE 1.50.0
         *
         * Removes a content manager resolver.
         *
         * If there are more than one content manager resolver matching the `resolver` the last added is removed.
         */
        static removeContentManagerResolver(
          /**
           * Object that defines how to find out the content manager class name.
           */
          resolver: Function | string | RegExp | object
        ): boolean;
        /**
         * Removes a contentResource from the aggregation {@link #getContentResources contentResources}.
         */
        removeContentResource(
          /**
           * The contentResource to remove or its index or id
           */
          vContentResource: int | string | sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * Removes a viewStateManager from the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        removeViewStateManager(
          /**
           * The viewStateManager to remove or its index or id
           */
          vViewStateManager: int | string | sap.ui.vk.ViewStateManager
        ): sap.ui.vk.ViewStateManager;
        /**
         * @SINCE 1.60.0
         *
         * Sets a callback function which will be used to obtain authorizatio token when connected to remote server.
         */
        setAuthorizationHandler(
          /**
           * An application defined callback function that can provide authorization token.
           */
          handler: sap.ui.vk.AuthorizationHandler
        ): sap.ui.vk.ContentConnector;
        /**
         * @SINCE 1.60.0
         *
         * Sets an object that decrypts content of encrypted models.
         */
        setDecryptionHandler(
          /**
           * An object that decrypts content of encrypted models.
           */
          handler: sap.ui.vk.DecryptionHandler
        ): sap.ui.vk.ContentConnector;
        /**
         * Unbinds aggregation {@link #getContentResources contentResources} from model data.
         */
        unbindContentResources(): this;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a base loader interface.
       *
       * To load content a concrete loader class is to be used.
       */
      class ContentManager extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new ContentManager.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new ContentManager object.
           */
          mSettings?: sap.ui.vk.$ContentManagerSettings
        );
        /**
         * Constructor for a new ContentManager.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new ContentManager object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ContentManager object.
           */
          mSettings?: sap.ui.vk.$ContentManagerSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources have been loaded successfully or with a failure.
         */
        attachContentChangesFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources have been loaded successfully or with a failure.
         */
        attachContentChangesFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources are about to be loaded.
         */
        attachContentChangesStarted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources are about to be loaded.
         */
        attachContentChangesStarted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentLoadingFinished contentLoadingFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content loading is finished.
         */
        attachContentLoadingFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentLoadingFinished contentLoadingFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content loading is finished.
         */
        attachContentLoadingFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.50.0
         *
         * Collects and destroys unused objects and resources.
         */
        collectGarbage(): sap.ui.vk.ContentManager;
        /**
         * @SINCE 1.52.0
         *
         * Creates a Perspective camera
         */
        createOrthographicCamera(): sap.ui.vk.OrthographicCamera;
        /**
         * @SINCE 1.52.0
         *
         * Creates a Orthographic camera
         */
        createPerspectiveCamera(): sap.ui.vk.PerspectiveCamera;
        /**
         * @SINCE 1.52.0
         *
         * Destroys a camera for the content type
         */
        destroyCamera(
          /**
           * The camera to destroy.
           */
          camera: any
        ): sap.ui.vk.ContentManager;
        /**
         * @SINCE 1.50.0
         *
         * Destroys the content.
         */
        destroyContent(
          /**
           * The content to destroy.
           */
          content: any
        ): sap.ui.vk.ContentManager;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesProgress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesStarted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentLoadingFinished contentLoadingFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentLoadingFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ContentManager with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ContentManager>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChangesFinished contentChangesFinished} to attached listeners.
         */
        fireContentChangesFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The content created or updated.
             */
            content?: any;
            /**
             * The failure reason if any.
             *  An single element or an array of elements with the following structure:
             * 	error - An object with details of the error. contentResource - A {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object when it is possible to match `error` to a {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object.
             */
            failureReason?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:contentChangesProgress contentChangesProgress} to attached listeners.
         */
        fireContentChangesProgress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The name of the loading phase. It can be e.g. 'downloading', 'building the scene' etc. It might be null
             * if reporting this parameter does not make sense.
             */
            phase?: string;
            /**
             * The overall percentage of the loading process.
             */
            percentage?: float;
            /**
             * The content resource currently being loaded. It might be null if reporting this parameter does not make
             * sense.
             */
            source?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:contentChangesStarted contentChangesStarted} to attached listeners.
         */
        fireContentChangesStarted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:contentLoadingFinished contentLoadingFinished} to attached listeners.
         */
        fireContentLoadingFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            source?: any;

            node?: any;
          }
        ): this;
        /**
         * Returns a metadata object for class sap.ui.vk.ContentManager.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * @SINCE 1.50.0
         *
         * Starts downloading and building or updating the content from the content resources.
         *
         * This method is asynchronous.
         */
        loadContent(
          /**
           * The current content to update. It can be `null` if this is an initial loading call.
           */
          content: any,
          /**
           * The content resources to load or update.
           */
          contentResources: sap.ui.vk.ContentResource[]
        ): sap.ui.vk.ContentManager;
      }
      /**
       * Specifies a resource to load.
       */
      class ContentResource extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new ContentResource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * An optional map/JSON object with initial property values, aggregated objects etc. for the new content
           * resource.
           */
          mSettings?: sap.ui.vk.$ContentResourceSettings,
          /**
           * scope An object for resolving string-based type and formatter references in bindings.
           */
          oScope?: object
        );
        /**
         * Constructor for a new ContentResource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new content resource. `sId`is generated automatically if no non-empty ID is given. Note: this
           * can be omitted, regardless of whether `mSettings` will be provided or not.
           */
          sId?: string,
          /**
           * An optional map/JSON object with initial property values, aggregated objects etc. for the new content
           * resource.
           */
          mSettings?: sap.ui.vk.$ContentResourceSettings,
          /**
           * scope An object for resolving string-based type and formatter references in bindings.
           */
          oScope?: object
        );

        /**
         * Adds some contentResource to the aggregation {@link #getContentResources contentResources}.
         */
        addContentResource(
          /**
           * The contentResource to add; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource
        ): this;
        /**
         * @deprecated (since 1.50.0)
         *
         * Collects content resource categories. The result is tested if the content resource hierarchy has the
         * same category - 2D or 3D.
         */
        static collectCategories(
          /**
           * The array of content resources.
           */
          resources: sap.ui.vk.ContentResource[]
        ): /* was: sap.ui.vk.ContentResourceSourceCategory */ any[];
        /**
         * Destroys all the contentResources in the aggregation {@link #getContentResources contentResources}.
         */
        destroyContentResources(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ContentResource with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ContentResource>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActivateView activateView}.
         *
         * Optional parameter with view id which shall be activated when scene is loaded.
         */
        getActivateView(): string;
        /**
         * Gets content of aggregation {@link #getContentResources contentResources}.
         *
         * Child content resources.
         */
        getContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Gets current value of property {@link #getEnableLogger enableLogger}.
         *
         * Optional boolean parameter to enable detailed logging. Can be used to track performance issues during
         * data streaming from SAP 3D Visualisation Service.
         */
        getEnableLogger(): boolean;
        /**
         * Gets current value of property {@link #getIncludeAnimation includeAnimation}.
         *
         * Send structural data for animation objects, if false they will be omitted, reducing data size. Default:
         * true.
         */
        getIncludeAnimation(): boolean;
        /**
         * Gets current value of property {@link #getIncludeBackground includeBackground}.
         *
         * If set to true, will return nodes with the type background
         */
        getIncludeBackground(): boolean;
        /**
         * Gets current value of property {@link #getIncludeHidden includeHidden}.
         *
         * Send structural data for hidden objects, if false they will be omitted, reducing data size. Default:
         * true.
         */
        getIncludeHidden(): boolean;
        /**
         * Gets current value of property {@link #getIncludeParametric includeParametric}.
         *
         * If set to true, will load parametric nodes
         */
        getIncludeParametric(): boolean;
        /**
         * Gets current value of property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node created for this content resource.
         */
        getLocalMatrix(): sap.ui.vk.TransformationMatrix;
        /**
         * Returns a metadata object for class sap.ui.vk.ContentResource.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getMetadataFilter metadataFilter}.
         *
         * Optional metadata filter that can trim the tree before sending to the client only keeping nodes that
         * passed the filter and their parents. Default: null. Format: Comma-separated list of meta.category1.tag1.value1,
         * meta.category2.tag2.value2. "meta." is the prefix and all metadata filters must start with it. Multiple
         * filters are supported, they are combined using `OR` operator. Includes parent nodes of matching nodes
         * (e.g. breadcrumb) even if they don't pass the filter.
         */
        getMetadataFilter(): string;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * The name of the node created for this content resource.
         */
        getName(): string;
        /**
         * Gets the {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
         *
         * If this is the only top level content resource, the {@link sap.ui.vk.NodeProxy NodeProxy} object is not
         * set since the grouping node is not created, which means that there may be multiple top level nodes.
         */
        getNodeProxy(): sap.ui.vk.NodeProxy;
        /**
         * Gets current value of property {@link #getPassword password}.
         *
         * The password to use when opening the resource.
         */
        getPassword(): string;
        /**
         * Gets current value of property {@link #getPushPMI pushPMI}.
         *
         * If set to true, elements for PMI rendering content will be returned. Default: false.
         */
        getPushPMI(): boolean;
        /**
         * Gets current value of property {@link #getPushViewGroups pushViewGroups}.
         *
         * If set to true, information of view groups will be returned. Default: true.
         */
        getPushViewGroups(): boolean;
        /**
         * Gets current value of property {@link #getSource source}.
         *
         * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the
         * content resource/file to load from. The source may be omitted if a grouping node is needed.
         */
        getSource(): any;
        /**
         * Gets current value of property {@link #getSourceId sourceId}.
         *
         * The unique ID of the content resource.
         */
        getSourceId(): string;
        /**
         * Gets content resource source properties.
         *
         * The content resource source properties depend on the content resource source type. They are different
         * for VDS and PNG for example. The list of possible source properties:
         * 	 - version - object
         * 	major - number
         * 	 - minor - number
         * 	 - compressed - boolean
         * 	 - encrypted - boolean  The source properties are optional and the list might be extended in future
         * 			versions.
         */
        getSourceProperties(): object;
        /**
         * Gets current value of property {@link #getSourceType sourceType}.
         *
         * The source type of the content resource. Valid types:
         * 	 - vds
         * 	 - vds4
         * 	 - svg
         * 	 - png
         * 	 - jpg
         * 	 - jpeg
         * 	 - gif
         * 	 - bmp
         * 	 - tif*
         * 	 - tiff*
         * 	 - stream  The source type may be omitted if this is a grouping content node.
         * NOTE: The tif and tiff image formats are not supported on all browsers. Source type "vds" initializes
         * deprecated DVL namespace and uses legacy library to load and display VDS file content. If source type
         * of "vds4" is used then new namespace based on Threejs rendering model will be used to load and display
         * VDS file content. Since DVL namespace is deprecated in one of future releases it will be removed and
         * source type "vds" will also use Threejs model.
         */
        getSourceType(): string;
        /**
         * Gets current value of property {@link #getUseSecureConnection useSecureConnection}.
         *
         * If set to false, unsecure connections will be used. Default: true.
         *
         * Default value is `true`.
         */
        getUseSecureConnection(): boolean;
        /**
         * Gets current value of property {@link #getVeid veid}.
         *
         * Id of scene to retrieve tree for. Mandatory for the stream source type.
         */
        getVeid(): string;
        /**
         * Checks for the provided `sap.ui.vk.ContentResource` in the aggregation {@link #getContentResources contentResources}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContentResource(
          /**
           * The contentResource whose index is looked for
           */
          oContentResource: sap.ui.vk.ContentResource
        ): int;
        /**
         * Inserts a contentResource into the aggregation {@link #getContentResources contentResources}.
         */
        insertContentResource(
          /**
           * The contentResource to insert; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource,
          /**
           * The `0`-based index the contentResource should be inserted at; for a negative value of `iIndex`, the
           * contentResource is inserted at position 0; for a value greater than the current size of the aggregation,
           * the contentResource is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getContentResources contentResources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Removes a contentResource from the aggregation {@link #getContentResources contentResources}.
         */
        removeContentResource(
          /**
           * The contentResource to remove or its index or id
           */
          vContentResource: int | string | sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getActivateView activateView}.
         *
         * Optional parameter with view id which shall be activated when scene is loaded.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setActivateView(
          /**
           * New value for property `activateView`
           */
          sActivateView: string
        ): this;
        /**
         * Sets a new value for property {@link #getEnableLogger enableLogger}.
         *
         * Optional boolean parameter to enable detailed logging. Can be used to track performance issues during
         * data streaming from SAP 3D Visualisation Service.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEnableLogger(
          /**
           * New value for property `enableLogger`
           */
          bEnableLogger: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getIncludeAnimation includeAnimation}.
         *
         * Send structural data for animation objects, if false they will be omitted, reducing data size. Default:
         * true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIncludeAnimation(
          /**
           * New value for property `includeAnimation`
           */
          bIncludeAnimation: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getIncludeBackground includeBackground}.
         *
         * If set to true, will return nodes with the type background
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIncludeBackground(
          /**
           * New value for property `includeBackground`
           */
          bIncludeBackground: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getIncludeHidden includeHidden}.
         *
         * Send structural data for hidden objects, if false they will be omitted, reducing data size. Default:
         * true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIncludeHidden(
          /**
           * New value for property `includeHidden`
           */
          bIncludeHidden: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getIncludeParametric includeParametric}.
         *
         * If set to true, will load parametric nodes
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIncludeParametric(
          /**
           * New value for property `includeParametric`
           */
          bIncludeParametric: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node created for this content resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLocalMatrix(
          /**
           * New value for property `localMatrix`
           */
          sLocalMatrix: sap.ui.vk.TransformationMatrix
        ): this;
        /**
         * Sets a new value for property {@link #getMetadataFilter metadataFilter}.
         *
         * Optional metadata filter that can trim the tree before sending to the client only keeping nodes that
         * passed the filter and their parents. Default: null. Format: Comma-separated list of meta.category1.tag1.value1,
         * meta.category2.tag2.value2. "meta." is the prefix and all metadata filters must start with it. Multiple
         * filters are supported, they are combined using `OR` operator. Includes parent nodes of matching nodes
         * (e.g. breadcrumb) even if they don't pass the filter.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMetadataFilter(
          /**
           * New value for property `metadataFilter`
           */
          sMetadataFilter: string
        ): this;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * The name of the node created for this content resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): this;
        /**
         * Sets a new value for property {@link #getPassword password}.
         *
         * The password to use when opening the resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPassword(
          /**
           * New value for property `password`
           */
          sPassword: string
        ): this;
        /**
         * Sets a new value for property {@link #getPushPMI pushPMI}.
         *
         * If set to true, elements for PMI rendering content will be returned. Default: false.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPushPMI(
          /**
           * New value for property `pushPMI`
           */
          bPushPMI: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getPushViewGroups pushViewGroups}.
         *
         * If set to true, information of view groups will be returned. Default: true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPushViewGroups(
          /**
           * New value for property `pushViewGroups`
           */
          bPushViewGroups: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getSource source}.
         *
         * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the
         * content resource/file to load from. The source may be omitted if a grouping node is needed.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSource(
          /**
           * New value for property `source`
           */
          oSource: any
        ): this;
        /**
         * Sets a new value for property {@link #getSourceId sourceId}.
         *
         * The unique ID of the content resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSourceId(
          /**
           * New value for property `sourceId`
           */
          sSourceId: string
        ): this;
        /**
         * Sets a new value for property {@link #getSourceType sourceType}.
         *
         * The source type of the content resource. Valid types:
         * 	 - vds
         * 	 - vds4
         * 	 - svg
         * 	 - png
         * 	 - jpg
         * 	 - jpeg
         * 	 - gif
         * 	 - bmp
         * 	 - tif*
         * 	 - tiff*
         * 	 - stream  The source type may be omitted if this is a grouping content node.
         * NOTE: The tif and tiff image formats are not supported on all browsers. Source type "vds" initializes
         * deprecated DVL namespace and uses legacy library to load and display VDS file content. If source type
         * of "vds4" is used then new namespace based on Threejs rendering model will be used to load and display
         * VDS file content. Since DVL namespace is deprecated in one of future releases it will be removed and
         * source type "vds" will also use Threejs model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSourceType(
          /**
           * New value for property `sourceType`
           */
          sSourceType: string
        ): this;
        /**
         * Sets a new value for property {@link #getUseSecureConnection useSecureConnection}.
         *
         * If set to false, unsecure connections will be used. Default: true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setUseSecureConnection(
          /**
           * New value for property `useSecureConnection`
           */
          bUseSecureConnection?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getVeid veid}.
         *
         * Id of scene to retrieve tree for. Mandatory for the stream source type.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVeid(
          /**
           * New value for property `veid`
           */
          sVeid: string
        ): this;
      }
      /**
       * Overflow toolbar that can be collapsed.
       */
      class DrawerToolbar extends sap.ui.core.Control {
        /**
         * Constructor for a new DrawerToolbar control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$DrawerToolbarSettings
        );
        /**
         * Constructor for a new DrawerToolbar control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$DrawerToolbarSettings
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expanded expanded} event of this `sap.ui.vk.DrawerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.DrawerToolbar` itself.
         *
         * Indicates whether the DrawerToolbar is expanded or collapsed.
         */
        attachExpanded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.DrawerToolbar` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expanded expanded} event of this `sap.ui.vk.DrawerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.DrawerToolbar` itself.
         *
         * Indicates whether the DrawerToolbar is expanded or collapsed.
         */
        attachExpanded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.DrawerToolbar` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:expanded expanded} event of this `sap.ui.vk.DrawerToolbar`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachExpanded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.DrawerToolbar with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.DrawerToolbar>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:expanded expanded} to attached listeners.
         */
        fireExpanded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * If the DrawerToolbar is expanded, this is true. If the DrawerToolbar is collapsed, this is false.
             */
            expand?: boolean;
          }
        ): this;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Determines the content of the DrawerToolbar. See {@link sap.m.OverflowToolbar} for list of allowed controls.
         * The content visible when the DrawerToolbar is expanded.
         */
        getContent(): sap.ui.core.Control[];
        /**
         * Gets current value of property {@link #getExpanded expanded}.
         *
         * Indicates whether the DrawerToolbar is expanded or not. If expanded is set to true, then both the toolbar
         * and 'Close' icon are rendered. If expanded is set to false, then only the 'Open' icon is rendered.
         *
         * Default value is `true`.
         */
        getExpanded(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.DrawerToolbar.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * ID of the element which is the current target of the association {@link #getViewport viewport}, or `null`.
         */
        getViewport(): sap.ui.core.ID;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): int;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: int | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets the expanded property of the control.
         */
        setExpanded(
          /**
           * Defines whether control is expanded or not.
           */
          bExpanded: boolean
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Sets the associated {@link #getViewport viewport}.
         */
        setViewport(
          /**
           * ID of an element which becomes the new target of this viewport association; alternatively, an element
           * instance may be given
           */
          oViewport: sap.ui.core.ID | sap.ui.vk.Viewport
        ): this;
      }
      /**
       * @SINCE 1.16.0
       * @EXPERIMENTAL (since 1.32.0)
       *
       * Holds layout data for the FlexibleControl contents.
       */
      class FlexibleControl extends sap.ui.core.Control {
        /**
         * Constructor for a new FlexibleControl.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$FlexibleControlSettings
        );
        /**
         * Constructor for a new FlexibleControl.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$FlexibleControlSettings
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): this;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.FlexibleControl with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.FlexibleControl>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Child Controls within the layout.
         */
        getContent(): sap.ui.core.Control[];
        /**
         * Gets current value of property {@link #getEnabled enabled}.
         *
         * If not enabled all controls inside are not enabled automatically.
         *
         * Default value is `true`.
         */
        getEnabled(): boolean;
        /**
         * Gets current value of property {@link #getHeight height}.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getLayout layout}.
         *
         * Default value is `"Stacked"`.
         */
        getLayout(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.FlexibleControl.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * CSS width of the vertical layout.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): int;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: int | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets a new value for property {@link #getEnabled enabled}.
         *
         * If not enabled all controls inside are not enabled automatically.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnabled(
          /**
           * New value for property `enabled`
           */
          bEnabled?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getLayout layout}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"Stacked"`.
         */
        setLayout(
          /**
           * New value for property `layout`
           */
          sLayout?: string
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * CSS width of the vertical layout.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @SINCE 1.22.0
       * @EXPERIMENTAL (since 1.32.0)
       *
       * Holds layout data for the FlexibleControl contents. Allowed size values are numeric values ending in
       * "px" and "%" and the special case "auto". (The CSS value "auto" is used internally to recalculate the
       * size of the content dynamically and is not directly set as style property.)
       */
      class FlexibleControlLayoutData extends sap.ui.core.LayoutData {
        /**
         * Constructor for a new FlexibleControlLayoutData.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$FlexibleControlLayoutDataSettings
        );
        /**
         * Constructor for a new FlexibleControlLayoutData.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$FlexibleControlLayoutDataSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vk.FlexibleControlLayoutData with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.FlexibleControlLayoutData>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getMarginBottom marginBottom}.
         *
         * Default value is `"0px"`.
         */
        getMarginBottom(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getMarginTop marginTop}.
         *
         * Sets the margin-bottom of the content in px.
         *
         * Default value is `"0px"`.
         */
        getMarginTop(): sap.ui.core.CSSSize;
        /**
         * Returns a metadata object for class sap.ui.vk.FlexibleControlLayoutData.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMinSize minSize}.
         *
         * Sets the minimum size of the content in px.
         *
         * Default value is `"0px"`.
         */
        getMinSize(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getSize size}.
         *
         * Sets the size of the content.
         *
         * Default value is `"auto"`.
         */
        getSize(): sap.ui.core.CSSSize;
        /**
         * Sets a new value for property {@link #getMarginBottom marginBottom}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0px"`.
         */
        setMarginBottom(
          /**
           * New value for property `marginBottom`
           */
          sMarginBottom?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getMarginTop marginTop}.
         *
         * Sets the margin-bottom of the content in px.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0px"`.
         */
        setMarginTop(
          /**
           * New value for property `marginTop`
           */
          sMarginTop?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getMinSize minSize}.
         *
         * Sets the minimum size of the content in px.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0px"`.
         */
        setMinSize(
          /**
           * New value for property `minSize`
           */
          sMinSize?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getSize size}.
         *
         * Sets the size of the content.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"auto"`.
         */
        setSize(
          /**
           * New value for property `size`
           */
          sSize?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a loader that loads a 2D raster or vector image into an HTMLImageElement or HTMLObjectElement
       * object.
       */
      class ImageContentManager extends sap.ui.vk.ContentManager {
        /**
         * Constructor for a new ImageContentManager.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ContentManager#constructor
         * sap.ui.vk.ContentManager} can be used.
         */
        constructor(
          /**
           * Initial settings for the new ImageContentManager object.
           */
          mSettings?: sap.ui.vk.$ImageContentManagerSettings
        );
        /**
         * Constructor for a new ImageContentManager.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ContentManager#constructor
         * sap.ui.vk.ContentManager} can be used.
         */
        constructor(
          /**
           * ID for the new ImageContentManager object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ImageContentManager object.
           */
          mSettings?: sap.ui.vk.$ImageContentManagerSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vk.ImageContentManager with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ImageContentManager>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.ImageContentManager.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
      }
      /**
       * Provides a proxy object to the layer in the node hierarchy.
       *
       * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple
       * layers.
       *
       * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
       * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
       * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
       */
      class LayerProxy extends sap.ui.base.Object {
        /**
         * Constructor for a new LayerProxy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
         * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
         * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.LayerProxy with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.LayerProxy>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the description of the layer.
         */
        getDescription(): string;
        /**
         * Gets the layer ID.
         */
        getLayerId(): string;
        /**
         * Gets the layer metadata.
         */
        getLayerMetadata(): object;
        /**
         * Returns a metadata object for class sap.ui.vk.LayerProxy.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the name of the layer
         */
        getName(): string;
        /**
         * Gets an array of IDs of nodes belonging to the layer.
         */
        getNodes(): string[];
        /**
         * Gets the layer VE IDs.
         */
        getVeIds(): object[];
      }
      /**
       * @EXPERIMENTAL (since 1.38.0)
       *
       * Legend item control
       */
      class LegendItem extends sap.m.StandardListItem {
        /**
         * Constructor for a new LegendItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$LegendItemSettings
        );
        /**
         * Constructor for a new LegendItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$LegendItemSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vk.LegendItem with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.m.StandardListItem.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.LegendItem>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * show color square
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Returns a metadata object for class sap.ui.vk.LegendItem.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getSemanticSpotType semanticSpotType}.
         *
         * The semantic spot type for the legend marker.
         */
        getSemanticSpotType(): sap.ui.vbm.SemanticType;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * show color square
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getSemanticSpotType semanticSpotType}.
         *
         * The semantic spot type for the legend marker.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSemanticSpotType(
          /**
           * New value for property `semanticSpotType`
           */
          sSemanticSpotType?: sap.ui.vbm.SemanticType
        ): this;
      }
      /**
       * @EXPERIMENTAL (since 1.38.0)
       *
       * Aggregation control for the Legend
       */
      class ListPanel extends sap.ui.core.Control {
        /**
         * Constructor for a new ListPanel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ListPanelSettings
        );
        /**
         * Constructor for a new ListPanel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ListPanelSettings
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.m.ListItemBase
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the panel is expanded of collapsed
         */
        attachExpand(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the panel is expanded of collapsed
         */
        attachExpand(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:headerIconPress headerIconPress} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the header icon is pressed
         */
        attachHeaderIconPress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:headerIconPress headerIconPress} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the header icon is pressed
         */
        attachHeaderIconPress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when an item is pressed unless the item's `type` property is `Inactive`.
         */
        attachItemPress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when an item is pressed unless the item's `type` property is `Inactive`.
         */
        attachItemPress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:expand expand} event of this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachExpand(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:headerIconPress headerIconPress} event of
         * this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHeaderIconPress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:itemPress itemPress} event of this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachItemPress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
         * this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ListPanel with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ListPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:expand expand} to attached listeners.
         */
        fireExpand(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:headerIconPress headerIconPress} to attached listeners.
         */
        fireHeaderIconPress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:itemPress itemPress} to attached listeners.
         */
        fireItemPress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The item which fired the pressed event.
             */
            listItem?: sap.m.ListItemBase;
            /**
             * The control which caused the press event within the container.
             */
            srcControl?: sap.ui.core.Control;
          }
        ): this;
        /**
         * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
         */
        fireSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The item whose selection has changed. In `MultiSelect` mode, only the up-most selected item is returned.
             * This parameter can be used for single-selection modes.
             */
            listItem?: sap.m.ListItemBase;
            /**
             * Array of items whose selection has changed. This parameter can be used for `MultiSelect` mode.
             */
            listItems?: sap.m.ListItemBase[];
            /**
             * Indicates whether the `listItem` parameter is selected or not.
             */
            selected?: boolean;
          }
        ): this;
        /**
         * Gets current value of property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * Default value is `true`.
         */
        getExpandAnimation(): boolean;
        /**
         * Gets current value of property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * Default value is `true`.
         */
        getExpanded(): boolean;
        /**
         * Gets current value of property {@link #getHeaderIcon headerIcon}.
         *
         * Header icon
         */
        getHeaderIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getHeaderText headerText}.
         *
         * Header text
         */
        getHeaderText(): string;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Item aggregation
         */
        getItems(): sap.m.ListItemBase[];
        /**
         * Returns a metadata object for class sap.ui.vk.ListPanel.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled
         * and multiple items are selected, only the up-most selected item is returned.
         */
        getSelectedItem(): sap.m.ListItemBase;
        /**
         * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
         */
        getSelectedItems(): sap.m.ListItemBase[];
        /**
         * Gets current value of property {@link #getSelectionMode selectionMode}.
         *
         * Selection Mode
         *
         * Default value is `MultiSelect`.
         */
        getSelectionMode(): sap.m.ListMode;
        /**
         * Checks for the provided `sap.m.ListItemBase` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.m.ListItemBase
        ): int;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.m.ListItemBase,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.m.ListItemBase[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: int | string | sap.m.ListItemBase
        ): sap.m.ListItemBase;
        /**
         * Sets a new value for property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpandAnimation(
          /**
           * New value for property `expandAnimation`
           */
          bExpandAnimation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpanded(
          /**
           * New value for property `expanded`
           */
          bExpanded?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHeaderIcon headerIcon}.
         *
         * Header icon
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeaderIcon(
          /**
           * New value for property `headerIcon`
           */
          sHeaderIcon: sap.ui.core.URI
        ): this;
        /**
         * Sets a new value for property {@link #getHeaderText headerText}.
         *
         * Header text
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeaderText(
          /**
           * New value for property `headerText`
           */
          sHeaderText: string
        ): this;
        /**
         * Selects or deselects the given list item.
         */
        setSelectedItem(
          /**
           * The list item whose selection to be changed. This parameter is mandatory.
           */
          oListItem: sap.m.ListItemBase,
          /**
           * Sets selected status of the list item. Default value is true.
           */
          bSelect: boolean,
          /**
           * Whether to fire the event or not.
           */
          bFireEvent: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getSelectionMode selectionMode}.
         *
         * Selection Mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `MultiSelect`.
         */
        setSelectionMode(
          /**
           * New value for property `selectionMode`
           */
          sSelectionMode?: sap.m.ListMode
        ): this;
      }
      /**
       * @EXPERIMENTAL (since 1.38.0)
       *
       * ListPanelStack control
       */
      class ListPanelStack extends sap.ui.core.Control {
        /**
         * Constructor for a new ListPanelStack.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ListPanelStackSettings
        );
        /**
         * Constructor for a new ListPanelStack.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ListPanelStackSettings
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.vk.ListPanel
        ): this;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ListPanelStack with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ListPanelStack>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCollapsible collapsible}.
         *
         * Ability to collapse
         *
         * Default value is `true`.
         */
        getCollapsible(): boolean;
        /**
         * Gets content of aggregation {@link #getContent content}.
         */
        getContent(): sap.ui.vk.ListPanel[];
        /**
         * Gets current value of property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * Default value is `true`.
         */
        getExpandAnimation(): boolean;
        /**
         * Gets current value of property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * Default value is `true`.
         */
        getExpanded(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.ListPanelStack.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Control width
         *
         * Default value is `"100%"`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.vk.ListPanel` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.vk.ListPanel
        ): int;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.vk.ListPanel,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.vk.ListPanel[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: int | string | sap.ui.vk.ListPanel
        ): sap.ui.vk.ListPanel;
        /**
         * Sets a new value for property {@link #getCollapsible collapsible}.
         *
         * Ability to collapse
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setCollapsible(
          /**
           * New value for property `collapsible`
           */
          bCollapsible?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpandAnimation(
          /**
           * New value for property `expandAnimation`
           */
          bExpandAnimation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpanded(
          /**
           * New value for property `expanded`
           */
          bExpanded?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Control width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @SINCE 1.32.0
       *
       * Intercepts input event data for a SAPUI5 target, and interprets the data based on a supported set of
       * gestures.
       */
      class Loco extends sap.ui.base.EventProvider {
        /**
         * Constructor for a new Loco.
         */
        constructor();

        /**
         * Adds a viewport event handler to the Loco.
         */
        addHandler(
          /**
           * The event handler to be added.
           */
          handler: Object,
          /**
           * The priority of the handler.
           */
          priority: number
        ): void;
        /**
         * Cleans up, removes all handlers.
         */
        destroy(): void;
        /**
         * Creates a new subclass of class sap.ui.vk.Loco with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Loco>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.Loco.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Removes a viewport event handler from Loco.
         */
        removeHandler(
          /**
           * to be removed.
           */
          handler: Object
        ): void;
      }
      /**
       * Abstract Constructor for a new Container.
       */
      class MapContainer extends sap.ui.vk.ContainerBase {
        /**
         * Constructor for a new MapContainer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$MapContainerSettings
        );
        /**
         * Constructor for a new MapContainer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$MapContainerSettings
        );

        /**
         * Destroys the listPanelStack in the aggregation {@link #getListPanelStack listPanelStack}.
         */
        destroyListPanelStack(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.MapContainer with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContainerBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.MapContainer>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getListPanelStack listPanelStack}.
         *
         * List Panel aggregation
         */
        getListPanelStack(): sap.ui.vk.ListPanelStack;
        /**
         * Returns a metadata object for class sap.ui.vk.MapContainer.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getShowHome showHome}.
         *
         * Controls the visibility of the home button
         *
         * Default value is `true`.
         */
        getShowHome(): boolean;
        /**
         * Gets current value of property {@link #getShowMapLayer showMapLayer}.
         *
         * Controls the visibility of the Map Layer Select
         *
         * Default value is `true`.
         */
        getShowMapLayer(): boolean;
        /**
         * Gets current value of property {@link #getShowNavbar showNavbar}.
         *
         * Show navbar
         *
         * Default value is `true`.
         */
        getShowNavbar(): boolean;
        /**
         * Gets current value of property {@link #getShowRectangularZoom showRectangularZoom}.
         *
         * Controls the visibility of the rectangular zoom button
         *
         * Default value is `true`.
         */
        getShowRectangularZoom(): boolean;
        /**
         * Gets current value of property {@link #getShowZoom showZoom}.
         *
         * Controls the visibility of the zoom buttons
         *
         * Default value is `true`.
         */
        getShowZoom(): boolean;
        /**
         * Sets the aggregated {@link #getListPanelStack listPanelStack}.
         */
        setListPanelStack(
          /**
           * The listPanelStack to set
           */
          oListPanelStack: sap.ui.vk.ListPanelStack
        ): this;
        /**
         * Sets a new value for property {@link #getShowHome showHome}.
         *
         * Controls the visibility of the home button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowHome(
          /**
           * New value for property `showHome`
           */
          bShowHome?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowMapLayer showMapLayer}.
         *
         * Controls the visibility of the Map Layer Select
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowMapLayer(
          /**
           * New value for property `showMapLayer`
           */
          bShowMapLayer?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowNavbar showNavbar}.
         *
         * Show navbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowNavbar(
          /**
           * New value for property `showNavbar`
           */
          bShowNavbar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowRectangularZoom showRectangularZoom}.
         *
         * Controls the visibility of the rectangular zoom button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowRectangularZoom(
          /**
           * New value for property `showRectangularZoom`
           */
          bShowRectangularZoom?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowZoom showZoom}.
         *
         * Controls the visibility of the zoom buttons
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowZoom(
          /**
           * New value for property `showZoom`
           */
          bShowZoom?: boolean
        ): this;
        /**
         * Set custom item on the MapContainer toolbar. All custom items added between selection segment button
         * and setting button.
         */
        setToolbarItem(
          /**
           * Item configuration object.
           */
          item: {
            /**
             * Id of the item for future references.
             */
            id: string;
            /**
             * Relative index of an item across all custom items.
             */
            index: int;
            /**
             * Visibility of an item.
             */
            visible: boolean;
            /**
             * Active item or not.
             */
            active: boolean;
            /**
             * Text of an item.
             */
            text: string;
            /**
             * Tooltip of an item.
             */
            tooltip: string;
            /**
             * If true create Overflow button or standard if false.
             */
            overflow: boolean;
            /**
             * Icon of an item.
             */
            icon: sap.ui.core.URI;
            /**
             * Alternative icon of an item, see {@link sap.m.Button} for details.
             */
            activeIcon: sap.ui.core.URI;
            /**
             * The {@link sap.ui.vk.MapContainerButtonType} enum.
             */
            type: string;
            /**
             * Callback function which is called when item gets pressed.
             */
            press: Function;
            /**
             * sets the initial pressed state for a {@link sap.ui.vk.MapContainerButtonType} Toggle button. This does
             * not fire the pressed event handler. It should be used if pressed logic is activated by application code
             * on first load.
             */
            toggled: boolean;
          }
        ): object;
      }
      /**
       * @EXPERIMENTAL (since 1.60.0)
       *
       * Provides the interface for the material.
       *
       * The objects of this class should not be created directly.
       */
      class Material extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Material.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.Material with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Material>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAmbientColour ambientColour}.
         *
         * Ambient colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        getAmbientColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getDiffuseColour diffuseColour}.
         *
         * Diffuse colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        getDiffuseColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getEmissiveColour emissiveColour}.
         *
         * Emissive colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        getEmissiveColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getGlossiness glossiness}.
         *
         * Glossiness (optional)
         *
         * Default value is `0.0`.
         */
        getGlossiness(): float;
        /**
         * Gets current value of property {@link #getId id}.
         *
         * Material id
         */
        getId(): string;
        /**
         * Gets current value of property {@link #getLineColour lineColour}.
         *
         * Line colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        getLineColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getLineWidth lineWidth}.
         *
         * Line width (optional)
         *
         * Default value is `0.0`.
         */
        getLineWidth(): float;
        /**
         *
         */
        getMaterialRef(): any;
        /**
         * Returns a metadata object for class sap.ui.vk.Material.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * Material name
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * Opacity (optional)
         *
         * Default value is `1.0`.
         */
        getOpacity(): float;
        /**
         * Gets current value of property {@link #getSpecularColour specularColour}.
         *
         * Specular colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        getSpecularColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getTextureAmbientOcclusion textureAmbientOcclusion}.
         *
         * Ambient occlusion texture (optional)
         */
        getTextureAmbientOcclusion(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureBump textureBump}.
         *
         * Bump texture (optional)
         */
        getTextureBump(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureDiffuse textureDiffuse}.
         *
         * Diffuse texture (optional)
         */
        getTextureDiffuse(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureEmissive textureEmissive}.
         *
         * Emissive texture (optional)
         */
        getTextureEmissive(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureOpacity textureOpacity}.
         *
         * Opacity texture (optional)
         */
        getTextureOpacity(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureReflection textureReflection}.
         *
         * Reflection texture (optional)
         */
        getTextureReflection(): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getAmbientColour ambientColour}.
         *
         * Ambient colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        setAmbientColour(
          /**
           * New value for property `ambientColour`
           */
          sAmbientColour?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getDiffuseColour diffuseColour}.
         *
         * Diffuse colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        setDiffuseColour(
          /**
           * New value for property `diffuseColour`
           */
          sDiffuseColour?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getEmissiveColour emissiveColour}.
         *
         * Emissive colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        setEmissiveColour(
          /**
           * New value for property `emissiveColour`
           */
          sEmissiveColour?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getGlossiness glossiness}.
         *
         * Glossiness (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setGlossiness(
          /**
           * New value for property `glossiness`
           */
          fGlossiness?: float
        ): this;
        /**
         * Sets a new value for property {@link #getId id}.
         *
         * Material id
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setId(
          /**
           * New value for property `id`
           */
          sId: string
        ): this;
        /**
         * Sets a new value for property {@link #getLineColour lineColour}.
         *
         * Line colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        setLineColour(
          /**
           * New value for property `lineColour`
           */
          sLineColour?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getLineWidth lineWidth}.
         *
         * Line width (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setLineWidth(
          /**
           * New value for property `lineWidth`
           */
          fLineWidth?: float
        ): this;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * Material name
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): this;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * Opacity (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1.0`.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity?: float
        ): this;
        /**
         * Sets a new value for property {@link #getSpecularColour specularColour}.
         *
         * Specular colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 1)"`.
         */
        setSpecularColour(
          /**
           * New value for property `specularColour`
           */
          sSpecularColour?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getTextureAmbientOcclusion textureAmbientOcclusion}.
         *
         * Ambient occlusion texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureAmbientOcclusion(
          /**
           * New value for property `textureAmbientOcclusion`
           */
          sTextureAmbientOcclusion?: sap.ui.vk.Texture
        ): this;
        /**
         * Sets a new value for property {@link #getTextureBump textureBump}.
         *
         * Bump texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureBump(
          /**
           * New value for property `textureBump`
           */
          sTextureBump?: sap.ui.vk.Texture
        ): this;
        /**
         * Sets a new value for property {@link #getTextureDiffuse textureDiffuse}.
         *
         * Diffuse texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureDiffuse(
          /**
           * New value for property `textureDiffuse`
           */
          sTextureDiffuse?: sap.ui.vk.Texture
        ): this;
        /**
         * Sets a new value for property {@link #getTextureEmissive textureEmissive}.
         *
         * Emissive texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureEmissive(
          /**
           * New value for property `textureEmissive`
           */
          sTextureEmissive?: sap.ui.vk.Texture
        ): this;
        /**
         * Sets a new value for property {@link #getTextureOpacity textureOpacity}.
         *
         * Opacity texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureOpacity(
          /**
           * New value for property `textureOpacity`
           */
          sTextureOpacity?: sap.ui.vk.Texture
        ): this;
        /**
         * Sets a new value for property {@link #getTextureReflection textureReflection}.
         *
         * Reflection texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureReflection(
          /**
           * New value for property `textureReflection`
           */
          sTextureReflection?: sap.ui.vk.Texture
        ): this;
      }
      /**
       * @SINCE 1.32.0
       *
       * Enables loading, pan, zoom and overlay capabilities for a subset of file formats capable of being loaded
       * into a browser natively.
       *
       *
       * ```javascript
       *
       * viewer.loadContent("https://www.google.co.nz/images/srpr/logo11w.png", "png", true);
       * ```
       */
      class NativeViewport extends sap.ui.core.Control {
        /**
         * Constructor for a new NativeViewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new Native Viewport control.
           */
          mSettings?: sap.ui.vk.$NativeViewportSettings
        );
        /**
         * Constructor for a new NativeViewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Native Viewport control, generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Native Viewport control.
           */
          mSettings?: sap.ui.vk.$NativeViewportSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:move move} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display position or magnification of the image in the Native Viewport changes.
         */
        attachMove(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:move move} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display position or magnification of the image in the Native Viewport changes.
         */
        attachMove(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display size of the image in the Native Viewport changes.
         */
        attachResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display size of the image in the Native Viewport changes.
         */
        attachResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): this;
        /**
         * Marks the start of the current gesture operation.
         */
        beginGesture(
          /**
           * x-coordinate in screen space.
           */
          x: int,
          /**
           * y-coordinate in screen space.
           */
          y: int
        ): sap.ui.vk.NativeViewport;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:move move} event of this `sap.ui.vk.NativeViewport`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachMove(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:resize resize} event of this `sap.ui.vk.NativeViewport`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Marks the end of the current gesture operation.
         */
        endGesture(): sap.ui.vk.NativeViewport;
        /**
         * Creates a new subclass of class sap.ui.vk.NativeViewport with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.NativeViewport>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:move move} to attached listeners.
         */
        fireMove(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            pan?: object;

            zoom?: float;
          }
        ): this;
        /**
         * Fires event {@link #event:resize resize} to attached listeners.
         */
        fireResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            oldSize?: object;

            size?: object;
          }
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getLimitZoomOut limitZoomOut}.
         *
         * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full
         * view (best fit).
         *
         * Default value is `false`.
         */
        getLimitZoomOut(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.NativeViewport.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * It retrieves information about the current virtual native viewport. The information can used for making
         * calculations when restoring Redlining elements.
         */
        getOutputSize(): object;
        /**
         * Gets information about the Viewport's attributes; for example, camera.
         */
        getViewInfo(): object;
        /**
         * @deprecated (since 1.50.0)
         *
         * Loads a image URL into Viewport.
         */
        loadUrl(
          /**
           * The URL of the resource.
           */
          url: string,
          /**
           * onload callback, called when the resource is loaded successfully.
           */
          onload: Function,
          /**
           * onerror callback, called when an error occurs during the loading process.
           */
          onerror: Function,
          /**
           * onprogress callback, called during the loading process.
           */
          onprogress: Function,
          /**
           * an array of type of resources to load.
           */
          resourceType: any[]
        ): sap.ui.vk.NativeViewport;
        /**
         * Performs a `pan` gesture to pan across the Viewport.
         */
        pan(
          /**
           * The change in distance along the x-coordinate.
           */
          dx: int,
          /**
           * The change in distance along the y-coordinate.
           */
          dy: int
        ): sap.ui.vk.NativeViewport;
        /**
         * Queues a command for execution during the rendering cycle. All gesture operations should be called using
         * this method.
         */
        queueCommand(
          /**
           * The function to be executed.
           */
          command: Function
        ): sap.ui.vk.NativeViewport;
        /**
         * Rotates the content of the Viewport.
         */
        rotate(
          /**
           * The change in x-coordinate used to define the desired rotation.
           */
          dx: int,
          /**
           * The change in y-coordinate used to define the desired rotation.
           */
          dy: int
        ): sap.ui.vk.NativeViewport;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): this;
        /**
         * Sets a new value for property {@link #getLimitZoomOut limitZoomOut}.
         *
         * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full
         * view (best fit).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setLimitZoomOut(
          /**
           * New value for property `limitZoomOut`
           */
          bLimitZoomOut?: boolean
        ): this;
        /**
         * Sets information about the Viewport's attributes; for example, camera.
         */
        setViewInfo(
          /**
           * ViewInfo object.
           */
          viewInfo: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Executes a click or tap gesture.
         */
        tap(
          /**
           * The tap gesture's x-coordinate.
           */
          x: int,
          /**
           * The tap gesture's y-coordinate.
           */
          y: int,
          /**
           * Indicates whether the tap gesture should be interpreted as a double-click. A value of `true` indicates
           * a double-click gesture, and `false` indicates a single click gesture.
           */
          isDoubleClick: boolean
        ): sap.ui.vk.NativeViewport;
        /**
         * Performs a `zoom` gesture to zoom in or out on the beginGesture coordinate.
         */
        zoom(
          /**
           * Zoom factor. A scale factor that specifies how much to zoom in or out by.
           */
          z: float
        ): sap.ui.vk.NativeViewport;
      }
      /**
       * Provides the ability to explore a Scene object's node structure.
       *
       * The objects of this class should not be created directly, and should only be created via a call to {@link
       * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
       */
      class NodeHierarchy extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new NodeHierarchy.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Attaches event handler `fnFunction` to the {@link #event:changed changed} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when the node hierarchy changes, e.g. a node is added or removed.
         */
        attachChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:changed changed} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when the node hierarchy changes, e.g. a node is added or removed.
         */
        attachChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeCreated nodeCreated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a new node is created.
         */
        attachNodeCreated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeCreated nodeCreated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a new node is created.
         */
        attachNodeCreated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeRemoving nodeRemoving} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a node is about to be removed.
         */
        attachNodeRemoving(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeRemoving nodeRemoving} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a node is about to be removed.
         */
        attachNodeRemoving(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeReplaced nodeReplaced} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeReplaced(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeReplaced nodeReplaced} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeReplaced(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeUpdated nodeUpdated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeUpdated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeUpdated nodeUpdated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeUpdated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.50.0
         *
         * Creates a layer proxy object.
         *
         * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
         */
        createLayerProxy(
          /**
           * The layer ID for which to create a proxy object.
           */
          layerId: string
        ): sap.ui.vk.LayerProxy;
        /**
         * @SINCE 1.50.0
         *
         * Creates a new node.
         */
        createNode(
          /**
           * The reference object of the parent node where the created node is added to. If equals `null` the newly
           * created node is a top level node.
           */
          parentNode: any,
          /**
           * The name of the new node.
           */
          name: string,
          /**
           * The created node is added before this specified node. If equals `null` the newly created node is added
           * at the end of the parent's list of nodes.
           */
          insertBeforeNode: any,
          /**
           * The created node content type.
           */
          nodeContentType?: sap.ui.vk.NodeContentType,
          /**
           * Optional Json structure used to define node properties.
           */
          content?: object
        ): any;
        /**
         * @SINCE 1.50.0
         *
         * Creates a copy of an existing node.
         */
        createNodeCopy(
          /**
           * The reference object of the node to copy.
           */
          nodeToCopy: any,
          /**
           * The reference object of the parent node where the created node is added to. If equals `null` the newly
           * created node is a top level node.
           */
          parentNode: any,
          /**
           * The name of the new node.
           */
          name: string,
          /**
           * The created node is added before this specified node. If equals `null` the newly created node is added
           * at the end of the parent's list of nodes.
           */
          insertBeforeNode: any
        ): any;
        /**
         * @SINCE 1.50.0
         *
         * Creates a node proxy object.
         *
         * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
         */
        createNodeProxy(
          /**
           * The reference object for which to create a proxy object.
           */
          nodeRef: any
        ): sap.ui.vk.NodeProxy;
        /**
         * @SINCE 1.50.0
         *
         * Destroys the layer proxy object.
         */
        destroyLayerProxy(
          /**
           * The layer proxy object.
           */
          layerProxy: sap.ui.vk.LayerProxy
        ): sap.ui.vk.LayerProxy;
        /**
         * @SINCE 1.50.0
         *
         * Destroys the node proxy object.
         */
        destroyNodeProxy(
          /**
           * The node proxy object.
           */
          nodeProxy: sap.ui.vk.NodeProxy
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:changed changed} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeCreated nodeCreated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeCreated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeRemoving nodeRemoving} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeRemoving(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeReplaced nodeReplaced} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeReplaced(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeUpdated nodeUpdated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeUpdated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.50.0
         *
         * Enumerates the ancestor nodes of a particular node in the Scene object.
         *
         * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
         * to which it passes the ancestor nodes to one by one.
         *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
         * to the `callback` function.
         *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
         */
        enumerateAncestors(
          /**
           * The reference object of a node whose ancestor nodes we want enumerated.
           */
          nodeRef: any,
          /**
           * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
           * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
           */
          callback: Function,
          /**
           * Indicates whether to pass the reference objects of the ancestor nodes, or the whole node proxy to the
           * `callback` function.
           *  If `true`, then only the reference objects of the ancestor nodes are passed to the `callback` function.
           *
           *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
           */
          passNodeRef?: boolean
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Enumerates the child nodes of a particular node in the Scene object.
         *
         * This method gets the child nodes of a particular node, and then calls the `callback` function to which
         * it passes the child nodes to one by one.
         *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
         * after each call to the `callback` function.
         */
        enumerateChildren(
          /**
           * The reference object of a node whose child nodes we want enumerated.
           *  When `nodeRef` is specified, the child nodes of this node are enumerated.
           *  When no `nodeRef` is specified, only the top level nodes are enumerated.
           */
          nodeRef: any,
          /**
           * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
           * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
           */
          callback: Function,
          /**
           * Indicates whether to enumerate the child nodes if the node is closed.
           *  If `true`, the children of that closed node will be enumerated
           *  If `false`, the children of that node will not be enumerated
           */
          stepIntoClosedNodes?: boolean,
          /**
           * Indicates whether to pass the reference objects of the child nodes, or the whole node proxy to the `callback`
           * function.
           *  If `true`, then only the reference objects of the child nodes are passed to the `callback` function.
           *
           *  If `false`, then the node proxies created from the child reference objects are passed to the `callback`
           * function.
           */
          passNodeRef?: boolean
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Enumerates the child nodes of a particular node in the Scene object.
         *
         * This method gets the child nodes of a particular node, and then calls the `callback` function to which
         * it passes the child nodes to one by one.
         *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
         * after each call to the `callback` function.
         */
        enumerateChildren(
          /**
           * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
           * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
           */
          callback: Function,
          /**
           * Indicates whether to enumerate the child nodes if the node is closed.
           *  If `true`, the children of that closed node will be enumerated
           *  If `false`, the children of that node will not be enumerated
           */
          stepIntoClosedNodes?: boolean,
          /**
           * Indicates whether to pass the reference objects of the child nodes, or the whole node proxy to the `callback`
           * function.
           *  If `true`, then only the reference objects of the child nodes are passed to the `callback` function.
           *
           *  If `false`, then the node proxies created from the child reference objects are passed to the `callback`
           * function.
           */
          passNodeRef?: boolean
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Creates a new subclass of class sap.ui.vk.NodeHierarchy with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.NodeHierarchy>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * @SINCE 1.50.0
         *
         * Searches for VE IDs, and returns a list of reference objects of nodes with VE IDs matching the search.
         * The query is run specifically against VE ID structures, which are strictly related to VDS4 models.
         */
        findNodesById(
          /**
           * JSON object containing the search parameters.
           *  The following example shows what the structure of the `query` object should look like:
           * ```javascript
           * query = {
           * 	source: string (if not specified, the query returns an empty array),
           *
           * 	type: string (if not specified, the query returns an empty array),
           *
           * 	fields: field[]
           * 	}```
           *
           *
           * 	 -  **field.name**
           *  A string containing the name of the VE ID. If no value is specified, then the query will return an empty
           * array.
           *
           * 	 -  **field.value**
           *  A string representing the search keyword. If no value is specified, it defaults to empty string.
           *  The following example shows a string being passed in:
           * ```javascript
           * value: "Box #14"```
           *
           * 	 -  **field.predicate**
           *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
           *
           *  Using `"equals"` will search for IDs with names that exactly match the provided string.
           *  Using `"contains"` will search for IDs with names containing the provided string.
           *  Using `"startsWith"` will search for IDs with names starting with the provided string.
           *  If no value is specified, the search mode will default to `"equals"`.
           *
           *
           * 	 -  **field.caseSensitive**
           *  Indicates whether the search should be case sensitive or not.
           *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
           *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
           * search).
           */
          query: object
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Finds nodes in a scene via metadata information.
         */
        findNodesByMetadata(
          /**
           * JSON object containing the search parameters.
           *  The following example shows what the structure of the `query` object should look like:
           * ```javascript
           * query = {
           *   category: string,
           *   key: string,
           *   value: string | string[],
           *   predicate: "equals" | "contains" | "startsWith",
           *   caseSensitive: true | false
           * }```
           *
           *  NOTE: `query.predicate` and `query.caseSensitive` refer to `query.value`.
           *
           * 	 -  **query.category**
           *  A string indicating the name of the metadata category.
           *  If no value is specified for `query.category`, all nodes in the scene will be returned in the search.
           *
           *
           * 	 -  **query.key**
           *  A string indicating the key which belongs to the metadata category specified in `query.category`. You
           * can only use `query.key` if `query.category` has been specified.
           *  If no value is specified for `query.key`, then all nodes grouped under the specified category will be
           * returned in the search.
           *
           *
           * 	 -  **query.value**
           *  A string or an array of strings containing the value or values associated with `query.key`. You can
           * only use `query.value` in the search if `query.key` has been specified.
           *  If no value is specified for `query.value`, then all nodes containing the specified key will be returned,
           * regardless of what the value of the key is.
           *  The following example shows a single string being passed in:
           * ```javascript
           * value: "Box #14"```
           *  The following example shows an array of strings being passed in:
           * ```javascript
           * value: ["Box #3", "box #4", "BOX #5"]```
           *
           * 	 -  **query.predicate**
           *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
           *
           *  Using `"equals"` will search for key values that exactly match the provided string or array of strings.
           *
           *  Using `"contains"` will search for key values containing all or part of the provided string or array
           * of strings.
           *  Using `"startsWith"` will search key values starting with the provided string or array of strings.
           *  If no value is specified, the search mode will default to `"equals"`.
           *
           *
           * 	 -  **query.caseSensitive**
           *  Indicates whether the search should be case sensitive or not.
           *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
           *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
           * search).
           */
          query: object
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Finds nodes in a scene via node name.
         */
        findNodesByName(
          /**
           * JSON object containing the search parameters.
           *  The following example shows what the structure of the `query` object should look like:
           * ```javascript
           * query = {
           * 	value: string | string[],
           * 	predicate: "equals" | "contains" | "startsWith",
           * 	caseSensitive: true | false
           * }```
           *
           *
           * 	 -  **query.value**
           *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
           * then all nodes in the scene will be returned.
           *  The following example shows a single string being passed in:
           * ```javascript
           * value: "Box #14"```
           *  The following example shows an array of strings being passed in:
           * ```javascript
           * value: ["Box #3", "box #4", "BOX #5"]```
           *
           * 	 -  **query.predicate**
           *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
           *
           *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
           * strings.
           *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
           * array of strings.
           *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
           * strings.
           *  If no value is specified, the search mode will default to `"equals"`.
           *
           *
           * 	 -  **query.caseSensitive**
           *  Indicates whether the search should be case sensitive or not.
           *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
           *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
           * search).
           */
          query: object
        ): any[];
        /**
         * Fires event {@link #event:changed changed} to attached listeners.
         */
        fireChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:nodeCreated nodeCreated} to attached listeners.
         */
        fireNodeCreated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            nodeRef?: any;

            nodeId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:nodeRemoving nodeRemoving} to attached listeners.
         */
        fireNodeRemoving(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            nodeRef?: any;

            nodeId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:nodeReplaced nodeReplaced} to attached listeners.
         */
        fireNodeReplaced(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            ReplacedNodeRef?: any;

            ReplacementNodeRef?: any;

            ReplacedNodeId?: string;

            ReplacementNodeId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:nodeUpdated nodeUpdated} to attached listeners.
         */
        fireNodeUpdated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            nodeRef?: any;

            nodeId?: string;
          }
        ): this;
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of reference objects belonging to the ancestors of a particular node.
         */
        getAncestors(
          /**
           * The reference object of the node whose ancestors will be returned.
           */
          nodeRef: any
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of reference objects belonging to the children of a particular node.
         */
        getChildren(
          /**
           * The reference object of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
           * function, the reference objects of the root nodes will be returned.
           */
          nodeRef: any,
          /**
           * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
           * children of that closed node will be returned. If `false`, then the children of that closed node
           * will not be returned.
           */
          stepIntoClosedNodes?: boolean
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of hotspot IDs.
         */
        getHotspotNodeIds(): string[];
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of layer IDs.
         */
        getLayers(): string[];
        /**
         * Returns a metadata object for class sap.ui.vk.NodeHierarchy.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * @SINCE 1.73.0
         *
         * Get node content type
         */
        getNodeContentType(
          /**
           * The node reference
           */
          nodeRef: any
        ): sap.ui.vk.NodeContentType;
        /**
         * @SINCE 1.50.0
         *
         * Gets the Scene object the node hierarchy belongs to.
         */
        getScene(): sap.ui.vk.Scene;
        /**
         * Gets the scene reference that this NodeHierarchy object wraps.
         */
        getSceneRef(): any;
        /**
         * @SINCE 1.50.0
         *
         * Deletes a node and destroys it.
         */
        removeNode(
          /**
           * The reference object of the node to destroy.
           */
          nodeRef: any
        ): sap.ui.vk.NodeHierarchy;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides a proxy object to the node in the node hierarchy.
       *
       * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
       * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
       * method.
       */
      class NodeProxy extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new NodeProxy.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Binds property {@link #getLocalMatrix localMatrix} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindLocalMatrix(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.PropertyBindingInfo
        ): this;
        /**
         * Binds property {@link #getOpacity opacity} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindOpacity(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.PropertyBindingInfo
        ): this;
        /**
         * Binds property {@link #getTintColor tintColor} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindTintColor(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.PropertyBindingInfo
        ): this;
        /**
         * Binds property {@link #getTintColorABGR tintColorABGR} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindTintColorABGR(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.PropertyBindingInfo
        ): this;
        /**
         * Binds property {@link #getWorldMatrix worldMatrix} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindWorldMatrix(
          /**
           * The binding information
           */
          oBindingInfo: sap.ui.base.ManagedObject.PropertyBindingInfo
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.NodeProxy with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.NodeProxy>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getClosed closed}.
         *
         * The indicator showing if the node is closed. This property is read-only.
         */
        getClosed(): boolean;
        /**
         * Gets current value of property {@link #getHasChildren hasChildren}.
         *
         * The indicator showing if the node has child nodes. This property is read-only.
         */
        getHasChildren(): boolean;
        /**
         * Gets current value of property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node.
         */
        getLocalMatrix(): sap.ui.vk.TransformationMatrix;
        /**
         * get local rotation represented by axis and angle
         */
        getLocalRotationInAngleAxis(): float[];
        /**
         * get local rotation in Euler form
         */
        getLocalRotationInEuler(): float[];
        /**
         * get local rotation represented by quaternion
         */
        getLocalRotationInQuaternion(): float[];
        /**
         * get local scale vector
         */
        getLocalScale(): float[];
        /**
         * get local translate vector
         */
        getLocalTranslate(): float[];
        /**
         * Gets current value of property {@link #getMaterial material}.
         *
         * The material of the node (optional).
         */
        getMaterial(): sap.ui.vk.Material;
        /**
         * Returns a metadata object for class sap.ui.vk.NodeProxy.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * The name of the node. This property is read-only.
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getNodeMetadata nodeMetadata}.
         *
         * The node metadata. This property is read-only.
         */
        getNodeMetadata(): object;
        /**
         * Gets current value of property {@link #getNodeRef nodeRef}.
         *
         * The node reference. This property is read-only.
         */
        getNodeRef(): any;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * The node opacity.
         */
        getOpacity(): float;
        /**
         * Gets the scene reference that this NodeProxy object wraps.
         */
        getSceneRef(): any;
        /**
         * Gets current value of property {@link #getTintColor tintColor}.
         *
         * The tint color.
         */
        getTintColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getTintColorABGR tintColorABGR}.
         *
         * The tint color.
         *
         *
         * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material
         * color and tint color.
         */
        getTintColorABGR(): int;
        /**
         * Gets current value of property {@link #getVeIds veIds}.
         *
         * The node VE IDs. This property is read-only.
         */
        getVeIds(): object[];
        /**
         * Gets current value of property {@link #getWorldMatrix worldMatrix}.
         *
         * The world transformation matrix of the node.
         */
        getWorldMatrix(): sap.ui.vk.TransformationMatrix;
        /**
         * Sets a new value for property {@link #getClosed closed}.
         *
         * The indicator showing if the node is closed. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setClosed(
          /**
           * New value for property `closed`
           */
          bClosed: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHasChildren hasChildren}.
         *
         * The indicator showing if the node has child nodes. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHasChildren(
          /**
           * New value for property `hasChildren`
           */
          bHasChildren: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLocalMatrix(
          /**
           * New value for property `localMatrix`
           */
          sLocalMatrix: sap.ui.vk.TransformationMatrix
        ): this;
        /**
         * Sets a new value for property {@link #getMaterial material}.
         *
         * The material of the node (optional).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMaterial(
          /**
           * New value for property `material`
           */
          sMaterial: sap.ui.vk.Material
        ): this;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * The name of the node. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): this;
        /**
         * Sets a new value for property {@link #getNodeMetadata nodeMetadata}.
         *
         * The node metadata. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeMetadata(
          /**
           * New value for property `nodeMetadata`
           */
          oNodeMetadata: object
        ): this;
        /**
         * Sets a new value for property {@link #getNodeRef nodeRef}.
         *
         * The node reference. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeRef(
          /**
           * New value for property `nodeRef`
           */
          oNodeRef: any
        ): this;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * The node opacity.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity: float
        ): this;
        /**
         * Sets a new value for property {@link #getTintColor tintColor}.
         *
         * The tint color.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTintColor(
          /**
           * New value for property `tintColor`
           */
          sTintColor: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getTintColorABGR tintColorABGR}.
         *
         * The tint color.
         *
         *
         * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material
         * color and tint color.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTintColorABGR(
          /**
           * New value for property `tintColorABGR`
           */
          iTintColorABGR: int
        ): this;
        /**
         * Sets a new value for property {@link #getVeIds veIds}.
         *
         * The node VE IDs. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVeIds(
          /**
           * New value for property `veIds`
           */
          sVeIds: object[]
        ): this;
        /**
         * Sets a new value for property {@link #getWorldMatrix worldMatrix}.
         *
         * The world transformation matrix of the node.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWorldMatrix(
          /**
           * New value for property `worldMatrix`
           */
          sWorldMatrix: sap.ui.vk.TransformationMatrix
        ): this;
        /**
         * Unbinds property {@link #getLocalMatrix localMatrix} from model data.
         */
        unbindLocalMatrix(): this;
        /**
         * Unbinds property {@link #getOpacity opacity} from model data.
         */
        unbindOpacity(): this;
        /**
         * Unbinds property {@link #getTintColor tintColor} from model data.
         */
        unbindTintColor(): this;
        /**
         * Unbinds property {@link #getTintColorABGR tintColorABGR} from model data.
         */
        unbindTintColorABGR(): this;
        /**
         * Unbinds property {@link #getWorldMatrix worldMatrix} from model data.
         */
        unbindWorldMatrix(): this;
      }
      /**
       * @SINCE 1.38.0
       *
       * Provides the ability to display logged console messages within your application.
       */
      class Notifications extends sap.ui.core.Control {
        /**
         * Constructor for a new Notifications.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new Notifications control.
           */
          mSettings?: sap.ui.vk.$NotificationsSettings
        );
        /**
         * Constructor for a new Notifications.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Notifications control. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Notifications control.
           */
          mSettings?: sap.ui.vk.$NotificationsSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:allMessagesCleared allMessagesCleared} event
         * of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when all messages in the log are deleted.
         */
        attachAllMessagesCleared(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:allMessagesCleared allMessagesCleared} event
         * of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when all messages in the log are deleted.
         */
        attachAllMessagesCleared(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:messageAdded messageAdded} event of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when a new log message is added.
         */
        attachMessageAdded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:messageAdded messageAdded} event of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when a new log message is added.
         */
        attachMessageAdded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): this;
        /**
         * Clears the items in the Message Popover list.
         */
        clearAllMessages(): sap.ui.vk.Notifications;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:allMessagesCleared allMessagesCleared} event
         * of this `sap.ui.vk.Notifications`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachAllMessagesCleared(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:messageAdded messageAdded} event of this `sap.ui.vk.Notifications`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachMessageAdded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.Notifications with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Notifications>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:allMessagesCleared allMessagesCleared} to attached listeners.
         */
        fireAllMessagesCleared(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:messageAdded messageAdded} to attached listeners.
         */
        fireMessageAdded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Returns a metadata object for class sap.ui.vk.Notifications.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
      }
      /**
       * @SINCE 1.52.0
       *
       * Provides the interface for the orthographic camera.
       */
      class OrthographicCamera extends sap.ui.vk.Camera {
        /**
         * Constructor for a new OrthographicCamera.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.OrthographicCamera with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Camera.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.OrthographicCamera>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.OrthographicCamera.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getZoomFactor zoomFactor}.
         *
         * Camera zoom factor
         */
        getZoomFactor(): float;
        /**
         * Sets a new value for property {@link #getZoomFactor zoomFactor}.
         *
         * Camera zoom factor
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setZoomFactor(
          /**
           * New value for property `zoomFactor`
           */
          fZoomFactor: float
        ): this;
      }
      /**
       * @SINCE 1.92.0
       * @EXPERIMENTAL
       *
       * Aggregation element for the output settings of the Viewport
       */
      class OutputSettings extends sap.ui.core.Element {
        /**
         * Constructor for a new OutputSettings.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$OutputSettingsSettings
        );
        /**
         * Constructor for a new OutputSettings.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$OutputSettingsSettings
        );

        /**
         * Creates a new subclass of class sap.ui.vk.OutputSettings with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.OutputSettings>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDpi dpi}.
         *
         * density of the output, unit in dpi (dots-per-inch)
         */
        getDpi(): int;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * height of the output, unit in mm
         */
        getHeight(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.OutputSettings.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * width of the output, unit in mm
         */
        getWidth(): float;
        /**
         * Sets a new value for property {@link #getDpi dpi}.
         *
         * density of the output, unit in dpi (dots-per-inch)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDpi(
          /**
           * New value for property `dpi`
           */
          iDpi: int
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * height of the output, unit in mm
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          fHeight: float
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * width of the output, unit in mm
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth: float
        ): this;
      }
      /**
       * @SINCE 1.32.0
       *
       * Constructor for a new Overlay.
       */
      class Overlay extends sap.ui.core.Control {
        /**
         * Constructor for a new Overlay.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$OverlaySettings
        );
        /**
         * Constructor for a new Overlay.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$OverlaySettings
        );

        /**
         * Adds some area to the aggregation {@link #getAreas areas}.
         */
        addArea(
          /**
           * The area to add; if empty, nothing is inserted
           */
          oArea: sap.ui.vk.OverlayArea
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is clicked.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is clicked.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is right clicked/longPress(tap and hold).
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is right clicked/longPress(tap and hold).
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the areas in the aggregation {@link #getAreas areas}.
         */
        destroyAreas(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vk.Overlay`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.Overlay`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.Overlay with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Overlay>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Client coordinate X
             */
            clientX?: int;
            /**
             * Client coordinate Y
             */
            clientY?: int;
            /**
             * Coordinates of click position in format "x;y;0"
             */
            pos?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Coordinates of click position in format "x;y;0"
             */
            pos?: string;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Gets content of aggregation {@link #getAreas areas}.
         *
         * Aggregation of Highlight Areas.
         */
        getAreas(): sap.ui.vk.OverlayArea[];
        /**
         * Returns a metadata object for class sap.ui.vk.Overlay.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Trigger the interactive creation mode to get a position or position array.
         */
        getPositionInteractive(
          /**
           * Indicator if a single position or an array is requested
           */
          bPosArray: boolean,
          /**
           * Callback function func( sPosArray ) to be called when done. Position(array) sPosArray is provided in
           * format "x;y;0;..."
           */
          callback: Function
        ): boolean;
        /**
         * ID of the element which is the current target of the association {@link #getTarget target}, or `null`.
         */
        getTarget(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getZoomOnResize zoomOnResize}.
         *
         * Default value is `true`.
         */
        getZoomOnResize(): boolean;
        /**
         * Checks for the provided `sap.ui.vk.OverlayArea` in the aggregation {@link #getAreas areas}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfArea(
          /**
           * The area whose index is looked for
           */
          oArea: sap.ui.vk.OverlayArea
        ): int;
        /**
         * Inserts a area into the aggregation {@link #getAreas areas}.
         */
        insertArea(
          /**
           * The area to insert; if empty, nothing is inserted
           */
          oArea: sap.ui.vk.OverlayArea,
          /**
           * The `0`-based index the area should be inserted at; for a negative value of `iIndex`, the area is inserted
           * at position 0; for a value greater than the current size of the aggregation, the area is inserted at
           * the last position
           */
          iIndex: int
        ): this;
        /**
         * open the context menu
         */
        openContextMenu(
          /**
           * the context menu to be opened
           */
          oMenu: object
        ): void;
        /**
         * Removes all the controls from the aggregation {@link #getAreas areas}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllAreas(): sap.ui.vk.OverlayArea[];
        /**
         * Removes a area from the aggregation {@link #getAreas areas}.
         */
        removeArea(
          /**
           * The area to remove or its index or id
           */
          vArea: int | string | sap.ui.vk.OverlayArea
        ): sap.ui.vk.OverlayArea;
        /**
         * Reset the Overlay to its initial size and position.
         */
        reset(): sap.ui.vk.Overlay;
        /**
         * Pan and Zoom for the Overlay. The offsets `nDeltaX` and `nDeltaY` are applied to the current
         * center position. If zooming is involved as well the offsets are applied after the zooming.
         */
        setPanAndZoom(
          /**
           * the move of the center in x-direction in pixels
           */
          nDeltaX: int,
          /**
           * the move of the center in y-direction in pixels
           */
          nDeltaY: int,
          /**
           * the zoom factor to apply to the current state
           */
          fZoom: float
        ): void;
        /**
         * Sets the associated {@link #getTarget target}.
         */
        setTarget(
          /**
           * ID of an element which becomes the new target of this target association; alternatively, an element instance
           * may be given
           */
          oTarget: sap.ui.core.ID | sap.ui.core.Control
        ): this;
        /**
         * Sets a new value for property {@link #getZoomOnResize zoomOnResize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setZoomOnResize(
          /**
           * New value for property `zoomOnResize`
           */
          bZoomOnResize?: boolean
        ): this;
      }
      /**
       * @SINCE 1.32.0
       *
       * Aggregation element for the Overlay Control
       */
      class OverlayArea extends sap.ui.core.Element {
        /**
         * Constructor for a new OverlayArea.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$OverlayAreaSettings
        );
        /**
         * Constructor for a new OverlayArea.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$OverlayAreaSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a click action on an OverlayArea.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a click action on an OverlayArea.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is clicked.
         */
        attachEdgeClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is clicked.
         */
        attachEdgeClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is clicked.
         */
        attachHandleClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is clicked.
         */
        attachHandleClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is right clicked.
         */
        attachHandleContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is right clicked.
         */
        attachHandleContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is moved.
         */
        attachHandleMoved(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is moved.
         */
        attachHandleMoved(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeClick edgeClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeContextMenu edgeContextMenu} event of
         * this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleClick handleClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleContextMenu handleContextMenu} event
         * of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleMoved handleMoved} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleMoved(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.OverlayArea with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.OverlayArea>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Fires event {@link #event:edgeClick edgeClick} to attached listeners.
         */
        fireEdgeClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the
             * first position in the position array and end at the second.
             */
            index?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:edgeContextMenu edgeContextMenu} to attached listeners.
         */
        fireEdgeContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the
             * first position in the position array and end at the second.
             */
            index?: int;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Fires event {@link #event:handleClick handleClick} to attached listeners.
         */
        fireHandleClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:handleContextMenu handleContextMenu} to attached listeners.
         */
        fireHandleContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the clicked handle. The numbering is zero based.
             */
            index?: int;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): this;
        /**
         * Fires event {@link #event:handleMoved handleMoved} to attached listeners.
         */
        fireHandleMoved(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Gets current value of property {@link #getChangeable changeable}.
         *
         * Set to true if OverlayArea is changeable.
         *
         * Default value is `false`.
         */
        getChangeable(): boolean;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The fill color of the OverlayArea.
         *
         * Default value is `"rgba(200, 50, 50, 0.3)"`.
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the OverlayArea.
         *
         * Default value is `"rgba(200, 50, 50, 1.0)"`.
         */
        getColorBorder(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getColorNonSelect colorNonSelect}.
         *
         * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
         */
        getColorNonSelect(): string;
        /**
         * Gets current value of property {@link #getColorSelect colorSelect}.
         *
         * The select color of the OverlayArea in case selection highligthing is desired.
         */
        getColorSelect(): string;
        /**
         * Gets current value of property {@link #getDeltaColorHot deltaColorHot}.
         *
         * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(;;;)
         *
         * Default value is `"RHLSA(0;1.3;1.0;1.0)"`.
         */
        getDeltaColorHot(): string;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs a unique and stable identifier.
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.OverlayArea.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getSelect select}.
         *
         * set to true if the element is selected
         *
         * Default value is `false`.
         */
        getSelect(): boolean;
        /**
         * open the context menu
         */
        openContextMenu(
          /**
           * the context menu to be opened
           */
          oMenu: object
        ): void;
        /**
         * Sets a new value for property {@link #getChangeable changeable}.
         *
         * Set to true if OverlayArea is changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setChangeable(
          /**
           * New value for property `changeable`
           */
          bChangeable?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The fill color of the OverlayArea.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(200, 50, 50, 0.3)"`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the OverlayArea.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(200, 50, 50, 1.0)"`.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getColorNonSelect colorNonSelect}.
         *
         * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColorNonSelect(
          /**
           * New value for property `colorNonSelect`
           */
          sColorNonSelect?: string
        ): this;
        /**
         * Sets a new value for property {@link #getColorSelect colorSelect}.
         *
         * The select color of the OverlayArea in case selection highligthing is desired.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColorSelect(
          /**
           * New value for property `colorSelect`
           */
          sColorSelect?: string
        ): this;
        /**
         * Sets a new value for property {@link #getDeltaColorHot deltaColorHot}.
         *
         * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(;;;)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"RHLSA(0;1.3;1.0;1.0)"`.
         */
        setDeltaColorHot(
          /**
           * New value for property `deltaColorHot`
           */
          sDeltaColorHot?: string
        ): this;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs a unique and stable identifier.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey?: string
        ): this;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSelect select}.
         *
         * set to true if the element is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelect(
          /**
           * New value for property `select`
           */
          bSelect?: boolean
        ): this;
      }
      /**
       * @SINCE 1.52.0
       *
       * Provides the interface for the perspective camera.
       */
      class PerspectiveCamera extends sap.ui.vk.Camera {
        /**
         * Constructor for a new perspective camera.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.PerspectiveCamera with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Camera.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.PerspectiveCamera>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFov fov}.
         *
         * Camera frustum field of view in degree
         */
        getFov(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.PerspectiveCamera.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Sets a new value for property {@link #getFov fov}.
         *
         * Camera frustum field of view in degree
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFov(
          /**
           * New value for property `fov`
           */
          fFov: float
        ): this;
      }
      /**
       * @SINCE 1.50.0
       *
       * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator
       * is filled with a color. Additionally, a user-defined string can be displayed on the ProgressIndicator.
       */
      class ProgressIndicator extends sap.m.ProgressIndicator {
        /**
         * Constructor for a new ProgressIndicator.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ProgressIndicatorSettings
        );
        /**
         * Constructor for a new ProgressIndicator.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ProgressIndicatorSettings
        );
      }
      /**
       * @SINCE 1.89.0
       *
       * Provides a base class control for RedlineCollaborations.
       */
      class RedlineCollaboration extends sap.ui.core.Element {
        /**
         * Constructor for a new RedlineCollaboration.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Adds some conversation to the aggregation {@link #getConversations conversations}.
         */
        addConversation(
          /**
           * The conversation to add; if empty, nothing is inserted
           */
          oConversation: sap.ui.vk.RedlineConversation
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:conversationActivated conversationActivated}
         * event of this `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachConversationActivated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:conversationActivated conversationActivated}
         * event of this `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachConversationActivated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:conversationActivating conversationActivating}
         * event of this `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachConversationActivating(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:conversationActivating conversationActivating}
         * event of this `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachConversationActivating(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementClicked elementClicked} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachElementClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementClicked elementClicked} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachElementClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachElementCreated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachElementCreated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementHovered elementHovered} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachElementHovered(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementHovered elementHovered} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineCollaboration` itself.
         */
        attachElementHovered(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineCollaboration` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the conversations in the aggregation {@link #getConversations conversations}.
         */
        destroyConversations(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:conversationActivated conversationActivated}
         * event of this `sap.ui.vk.RedlineCollaboration`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachConversationActivated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:conversationActivating conversationActivating}
         * event of this `sap.ui.vk.RedlineCollaboration`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachConversationActivating(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:elementClicked elementClicked} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachElementClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachElementCreated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:elementHovered elementHovered} event of this
         * `sap.ui.vk.RedlineCollaboration`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachElementHovered(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineCollaboration with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineCollaboration>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:conversationActivated conversationActivated} to attached listeners.
         */
        fireConversationActivated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            conversation?: sap.ui.vk.RedlineConversation;

            viewportLocked?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:conversationActivating conversationActivating} to attached listeners.
         */
        fireConversationActivating(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            conversation?: sap.ui.vk.RedlineConversation;
          }
        ): this;
        /**
         * Fires event {@link #event:elementClicked elementClicked} to attached listeners.
         */
        fireElementClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            elementId?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:elementCreated elementCreated} to attached listeners.
         */
        fireElementCreated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            element?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:elementHovered elementHovered} to attached listeners.
         */
        fireElementHovered(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            elementId?: string;
          }
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getActiveComment activeComment},
         * or `null`.
         */
        getActiveComment(): sap.ui.core.ID;
        /**
         * ID of the element which is the current target of the association {@link #getActiveConversation activeConversation},
         * or `null`.
         */
        getActiveConversation(): sap.ui.core.ID;
        /**
         * Gets content of aggregation {@link #getConversations conversations}.
         *
         * A list of available conversations.
         */
        getConversations(): sap.ui.vk.RedlineConversation[];
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineCollaboration.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * ID of the element which is the current target of the association {@link #getViewport viewport}, or `null`.
         */
        getViewport(): sap.ui.core.ID;
        /**
         * Checks for the provided `sap.ui.vk.RedlineConversation` in the aggregation {@link #getConversations conversations}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfConversation(
          /**
           * The conversation whose index is looked for
           */
          oConversation: sap.ui.vk.RedlineConversation
        ): int;
        /**
         * Inserts a conversation into the aggregation {@link #getConversations conversations}.
         */
        insertConversation(
          /**
           * The conversation to insert; if empty, nothing is inserted
           */
          oConversation: sap.ui.vk.RedlineConversation,
          /**
           * The `0`-based index the conversation should be inserted at; for a negative value of `iIndex`, the conversation
           * is inserted at position 0; for a value greater than the current size of the aggregation, the conversation
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getConversations conversations}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllConversations(): sap.ui.vk.RedlineConversation[];
        /**
         * Removes a conversation from the aggregation {@link #getConversations conversations}.
         */
        removeConversation(
          /**
           * The conversation to remove or its index or id
           */
          vConversation: int | string | sap.ui.vk.RedlineConversation
        ): sap.ui.vk.RedlineConversation;
        /**
         * Sets the associated {@link #getActiveComment activeComment}.
         */
        setActiveComment(
          /**
           * ID of an element which becomes the new target of this activeComment association; alternatively, an element
           * instance may be given
           */
          oActiveComment:
            | sap.ui.core.ID
            | /* was: sap.ui.vk.RedlineComment */ any
        ): this;
      }
      /**
       * @SINCE 1.89.0
       *
       * Provides a base class control for RedlineConversations.
       */
      class RedlineConversation extends sap.ui.core.Element {
        /**
         * Constructor for a new RedlineConversation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Adds some comment to the aggregation {@link #getComments comments}.
         */
        addComment(
          /**
           * The comment to add; if empty, nothing is inserted
           */
          oComment: sap.ui.vk.RedlineElementComment
        ): this;
        /**
         * Destroys all the comments in the aggregation {@link #getComments comments}.
         */
        destroyComments(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineConversation with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineConversation>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAnimationOffset animationOffset}.
         *
         * Default value is `0`.
         */
        getAnimationOffset(): float;
        /**
         * Gets content of aggregation {@link #getComments comments}.
         */
        getComments(): sap.ui.vk.RedlineElementComment[];
        /**
         * Gets current value of property {@link #getConversationName conversationName}.
         */
        getConversationName(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineConversation.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getTimestamp timestamp}.
         */
        getTimestamp(): int;
        /**
         * Gets current value of property {@link #getViewId viewId}.
         *
         * Default value is `empty string`.
         */
        getViewId(): string;
        /**
         * Gets current value of property {@link #getViewInfo viewInfo}.
         */
        getViewInfo(): any;
        /**
         * Checks for the provided `sap.ui.vk.RedlineElementComment` in the aggregation {@link #getComments comments}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfComment(
          /**
           * The comment whose index is looked for
           */
          oComment: sap.ui.vk.RedlineElementComment
        ): int;
        /**
         * Inserts a comment into the aggregation {@link #getComments comments}.
         */
        insertComment(
          /**
           * The comment to insert; if empty, nothing is inserted
           */
          oComment: sap.ui.vk.RedlineElementComment,
          /**
           * The `0`-based index the comment should be inserted at; for a negative value of `iIndex`, the comment
           * is inserted at position 0; for a value greater than the current size of the aggregation, the comment
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getComments comments}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllComments(): sap.ui.vk.RedlineElementComment[];
        /**
         * Removes a comment from the aggregation {@link #getComments comments}.
         */
        removeComment(
          /**
           * The comment to remove or its index or id
           */
          vComment: int | string | sap.ui.vk.RedlineElementComment
        ): sap.ui.vk.RedlineElementComment;
        /**
         * Sets a new value for property {@link #getAnimationOffset animationOffset}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setAnimationOffset(
          /**
           * New value for property `animationOffset`
           */
          fAnimationOffset?: float
        ): this;
        /**
         * Sets a new value for property {@link #getConversationName conversationName}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setConversationName(
          /**
           * New value for property `conversationName`
           */
          sConversationName: string
        ): this;
        /**
         * Sets a new value for property {@link #getTimestamp timestamp}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTimestamp(
          /**
           * New value for property `timestamp`
           */
          iTimestamp: int
        ): this;
        /**
         * Sets a new value for property {@link #getViewId viewId}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setViewId(
          /**
           * New value for property `viewId`
           */
          sViewId?: string
        ): this;
        /**
         * Sets a new value for property {@link #getViewInfo viewInfo}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setViewInfo(
          /**
           * New value for property `viewInfo`
           */
          oViewInfo?: any
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for designing redlining shapes.
       */
      class RedlineDesign extends sap.ui.vk.RedlineSurface {
        /**
         * Constructor for a new RedlineDesign.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineDesign`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineDesign` itself.
         */
        attachElementCreated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineDesign` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineDesign`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineDesign` itself.
         */
        attachElementCreated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineDesign` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineDesign`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachElementCreated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineDesign with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineSurface.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineDesign>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:elementCreated elementCreated} to attached listeners.
         */
        fireElementCreated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            element?: object;
          }
        ): this;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineDesign.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Prepares the RedlineDesign control for adding a new instance of {sap.ui.vk.RedlineElement}.
         */
        startAdding(
          /**
           * The redlining element which needs to be added.
           */
          elementInstance: sap.ui.vk.RedlineElement
        ): sap.ui.vk.RedlineDesign;
        /**
         * Stops the mode for adding redlining, which begins when the {@link sap.ui.vk.RedlineDesign#startAdding
         * startAdding} method is called.
         */
        stopAdding(): sap.ui.vk.RedlineDesign;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a base class for redline elements.
       */
      class RedlineElement extends sap.ui.core.Element {
        /**
         * Base class for redline elements such as {@link sap.ui.vk.RedlineElementRectangle}, {@link sap.ui.vk.RedlineElementEllipse},
         * {@link sap.ui.vk.RedlineElementFreehand}, {@link sap.ui.vk.RedlineElementLine}, {@link sap.ui.vk.RedlineElementText}.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Exports all the relevant data contained in the redline element to a JSON-like object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the redline element to an SVG shape element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElement with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElement>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCreatedByUser createdByUser}.
         *
         * Default value is `empty string`.
         */
        getCreatedByUser(): any;
        /**
         * Gets current value of property {@link #getCreateTimestamp createTimestamp}.
         */
        getCreateTimestamp(): int;
        /**
         * Gets current value of property {@link #getDeletedByUser deletedByUser}.
         *
         * Default value is `empty string`.
         */
        getDeletedByUser(): any;
        /**
         * Gets current value of property {@link #getDeleteTimestamp deleteTimestamp}.
         */
        getDeleteTimestamp(): int;
        /**
         * Gets current value of property {@link #getHalo halo}.
         *
         * Default value is `false`.
         */
        getHalo(): boolean;
        /**
         * Gets current value of property {@link #getHaloColor haloColor}.
         *
         * Default value is `"rgba(255, 0, 0, 1)"`.
         */
        getHaloColor(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElement.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * Default value is `1`.
         */
        getOpacity(): float;
        /**
         * Gets current value of property {@link #getOriginX originX}.
         *
         * Default value is `0`.
         */
        getOriginX(): float;
        /**
         * Gets current value of property {@link #getOriginY originY}.
         *
         * Default value is `0`.
         */
        getOriginY(): float;
        /**
         * Gets current value of property {@link #getStrokeColor strokeColor}.
         *
         * Default value is `"#e6600d"`.
         */
        getStrokeColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getStrokeDashArray strokeDashArray}.
         *
         * Default value is `[]`.
         */
        getStrokeDashArray(): float[];
        /**
         * Gets current value of property {@link #getStrokeWidth strokeWidth}.
         *
         * Default value is `2`.
         */
        getStrokeWidth(): float;
        /**
         * Gets current value of property {@link #getSuppress suppress}.
         *
         * Default value is `false`.
         */
        getSuppress(): boolean;
        /**
         * Imports data from a JSON-like object into the redline element.
         */
        importJSON(
          /**
           * Relevant data that can be used to restore the redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElement;
        /**
         * Imports data from an SVG shape element into the redline element.
         */
        importSVG(
          /**
           * SVG shape element that can be used to restore the redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElement;
        /**
         * This method is called by the RenderManager. The current method is empty because this is a base class
         * and the classes extending this class have their own implementations of the `render` method.
         */
        render(
          /**
           * Instance of RenderManager.
           */
          renderManager: sap.ui.core.RenderManager
        ): void;
        /**
         * This method is called by the RenderManager. The current method is empty because this is a base class
         * and the classes extending this class have their own implementations of the `render` method.
         */
        renderElement(
          /**
           * Instance of RenderManager.
           */
          renderManager: sap.ui.core.RenderManager,
          /**
           * If set to true then halo effect is rendered, otherwise this will do normal object rendering
           */
          halo: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getCreatedByUser createdByUser}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setCreatedByUser(
          /**
           * New value for property `createdByUser`
           */
          oCreatedByUser?: any
        ): this;
        /**
         * Sets a new value for property {@link #getCreateTimestamp createTimestamp}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCreateTimestamp(
          /**
           * New value for property `createTimestamp`
           */
          iCreateTimestamp?: int
        ): this;
        /**
         * Sets a new value for property {@link #getDeletedByUser deletedByUser}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setDeletedByUser(
          /**
           * New value for property `deletedByUser`
           */
          oDeletedByUser?: any
        ): this;
        /**
         * Sets a new value for property {@link #getDeleteTimestamp deleteTimestamp}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDeleteTimestamp(
          /**
           * New value for property `deleteTimestamp`
           */
          iDeleteTimestamp?: int
        ): this;
        /**
         * Sets a new value for property {@link #getHalo halo}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setHalo(
          /**
           * New value for property `halo`
           */
          bHalo?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHaloColor haloColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(255, 0, 0, 1)"`.
         */
        setHaloColor(
          /**
           * New value for property `haloColor`
           */
          sHaloColor?: string
        ): this;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity?: float
        ): this;
        /**
         * Sets a new value for property {@link #getOriginX originX}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setOriginX(
          /**
           * New value for property `originX`
           */
          fOriginX?: float
        ): this;
        /**
         * Sets a new value for property {@link #getOriginY originY}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setOriginY(
          /**
           * New value for property `originY`
           */
          fOriginY?: float
        ): this;
        /**
         * Sets a new value for property {@link #getStrokeColor strokeColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"#e6600d"`.
         */
        setStrokeColor(
          /**
           * New value for property `strokeColor`
           */
          sStrokeColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getStrokeDashArray strokeDashArray}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setStrokeDashArray(
          /**
           * New value for property `strokeDashArray`
           */
          sStrokeDashArray?: float[]
        ): this;
        /**
         * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `2`.
         */
        setStrokeWidth(
          /**
           * New value for property `strokeWidth`
           */
          fStrokeWidth?: float
        ): this;
        /**
         * Sets a new value for property {@link #getSuppress suppress}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSuppress(
          /**
           * New value for property `suppress`
           */
          bSuppress?: boolean
        ): this;
      }
      /**
       * @SINCE 1.89.0
       *
       * Provides a control for creating RedlineElementComments.
       */
      class RedlineElementComment extends sap.ui.core.Element {
        /**
         * Redline element control for comment.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementComment with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElementComment>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCreatedByUser createdByUser}.
         *
         * Default value is `empty string`.
         */
        getCreatedByUser(): any;
        /**
         * Gets current value of property {@link #getCreateTimestamp createTimestamp}.
         */
        getCreateTimestamp(): int;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementComment.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Default value is `empty string`.
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getCreatedByUser createdByUser}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setCreatedByUser(
          /**
           * New value for property `createdByUser`
           */
          oCreatedByUser?: any
        ): this;
        /**
         * Sets a new value for property {@link #getCreateTimestamp createTimestamp}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCreateTimestamp(
          /**
           * New value for property `createTimestamp`
           */
          iCreateTimestamp?: int
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating ellipse redline elements.
       */
      class RedlineElementEllipse extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for ellipse.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current radiusX and radiusY of the ellipse redline element by a factor which gets passed
         * as parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current radiusX and radiusY.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Changes the current radiusX and radiusY of the ellipse redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as radiusX for the ellipse.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as radiusY for the ellipse.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Exports all the relevant data contained in the ellipse redline element to a JSON object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the ellipse redline element to an SVG ellipse element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementEllipse with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElementEllipse>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFillColor fillColor}.
         *
         * Default value is `"rgba(0, 0, 0, 0)"`.
         */
        getFillColor(): sap.ui.core.CSSColor;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementEllipse.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getRadiusX radiusX}.
         *
         * Default value is `0.0001`.
         */
        getRadiusX(): float;
        /**
         * Gets current value of property {@link #getRadiusY radiusY}.
         *
         * Default value is `0.0001`.
         */
        getRadiusY(): float;
        /**
         * Imports data from a JSON object into the ellipse redline element.
         */
        importJSON(
          /**
           * Relevant data used to restore the ellipse redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Imports data from an SVG ellipse element into the ellipse redline element.
         */
        importSVG(
          /**
           * SVG ellipse element used to restore the ellipse redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Sets a new value for property {@link #getFillColor fillColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 0)"`.
         */
        setFillColor(
          /**
           * New value for property `fillColor`
           */
          sFillColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getRadiusX radiusX}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0001`.
         */
        setRadiusX(
          /**
           * New value for property `radiusX`
           */
          fRadiusX?: float
        ): this;
        /**
         * Sets a new value for property {@link #getRadiusY radiusY}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0001`.
         */
        setRadiusY(
          /**
           * New value for property `radiusY`
           */
          fRadiusY?: float
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating freehand redline elements.
       */
      class RedlineElementFreehand extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for freehand.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a string path based on the current `path` property. The string path can then be used to set the
         * "d" attribute of an SVG  element.
         */
        _getProcessedPath(): string;
        /**
         * Applies a zoom factor to the current freehand redline element.
         */
        applyZoom(
          /**
           * The factor to be applied to the current freehand drawing.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Adds a new point to the current freehand path.
         */
        edit(
          /**
           * The value in pixels that will be set as the origin of the x-coordinate for a new point in the freehand
           * path.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as the origin of the y-coordinate for a new point in the freehand
           * path.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Exports all the relevant data contained in the freehand redline element to a JSON object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the freehand redline element to an SVG path element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementFreehand with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElementFreehand>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementFreehand.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPath path}.
         */
        getPath(): float[];
        /**
         * Imports data from JSON into the redline element.
         */
        importJSON(
          /**
           * Relevant data that can be used to restore the freehand redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Imports data from SVG path element into the freehand redline element.
         */
        importSVG(
          /**
           * SVG path element that can be used to restore the freehand redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Sets a new value for property {@link #getPath path}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPath(
          /**
           * New value for property `path`
           */
          sPath?: float[]
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating line redline elements.
       */
      class RedlineElementLine extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for line.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current deltaX and deltaY of the line redline element by a factor which gets passed as parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current deltaX and deltaY.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Changes the current deltaX and deltaY of the line redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as deltaX for the line.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as deltaY for the line.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Exports all the relevant data contained in the line redline element to a JSON object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the line redline element to an SVG line element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementLine with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElementLine>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDeltaX deltaX}.
         *
         * Default value is `0`.
         */
        getDeltaX(): float;
        /**
         * Gets current value of property {@link #getDeltaY deltaY}.
         *
         * Default value is `0`.
         */
        getDeltaY(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementLine.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Imports data from a JSON object into the line redline element.
         */
        importJSON(
          /**
           * Relevant data used to restore the line redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Imports data from an SVG line element into the line redline element.
         */
        importSVG(
          /**
           * SVG line element used to restore the line redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Sets a new value for property {@link #getDeltaX deltaX}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setDeltaX(
          /**
           * New value for property `deltaX`
           */
          fDeltaX?: float
        ): this;
        /**
         * Sets a new value for property {@link #getDeltaY deltaY}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setDeltaY(
          /**
           * New value for property `deltaY`
           */
          fDeltaY?: float
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating rectangle redline elements.
       */
      class RedlineElementRectangle extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for rectangle.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current width and height of the rectangle redline element by a factor which gets passed as
         * parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current width and height.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Changes the current width and height of the rectangle redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as the width for the rectangle redline element.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as the height for the rectangle redline element.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Exports all the relevant data contained in the rectangle redline element to a JSON object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the rectangle redline element to an SVG rect element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementRectangle with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElementRectangle>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFillColor fillColor}.
         *
         * Default value is `"rgba(0, 0, 0, 0)"`.
         */
        getFillColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Default value is `0.001`.
         */
        getHeight(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementRectangle.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Default value is `0.001`.
         */
        getWidth(): float;
        /**
         * Imports data from a JSON object into the rectangle redline element.
         */
        importJSON(
          /**
           * Relevant data used to restore the rectangle redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Imports data from an SVG rect element into the rectangle redline element.
         */
        importSVG(
          /**
           * SVG rect element used to restore the rectangle redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Sets a new value for property {@link #getFillColor fillColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0, 0, 0, 0)"`.
         */
        setFillColor(
          /**
           * New value for property `fillColor`
           */
          sFillColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.001`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          fHeight?: float
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.001`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth?: float
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating text redline elements.
       */
      class RedlineElementText extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for text.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current font size of the text redline element by a factor which gets passed as parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current font size.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementText;
        /**
         * Changes the current originX and originY of the text redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as originX for the text.
           */
          posX: number,
          /**
           * The value in pixels that will be set as originY for the text.
           */
          posY: number
        ): sap.ui.vk.RedlineElementText;
        /**
         * Exports all the relevant data contained in the text redline element to a JSON object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the text redline element to an SVG text element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementText with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineElementText>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFillColor fillColor}.
         *
         * Default value is `"rgba(0,0,0,0)"`.
         */
        getFillColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getFont font}.
         *
         * Default value is `empty string`.
         */
        getFont(): string;
        /**
         * Gets current value of property {@link #getFontSize fontSize}.
         *
         * Default value is `32`.
         */
        getFontSize(): float;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementText.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Default value is `"Text"`.
         */
        getText(): string;
        /**
         * Imports data from a JSON object into the text redline element.
         */
        importJSON(
          /**
           * Relevant data used to restore the text redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementText;
        /**
         * Imports data from an SVG text element into the text redline element.
         */
        importSVG(
          /**
           * SVG text element used to restore the text redline element.
           */
          element: object
        ): sap.ui.vk.RedlineElementText;
        /**
         * Sets a new value for property {@link #getFillColor fillColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(0,0,0,0)"`.
         */
        setFillColor(
          /**
           * New value for property `fillColor`
           */
          sFillColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getFont font}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setFont(
          /**
           * New value for property `font`
           */
          sFont?: string
        ): this;
        /**
         * Sets a new value for property {@link #getFontSize fontSize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `32`.
         */
        setFontSize(
          /**
           * New value for property `fontSize`
           */
          fFontSize?: float
        ): this;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"Text"`.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText?: string
        ): this;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a bass class control for redlining.
       */
      class RedlineSurface extends sap.ui.core.Control {
        /**
         * Constructor for a new RedlineSurface.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Adds some redlineElement to the aggregation {@link #getRedlineElements redlineElements}.
         */
        addRedlineElement(
          /**
           * The redlineElement to add; if empty, nothing is inserted
           */
          oRedlineElement: sap.ui.vk.RedlineElement
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachPan(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachPan(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachZoom(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachZoom(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the redlineElements in the aggregation {@link #getRedlineElements redlineElements}.
         */
        destroyRedlineElements(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:pan pan} event of this `sap.ui.vk.RedlineSurface`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachPan(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:zoom zoom} event of this `sap.ui.vk.RedlineSurface`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachZoom(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Exports all the current redline elements as an array of JSON objects.
         */
        exportJSON(): object[];
        /**
         * Exports all the current redline elements as an array of SVG objects.
         */
        exportSVG(): object[];
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineSurface with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.RedlineSurface>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:pan pan} to attached listeners.
         */
        firePan(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            deltaX?: float;

            deltaY?: float;
          }
        ): this;
        /**
         * Fires event {@link #event:zoom zoom} to attached listeners.
         */
        fireZoom(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            originX?: float;

            originY?: float;

            zoomFactor?: float;
          }
        ): this;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineSurface.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getPanningRatio panningRatio}.
         *
         * Default value is `1`.
         */
        getPanningRatio(): float;
        /**
         * Gets content of aggregation {@link #getRedlineElements redlineElements}.
         */
        getRedlineElements(): sap.ui.vk.RedlineElement[];
        /**
         * Gets current value of property {@link #getVirtualLeft virtualLeft}.
         */
        getVirtualLeft(): float;
        /**
         * Gets current value of property {@link #getVirtualSideLength virtualSideLength}.
         */
        getVirtualSideLength(): float;
        /**
         * Gets current value of property {@link #getVirtualTop virtualTop}.
         */
        getVirtualTop(): float;
        /**
         * Iterates through all JSON objects from the array passed as parameter, and creates and restores the redline
         * elements serialized in the array.
         */
        importJSON(
          /**
           * An array of serialized redline elements.
           */
          jsonElements: object[]
        ): sap.ui.vk.RedlineSurface;
        /**
         * Iterates through all SVG objects from the array passed as parameter, and creates and restores the redline
         * elements in the array.
         */
        importSVG(
          /**
           * An array of redline elements in SVG format.
           */
          svg: object[]
        ): sap.ui.vk.RedlineSurface;
        /**
         * Checks for the provided `sap.ui.vk.RedlineElement` in the aggregation {@link #getRedlineElements redlineElements}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfRedlineElement(
          /**
           * The redlineElement whose index is looked for
           */
          oRedlineElement: sap.ui.vk.RedlineElement
        ): int;
        /**
         * Inserts a redlineElement into the aggregation {@link #getRedlineElements redlineElements}.
         */
        insertRedlineElement(
          /**
           * The redlineElement to insert; if empty, nothing is inserted
           */
          oRedlineElement: sap.ui.vk.RedlineElement,
          /**
           * The `0`-based index the redlineElement should be inserted at; for a negative value of `iIndex`, the redlineElement
           * is inserted at position 0; for a value greater than the current size of the aggregation, the redlineElement
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getRedlineElements redlineElements}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllRedlineElements(): sap.ui.vk.RedlineElement[];
        /**
         * Removes a redlineElement from the aggregation {@link #getRedlineElements redlineElements}.
         */
        removeRedlineElement(
          /**
           * The redlineElement to remove or its index or id
           */
          vRedlineElement: int | string | sap.ui.vk.RedlineElement
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getPanningRatio panningRatio}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setPanningRatio(
          /**
           * New value for property `panningRatio`
           */
          fPanningRatio?: float
        ): this;
        /**
         * Sets a new value for property {@link #getVirtualLeft virtualLeft}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualLeft(
          /**
           * New value for property `virtualLeft`
           */
          fVirtualLeft: float
        ): this;
        /**
         * Sets a new value for property {@link #getVirtualSideLength virtualSideLength}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualSideLength(
          /**
           * New value for property `virtualSideLength`
           */
          fVirtualSideLength: float
        ): this;
        /**
         * Sets a new value for property {@link #getVirtualTop virtualTop}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualTop(
          /**
           * New value for property `virtualTop`
           */
          fVirtualTop: float
        ): this;
        /**
         * Updates the panning ratio by making calculations based on virtual viewport size and actual viewport size.
         */
        updatePanningRatio(): sap.ui.vk.RedlineSurface;
      }
      /**
       * SafeArea allows applications to define area of viewport which will be initially displayed regardless
       * of viewing device and its screen resolution or orientation.
       */
      class SafeArea extends sap.ui.core.Control {
        /**
         * Constructor for a new SafeArea.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Destroys the settingsControl in the aggregation {@link #getSettingsControl settingsControl}.
         */
        destroySettingsControl(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.SafeArea with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.SafeArea>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.SafeArea.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets content of aggregation {@link #getSettingsControl settingsControl}.
         *
         * Application defined setting control which can be used to control SafeArea and aspect ratio settings
         */
        getSettingsControl(): sap.ui.core.Control;
        /**
         * Sets the aggregated {@link #getSettingsControl settingsControl}.
         */
        setSettingsControl(
          /**
           * The settingsControl to set
           */
          oSettingsControl: sap.ui.core.Control
        ): this;
      }
      /**
       * Provides the interface for the 3D model.
       *
       * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
       * sap.ui.vk.ContentConnector}.
       */
      class Scene extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Scene.
         *
         * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
         * sap.ui.vk.ContentConnector}.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Add a sequence to the scene
         */
        addSequence(
          /**
           * sequence to add
           */
          sequence: /* was: sap.ui.vk.AnimationSequence */ any
        ): sap.ui.vk.Scene;
        /**
         * Add an animation track to the scene
         */
        addTrack(
          /**
           * animation track to add
           */
          track: /* was: sap.ui.vk.AnimationTrack */ any
        ): sap.ui.vk.Scene;
        /**
         * Creates a highlight.
         */
        createHighlight(
          /**
           * persistent highlight ID
           */
          sId: string,
          /**
           * highlight creation parameters
           */
          parameters: any
        ): /* was: sap.ui.vk.Highlight */ any;
        /**
         * Creates an animation sequence.
         */
        createSequence(
          /**
           * persistent sequence ID
           */
          sId: string,
          /**
           * sequence creation parameters
           */
          parameters: any
        ): /* was: sap.ui.vk.AnimationSequence */ any;
        /**
         * Creates an animation track.
         */
        createTrack(
          /**
           * persistent track ID
           */
          sId: string,
          /**
           * track creation parameters
           */
          parameters: any
        ): /* was: sap.ui.vk.AnimationTrack */ any;
        /**
         * Creates a new subclass of class sap.ui.vk.Scene with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Scene>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Finds sequence by ID
         */
        findSequence(
          /**
           * sequence ID
           */
          sequenceId: string
        ): /* was: sap.ui.vk.AnimationSequence */ any;
        /**
         * Finds track by ID
         */
        findTrack(
          /**
           * track ID
           */
          trackId: string
        ): /* was: sap.ui.vk.AnimationTrack */ any;
        /**
         * Gets the default node hierarchy in the Scene object.
         */
        getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
        /**
         * Gets current value of property {@link #getDoubleSided doubleSided}.
         *
         * Enables or disables double-sided materials
         *
         * Default value is `false`.
         */
        getDoubleSided(): boolean;
        /**
         * get highlight according to ID
         */
        getHighlight(
          /**
           * persistent highlight ID
           */
          sId: string
        ): /* was: sap.ui.vk.Highlight */ any;
        /**
         * Gets the unique ID of the Scene object.
         */
        getId(): string;
        /**
         * Get initial view
         */
        getInitialView(): sap.ui.vk.View;
        /**
         * Returns a metadata object for class sap.ui.vk.Scene.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets the scene reference that this Scene object wraps.
         */
        getSceneRef(): any;
        /**
         * Gets a list of sequences
         */
        getSequences(): /* was: sap.ui.vk.AnimationSequence */ any[];
        /**
         * Gets a list of animation tracks
         */
        getTracks(): /* was: sap.ui.vk.AnimationTrack */ any[];
        /**
         * Provides an array of all ViewGroups
         */
        getViewGroups(): sap.ui.vk.ViewGroup[];
        /**
         * Provides an array of all views
         */
        getViews(): sap.ui.vk.View[];
        /**
         * Gets index of a sequence in the scene
         */
        indexOfSequence(
          /**
           * sequence to locate
           */
          sequence: /* was: sap.ui.vk.AnimationSequence */ any
        ): int;
        /**
         * Gets index of an animation track in the scene
         */
        indexOfTrack(
          /**
           * animation track to locate
           */
          track: /* was: sap.ui.vk.AnimationTrack */ any
        ): int;
        /**
         * Inserts a sequence
         */
        insertSequence(
          /**
           * sequence to insert
           */
          sequence: /* was: sap.ui.vk.AnimationSequence */ any,
          /**
           * index where to insert the sequence
           */
          index: int
        ): sap.ui.vk.Scene;
        /**
         * Inserts an animation track
         */
        insertTrack(
          /**
           * animation track to insert
           */
          track: /* was: sap.ui.vk.AnimationTrack */ any,
          /**
           * index where to insert the animation track
           */
          index: int
        ): sap.ui.vk.Scene;
        /**
         * remove highlight according to ID
         */
        removeHighlight(
          /**
           * persistent highlight ID
           */
          sId: string
        ): sap.ui.vk.Scene;
        /**
         * Removes a sequence from the scene
         */
        removeSequence(
          /**
           * sequence to remove
           */
          sequence: /* was: sap.ui.vk.AnimationSequence */ any
        ): sap.ui.vk.Scene;
        /**
         * Removes all sequences from the scene
         */
        removeSequences(): sap.ui.vk.Scene;
        /**
         * Removes an animation track from the scene
         */
        removeTrack(
          /**
           * animation track to remove
           */
          track: /* was: sap.ui.vk.AnimationTrack */ any
        ): sap.ui.vk.Scene;
        /**
         * Removes all animation tracks from the scene
         */
        removeTracks(): sap.ui.vk.Scene;
        /**
         * Sets a new value for property {@link #getDoubleSided doubleSided}.
         *
         * Enables or disables double-sided materials
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDoubleSided(
          /**
           * New value for property `doubleSided`
           */
          bDoubleSided?: boolean
        ): this;
        /**
         * Set initial view
         */
        setInitialView(
          /**
           * intial view
           */
          view: sap.ui.vk.View
        ): void;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides a hierarchical view of all the nodes in a given scene in table format.
       */
      class SceneTree extends sap.ui.core.Control {
        /**
         * Constructor for a new SceneTree.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$SceneTreeSettings
        );
        /**
         * Constructor for a new SceneTree.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.ui.vk.$SceneTreeSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChanged contentChanged} event of this
         * `sap.ui.vk.SceneTree`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.SceneTree` itself.
         *
         * This event will be fired when a scene tree content is replaced.
         */
        attachContentChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.SceneTree` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChanged contentChanged} event of this
         * `sap.ui.vk.SceneTree`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.SceneTree` itself.
         *
         * This event will be fired when a scene tree content is replaced.
         */
        attachContentChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.SceneTree` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys the treeTable in the aggregation {@link #getTreeTable treeTable}.
         */
        destroyTreeTable(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChanged contentChanged} event of this
         * `sap.ui.vk.SceneTree`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.SceneTree with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.SceneTree>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChanged contentChanged} to attached listeners.
         */
        fireContentChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.ui.vk.SceneTree.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getShowSearchField showSearchField}.
         *
         * Default value is `true`.
         */
        getShowSearchField(): boolean;
        /**
         * Gets current value of property {@link #getShowTitle showTitle}.
         *
         * Default value is `true`.
         */
        getShowTitle(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Default value is `...see text or source`.
         */
        getTitle(): string;
        /**
         * Gets content of aggregation {@link #getTreeTable treeTable}.
         */
        getTreeTable(): /* was: sap.ui.table.TreeTable */ any;
        /**
         * ID of the element which is the current target of the association {@link #getViewStateManager viewStateManager},
         * or `null`.
         */
        getViewStateManager(): sap.ui.core.ID;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): this;
        /**
         * Sets a new value for property {@link #getShowSearchField showSearchField}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSearchField(
          /**
           * New value for property `showSearchField`
           */
          bShowSearchField?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowTitle showTitle}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowTitle(
          /**
           * New value for property `showTitle`
           */
          bShowTitle?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `...see text or source`.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle?: string
        ): this;
        /**
         * Sets the aggregated {@link #getTreeTable treeTable}.
         */
        setTreeTable(
          /**
           * The treeTable to set
           */
          oTreeTable: /* was: sap.ui.table.TreeTable */ any
        ): this;
        /**
         * Sets the associated {@link #getViewStateManager viewStateManager}.
         */
        setViewStateManager(
          /**
           * ID of an element which becomes the new target of this viewStateManager association; alternatively, an
           * element instance may be given
           */
          oViewStateManager: sap.ui.core.ID | sap.ui.vk.ViewStateManagerBase
        ): this;
      }
      /**
       * @SINCE 1.32.0
       * @deprecated (since 1.72.0)
       *
       * Enables capabilities for navigating and activating procedures and steps contained in a single 3D scene.
       */
      class StepNavigation extends sap.ui.core.Control {
        /**
         * Constructor for a new StepNavigation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new Step Navigation control.
           */
          mSettings?: sap.ui.vk.$StepNavigationSettings
        );
        /**
         * Constructor for a new StepNavigation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control. This ID is generated automatically if no ID is provided.
           */
          sId?: string,
          /**
           * Initial settings for the new Step Navigation control.
           */
          mSettings?: sap.ui.vk.$StepNavigationSettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         */
        attachResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         */
        attachResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stepChanged stepChanged} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         *
         * Raised each time a step starts, changes, or finishes.
         */
        attachStepChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stepChanged stepChanged} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         *
         * Raised each time a step starts, changes, or finishes.
         */
        attachStepChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): this;
        /**
         * Clears the content of the Step Navigation control.
         */
        clear(): boolean;
        /**
         * Destroys the layout in the aggregation {@link #getLayout layout}.
         */
        destroyLayout(): this;
        /**
         * Destroys the procedureItemTemplate in the aggregation {@link #getProcedureItemTemplate procedureItemTemplate}.
         */
        destroyProcedureItemTemplate(): this;
        /**
         * Destroys the stepInfoPopup in the aggregation {@link #getStepInfoPopup stepInfoPopup}.
         */
        destroyStepInfoPopup(): this;
        /**
         * Destroys the thumbnailsContainer in the aggregation {@link #getThumbnailsContainer thumbnailsContainer}.
         */
        destroyThumbnailsContainer(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:resize resize} event of this `sap.ui.vk.StepNavigation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:stepChanged stepChanged} event of this `sap.ui.vk.StepNavigation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachStepChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.StepNavigation with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.StepNavigation>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:resize resize} to attached listeners.
         */
        fireResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            oldSize?: object;

            size?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:stepChanged stepChanged} to attached listeners.
         */
        fireStepChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The ID of the rendering client that raised the event.
             */
            clientId?: object;
            /**
             * The type of sap.ve.dvl.DVLSTEPEVENT that has been raised; for example, DVLSTEPEVENT_FINISHED, DVLSTEPEVENT_SWITCHED,
             * DVLSTEPEVENT_STARTED, DVLSTEPEVENT_PLAYING.
             */
            type?: object;
            /**
             * The ID of the step affected by this stepId event.
             */
            stepId?: object;
          }
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the Step Navigation control.
         *
         * Default value is `"100%"`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets content of aggregation {@link #getLayout layout}.
         *
         * sap.m.Toolbar used to render the entire Step Navigation control's content.
         */
        getLayout(): sap.m.Toolbar;
        /**
         * Returns a metadata object for class sap.ui.vk.StepNavigation.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Cycles through steps and procedures for the lastLoadedScene and returns the step that follows after the
         * currentStepId.
         */
        getNextStep(
          /**
           * Optional integer representing the index of the target procedure in the procedures list.
           */
          procedureIndex?: number
        ): JSON;
        /**
         * Cycles through steps and procedures for the last loaded scene (`lastLoadedScene`), and returns the step
         * preceding the current step (currentStepId.
         */
        getPreviousStep(
          /**
           * Optional integer representing the index of the target procedure in the procedures list.
           */
          procedureIndex?: number
        ): JSON;
        /**
         * Gets content of aggregation {@link #getProcedureItemTemplate procedureItemTemplate}.
         *
         * Template control for Procedure items.
         */
        getProcedureItemTemplate(): sap.ui.core.Item;
        /**
         * Returns the procedures list with steps for the current scene, and appends base64 data as thumbnailData
         * and an image type as thumbnailType.
         */
        getProceduresAndSteps(): JSON;
        /**
         * Gets current value of property {@link #getSettings settings}.
         *
         * Managed settings and properties for Step Navigation events.
         */
        getSettings(): object;
        /**
         * Gets current value of property {@link #getShowStepInfo showStepInfo}.
         *
         * Indicates that the Step Navigation control should display a popup containing information around the step
         * that is playing. If set to `true`, then the popup is rendered. If set to `false`, the popup is hidden.
         *
         * Default value is `false`.
         */
        getShowStepInfo(): boolean;
        /**
         * Gets current value of property {@link #getShowThumbnails showThumbnails}.
         *
         * Indicates that the Step Navigation control should display thumbnails. If set to `true`, then thumbnails
         * are rendered. If set to `false`, then thumbnails are hidden.
         *
         * Default value is `true`.
         */
        getShowThumbnails(): boolean;
        /**
         * Gets current value of property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the Step Navigation control should display a toolbar. If set to `true`, then the toolbar
         * is rendered. If set to `false`, then the toolbar is hidden.
         *
         * Default value is `true`.
         */
        getShowToolbar(): boolean;
        /**
         * Gets a step based on a positive or negative integer, which is used as an index relative to the index
         * of the current step. An index value of `0` can be used to retrieve the details of the current step.
         */
        getStep(
          /**
           * Positive or negative integer representing the number to add or subtract from the index of the current
           * step to return the desired step; for example, //next 1, current 0, previous -1
           */
          relIndex: number,
          /**
           * Optional integer representing the index of the target procedure in the procedures list.
           */
          procedureIndex: number,
          /**
           * The ID of the step that we want to retrieve.
           */
          specificStepId: string
        ): JSON;
        /**
         * Gets a step based on a positive or negative integer, which is used as an index relative to the index
         * of the current step. An index value of `0` can be used to retrieve the details of the current step.
         */
        getStep(
          /**
           * Positive or negative integer representing the number to add or subtract from the index of the current
           * step to return the desired step; for example, //next 1, current 0, previous -1
           */
          relIndex: number,
          /**
           * The ID of the step that we want to retrieve.
           */
          specificStepId: string
        ): JSON;
        /**
         * Gets content of aggregation {@link #getStepInfoPopup stepInfoPopup}.
         *
         * sap.ui.core.Popup used to render step information in a popup.
         */
        getStepInfoPopup(): sap.ui.core.Control;
        /**
         * Gets content of aggregation {@link #getThumbnailsContainer thumbnailsContainer}.
         *
         * sap.m.ScrollContainer used to render a list of thumbnails for the available steps.
         */
        getThumbnailsContainer(): sap.m.ScrollContainer;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the Step Navigation control.
         *
         * Default value is `"100%"`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Pauses the step that is currently playing.
         */
        pauseStep(): void;
        /**
         * Plays all the steps in the specified procedure.
         */
        playAllSteps(
          /**
           * The ID of the procedure for which to play all steps. If `procedureId == null`, then only the first step
           * is played.
           */
          procedureId?: string
        ): void;
        /**
         * Plays the specified procedure step.
         */
        playStep(
          /**
           * The ID of the procedure step to play.
           */
          stepId: string,
          /**
           * Default: true If `true`, tells the Viewer to play the step from the first frame.
           */
          fromTheBeginning: boolean,
          /**
           * Default: false If `true`, tells the Viewer to play the next step in sequence.
           */
          continueToTheNext: boolean
        ): void;
        /**
         * Rebuilds the content of the Step Navigation control from the current Scene.
         */
        refresh(
          /**
           * The scene object to be used.
           */
          oScene: object
        ): boolean;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the Step Navigation control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets the aggregated {@link #getLayout layout}.
         */
        setLayout(
          /**
           * The layout to set
           */
          oLayout: sap.m.Toolbar
        ): this;
        /**
         * Sets the aggregated {@link #getProcedureItemTemplate procedureItemTemplate}.
         */
        setProcedureItemTemplate(
          /**
           * The procedureItemTemplate to set
           */
          oProcedureItemTemplate: sap.ui.core.Item
        ): this;
        /**
         * Attaches a Scene object to the Step Navigation control so that it can access the Scene’s procedures and
         * steps.
         */
        setScene(
          /**
           * The Scene object to attach to the Step Navigation control.
           */
          scene: object
        ): void;
        /**
         * Sets a new value for property {@link #getSettings settings}.
         *
         * Managed settings and properties for Step Navigation events.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSettings(
          /**
           * New value for property `settings`
           */
          oSettings: object
        ): this;
        /**
         * Sets a new value for property {@link #getShowStepInfo showStepInfo}.
         *
         * Indicates that the Step Navigation control should display a popup containing information around the step
         * that is playing. If set to `true`, then the popup is rendered. If set to `false`, the popup is hidden.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowStepInfo(
          /**
           * New value for property `showStepInfo`
           */
          bShowStepInfo?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowThumbnails showThumbnails}.
         *
         * Indicates that the Step Navigation control should display thumbnails. If set to `true`, then thumbnails
         * are rendered. If set to `false`, then thumbnails are hidden.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowThumbnails(
          /**
           * New value for property `showThumbnails`
           */
          bShowThumbnails?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the Step Navigation control should display a toolbar. If set to `true`, then the toolbar
         * is rendered. If set to `false`, then the toolbar is hidden.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowToolbar(
          /**
           * New value for property `showToolbar`
           */
          bShowToolbar?: boolean
        ): this;
        /**
         * Sets the aggregated {@link #getStepInfoPopup stepInfoPopup}.
         */
        setStepInfoPopup(
          /**
           * The stepInfoPopup to set
           */
          oStepInfoPopup: sap.ui.core.Control
        ): this;
        /**
         * Sets the aggregated {@link #getThumbnailsContainer thumbnailsContainer}.
         */
        setThumbnailsContainer(
          /**
           * The thumbnailsContainer to set
           */
          oThumbnailsContainer: sap.m.ScrollContainer
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the Step Navigation control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @EXPERIMENTAL (since 1.58.0)
       *
       * Provides the interface for the texture.
       */
      class Texture extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new texture
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.Texture with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Texture>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFilterMode filterMode}.
         *
         * filter mode - Bilinear = 0, NearestNeighbor = 1
         *
         * Default value is `0`.
         */
        getFilterMode(): int;
        /**
         * Gets current value of property {@link #getId id}.
         *
         * texture ID (optional)
         */
        getId(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.Texture.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         *
         */
        getTextRef(): any;
        /**
         * Gets current value of property {@link #getUvHorizontalOffset uvHorizontalOffset}.
         *
         * Horizontal offset of uv coordinates
         *
         * Default value is `0.0`.
         */
        getUvHorizontalOffset(): float;
        /**
         * Gets current value of property {@link #getUvHorizontalScale uvHorizontalScale}.
         *
         * Horizontal scale of uv coordinates
         *
         * Default value is `0.0`.
         */
        getUvHorizontalScale(): float;
        /**
         * Gets current value of property {@link #getUvHorizontalTilingEnabled uvHorizontalTilingEnabled}.
         *
         * Is the uv horizontal tiling enabled
         *
         * Default value is `true`.
         */
        getUvHorizontalTilingEnabled(): boolean;
        /**
         * Gets current value of property {@link #getUvRotationAngle uvRotationAngle}.
         *
         * Rotation angle of uv coordinates
         *
         * Default value is `0.0`.
         */
        getUvRotationAngle(): float;
        /**
         * Gets current value of property {@link #getUvVerticalOffset uvVerticalOffset}.
         *
         * VerticalOffset offset of uv coordinates
         *
         * Default value is `0.0`.
         */
        getUvVerticalOffset(): float;
        /**
         * Gets current value of property {@link #getUvVerticalScale uvVerticalScale}.
         *
         * Vertical scale of uv coordinates
         *
         * Default value is `0.0`.
         */
        getUvVerticalScale(): float;
        /**
         * Gets current value of property {@link #getUvVerticalTilingEnabled uvVerticalTilingEnabled}.
         *
         * Is the uv vertical tiling enabled
         *
         * Default value is `true`.
         */
        getUvVerticalTilingEnabled(): boolean;
        /**
         * Load texture image.
         */
        load(
          /**
           * resource url for image.
           */
          imageUrl: string
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getFilterMode filterMode}.
         *
         * filter mode - Bilinear = 0, NearestNeighbor = 1
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setFilterMode(
          /**
           * New value for property `filterMode`
           */
          iFilterMode?: int
        ): this;
        /**
         * Sets a new value for property {@link #getId id}.
         *
         * texture ID (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setId(
          /**
           * New value for property `id`
           */
          sId: string
        ): this;
        /**
         * Sets a new value for property {@link #getUvHorizontalOffset uvHorizontalOffset}.
         *
         * Horizontal offset of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setUvHorizontalOffset(
          /**
           * New value for property `uvHorizontalOffset`
           */
          fUvHorizontalOffset?: float
        ): this;
        /**
         * Sets a new value for property {@link #getUvHorizontalScale uvHorizontalScale}.
         *
         * Horizontal scale of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setUvHorizontalScale(
          /**
           * New value for property `uvHorizontalScale`
           */
          fUvHorizontalScale?: float
        ): this;
        /**
         * Sets a new value for property {@link #getUvHorizontalTilingEnabled uvHorizontalTilingEnabled}.
         *
         * Is the uv horizontal tiling enabled
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setUvHorizontalTilingEnabled(
          /**
           * New value for property `uvHorizontalTilingEnabled`
           */
          bUvHorizontalTilingEnabled?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getUvRotationAngle uvRotationAngle}.
         *
         * Rotation angle of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setUvRotationAngle(
          /**
           * New value for property `uvRotationAngle`
           */
          fUvRotationAngle?: float
        ): this;
        /**
         * Sets a new value for property {@link #getUvVerticalOffset uvVerticalOffset}.
         *
         * VerticalOffset offset of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setUvVerticalOffset(
          /**
           * New value for property `uvVerticalOffset`
           */
          fUvVerticalOffset?: float
        ): this;
        /**
         * Sets a new value for property {@link #getUvVerticalScale uvVerticalScale}.
         *
         * Vertical scale of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0`.
         */
        setUvVerticalScale(
          /**
           * New value for property `uvVerticalScale`
           */
          fUvVerticalScale?: float
        ): this;
        /**
         * Sets a new value for property {@link #getUvVerticalTilingEnabled uvVerticalTilingEnabled}.
         *
         * Is the uv vertical tiling enabled
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setUvVerticalTilingEnabled(
          /**
           * New value for property `uvVerticalTilingEnabled`
           */
          bUvVerticalTilingEnabled?: boolean
        ): this;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides buttons to hide or show certain sap.ui.vk controls.
       */
      class Toolbar extends sap.ui.core.Control {
        /**
         * Constructor for a new Toolbar.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ToolbarSettings
        );
        /**
         * Constructor for a new Toolbar.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.ui.vk.$ToolbarSettings
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): this;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Creates a new subclass of class sap.ui.vk.Toolbar with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Toolbar>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Toolbar content, this can be used to add/remove buttons and other SAP UI5 controls to the toolbar
         */
        getContent(): sap.ui.core.Control[];
        /**
         * Returns a metadata object for class sap.ui.vk.Toolbar.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Used to set the title of the Toolbar
         *
         * Default value is `empty string`.
         */
        getTitle(): string;
        /**
         * ID of the element which is the current target of the association {@link #getViewer viewer}, or `null`.
         */
        getViewer(): sap.ui.core.ID;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): int;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: int | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Used to set the title of the Toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle?: string
        ): this;
        /**
         * Sets the associated {@link #getViewer viewer}.
         */
        setViewer(
          /**
           * ID of an element which becomes the new target of this viewer association; alternatively, an element instance
           * may be given
           */
          oViewer: sap.ui.core.ID | sap.ui.vk.Viewer
        ): this;
      }
      /**
       * @SINCE 1.32.0
       *
       * Transformation matrix is an array of 12 numbers in a row major mode.
       */
      class TransformationMatrix {
        /**
         *
         */
        constructor();

        /**
         * Converts matrix from 3x2 to 4x3.
         */
        static convert3x2To4x3(
          /**
           * The matrix to convert.
           */
          m3x2: number[]
        ): number[];
        /**
         * Converts matrix from 4x3 to 3x2.
         */
        static convert4x3To3x2(
          /**
           * The matrix 4x3 to convert.
           */
          m4x3: number[]
        ): number[];
        /**
         * Converts matrix from 4x4 to 3x2.
         */
        static convert4x4To3x2(
          /**
           * The matrix 4x4 to convert.
           */
          m4x4: number[]
        ): number[];
        /**
         * Converts matrix from 4x4 or 4x4 to 3x2.
         */
        static convertTo3x2(
          /**
           * The matrix 4x4 or 4x3 to convert.
           */
          m: number[]
        ): number[];
        /**
         * Converts matrix from 4x4 to 4x3.
         */
        static convertTo4x3(
          /**
           * The matrix to convert. The last column must be [0, 0, 0, 1].
           */
          matrix4x4: number[]
        ): number[];
        /**
         * Converts matrix from 4x3 to 4x4.
         */
        static convertTo4x4(
          /**
           * The matrix to convert.
           */
          matrix4x3: number[]
        ): number[];
        /**
         * Parses the given string value and converts it into an array of numbers.
         */
        static parseValue(
          /**
           * a comma or white space delimited string
           */
          value: string
        ): number[];
      }
      /**
       * Provides the interface for the view.
       */
      class View
        extends sap.ui.base.ManagedObject
        implements sap.ui.vk.IPlaybackCollection {
        __implements__sap_ui_vk_IPlaybackCollection: boolean;
        /**
         * Constructor for a new View.
         *
         * The objects of this class contain neccessary information to reproduce current view including camera type,
         * position and orientation as well as objects visibility property and their positions (if different from
         * default)
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.View with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.View>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAspectRatio aspectRatio}.
         *
         * Aspect ratio for Safe Area (optional). This can be 0 to 25. Values above or below this range will be
         * ignored.
         */
        getAspectRatio(): float;
        /**
         * @EXPERIMENTAL (since 1.73.0)
         *
         * Returns view camera
         */
        getCamera(): sap.ui.vk.Camera;
        /**
         * Gets current value of property {@link #getDescription description}.
         *
         * View description (optional)
         */
        getDescription(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.View.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * View name (optional)
         */
        getName(): string;
        /**
         * @EXPERIMENTAL (since 1.73.0)
         *
         * Get parameters of nodes defined in view
         */
        getNodeInfos(): object[];
        /**
         * Gets current value of property {@link #getViewId viewId}.
         *
         * View persistent ID (optional)
         */
        getViewId(): string;
        /**
         * Sets a new value for property {@link #getAspectRatio aspectRatio}.
         *
         * Aspect ratio for Safe Area (optional). This can be 0 to 25. Values above or below this range will be
         * ignored.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAspectRatio(
          /**
           * New value for property `aspectRatio`
           */
          fAspectRatio: float
        ): this;
        /**
         * @EXPERIMENTAL (since 1.73.0)
         *
         * Set view camera.
         */
        setCamera(
          /**
           * view camera
           */
          camera: sap.ui.vk.Camera
        ): sap.ui.vk.View;
        /**
         * Sets a new value for property {@link #getDescription description}.
         *
         * View description (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDescription(
          /**
           * New value for property `description`
           */
          sDescription: string
        ): this;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * View name (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): this;
        /**
         * @EXPERIMENTAL (since 1.73.0)
         *
         * Set parameters of nodes defined in view
         */
        setNodeInfos(
          /**
           * Array of objects containing node information, each object contains the following fields
           */
          infos: Array<{
            /**
             * Node reference
             */
            target: object;
            /**
             * Node transformation matrix, array of 16 or 12
             */
            transform: float[];
            /**
             * Optional, node mesh Id
             */
            meshId: string;
            /**
             * Optional, node material Id
             */
            materialId: string;
            /**
             * Node visibility
             */
            visible: boolean;
            /**
             * Node opacity
             */
            opacity: float;
          }>
        ): sap.ui.vk.View;
        /**
         * Sets a new value for property {@link #getViewId viewId}.
         *
         * View persistent ID (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setViewId(
          /**
           * New value for property `viewId`
           */
          sViewId: string
        ): this;
        /**
         * @EXPERIMENTAL (since 1.73.0)
         *
         * Update parameters of nodes if nodes are already defined, add parameters if the node is not defined in
         * view
         */
        updateNodeInfos(
          /**
           * Infos array of objects containing node information, each object contains the following fields
           */
          update: Array<{
            /**
             * Node reference
             */
            target: object;
            /**
             * Node transformation matrix, array of 16 or 12
             */
            transform: float[];
            /**
             * Optional, node mesh Id
             */
            meshId: string;
            /**
             * Optional, node material Id
             */
            materialId: string;
            /**
             * Node visibility
             */
            visible: boolean;
            /**
             * Node opacity
             */
            opacity: float;
          }>
        ): sap.ui.vk.View;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides simple 3D visualization capability by connecting, configuring and presenting the essential Visualization
       * Toolkit controls a single composite control.
       */
      class Viewer extends sap.ui.core.Control {
        /**
         * Constructor for a new Viewer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new Viewer control
           */
          mSettings?: sap.ui.vk.$ViewerSettings
        );
        /**
         * Constructor for a new Viewer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Viewer control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * initial settings for the new Viewer control
           */
          mSettings?: sap.ui.vk.$ViewerSettings
        );

        /**
         * It activates or deactivates full screen mode.
         */
        activateFullScreenMode(
          /**
           * Parameter which specifies whether to activate or deactivate full screen mode.
           */
          value: boolean
        ): sap.ui.vk.Viewer;
        /**
         * @deprecated (since 1.77.0) - Use {@link sap.ui.vk.tools.RedlineTool} instead
         *
         * Activates the redline design control.
         */
        activateRedlineDesign(
          /**
           * The redline element/elements which will be rendered as soon as the redline design control is activated.
           */
          redlineElements: sap.ui.vk.RedlineElement | sap.ui.vk.RedlineElement[]
        ): sap.ui.vk.Viewer;
        /**
         * Adds some contentResource to the aggregation {@link #getContentResources contentResources}.
         */
        addContentResource(
          /**
           * The contentResource to add; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentResourceChangesProcessed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentResourceChangesProcessed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:fullScreen fullScreen} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when viewer enters/exits full screen mode.
         */
        attachFullScreen(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:fullScreen fullScreen} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when viewer enters/exits full screen mode.
         */
        attachFullScreen(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneDestroying sceneDestroying} event of this
         * `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
         */
        attachSceneDestroying(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneDestroying sceneDestroying} event of this
         * `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
         */
        attachSceneDestroying(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingFailed sceneLoadingFailed} event
         * of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a critical error occurs during scene / image loading.
         */
        attachSceneLoadingFailed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingFailed sceneLoadingFailed} event
         * of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a critical error occurs during scene / image loading.
         */
        attachSceneLoadingFailed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a scene / image has been loaded into the Viewer.
         */
        attachSceneLoadingSucceeded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a scene / image has been loaded into the Viewer.
         */
        attachSceneLoadingSucceeded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the contentResources in the aggregation {@link #getContentResources contentResources}.
         */
        destroyContentResources(): this;
        /**
         * Destroys the overlay in the aggregation {@link #getOverlay overlay}.
         */
        destroyOverlay(): this;
        /**
         * @deprecated (since 1.77.0) - Use {@link sap.ui.vk.tools.RedlineTool} instead
         *
         * It destroys the current instance of {sap.ui.vk.RedlineDesign}.
         */
        destroyRedlineDesign(): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed}
         * event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentResourceChangesProcessed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:fullScreen fullScreen} event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachFullScreen(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:sceneDestroying sceneDestroying} event of
         * this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSceneDestroying(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:sceneLoadingFailed sceneLoadingFailed} event
         * of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSceneLoadingFailed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded}
         * event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSceneLoadingSucceeded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachUrlClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.Viewer with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Viewer>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed} to attached
         * listeners.
         */
        fireContentResourceChangesProcessed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:fullScreen fullScreen} to attached listeners.
         */
        fireFullScreen(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * true: entered full screen; false: exited full screen.
             */
            isFullScreen?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:nodeClicked nodeClicked} to attached listeners.
         */
        fireNodeClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference.
             */
            nodeRef?: any;

            x?: int;

            y?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:sceneDestroying sceneDestroying} to attached listeners.
         */
        fireSceneDestroying(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a reference to the scene to be destroyed.
             */
            scene?: sap.ui.vk.Scene;
            /**
             * Returns a `function(prevent: boolean)` with one boolean parameter. To prevent garbage collection after
             * the scene is destroyed call this function passing `true` as a parameter.
             */
            preventGarbageCollection?: Function;
          }
        ): this;
        /**
         * Fires event {@link #event:sceneLoadingFailed sceneLoadingFailed} to attached listeners.
         */
        fireSceneLoadingFailed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns an optional object describing the reason of the failure.
             */
            reason?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded} to attached listeners.
         */
        fireSceneLoadingSucceeded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a reference to the loaded Scene.
             */
            scene?: sap.ui.vk.Scene;
          }
        ): this;
        /**
         * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
         */
        fireSelectionChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Node references to the newly selected nodes.
             */
            selected?: any[];
            /**
             * Node references to the newly unselected nodes.
             */
            unselected?: any[];
          }
        ): this;
        /**
         * Fires event {@link #event:urlClicked urlClicked} to attached listeners.
         */
        fireUrlClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference of the note that contains the URL.
             */
            nodeRef?: any;
            /**
             * Returns a URL that was clicked.
             */
            url?: string;
          }
        ): this;
        /**
         * Gets content of aggregation {@link #getContentResources contentResources}.
         *
         * Content resources to load and display in the Viewer control.
         */
        getContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Gets current value of property {@link #getEnableNotifications enableNotifications}.
         *
         * Disables the Message Popover Control
         *
         * Default value is `true`.
         */
        getEnableNotifications(): boolean;
        /**
         * Gets current value of property {@link #getEnableOverlay enableOverlay}.
         *
         * Enables or disables the Overlay control
         *
         * Default value is `false`.
         */
        getEnableOverlay(): boolean;
        /**
         * Gets current value of property {@link #getEnableProgressIndicator enableProgressIndicator}.
         *
         * Enable / disable progress indicator for downloading and rendering VDS files
         *
         * Default value is `true`.
         */
        getEnableProgressIndicator(): boolean;
        /**
         * Gets current value of property {@link #getEnableSceneTree enableSceneTree}.
         *
         * Disables the scene tree control Button on the menu
         *
         * Default value is `true`.
         */
        getEnableSceneTree(): boolean;
        /**
         * Gets current value of property {@link #getEnableStepNavigation enableStepNavigation}.
         *
         * Disables the Step Navigation Control Button on the menu
         *
         * Default value is `true`.
         */
        getEnableStepNavigation(): boolean;
        /**
         * Gets current value of property {@link #getEnableToolbar enableToolbar}.
         *
         * Shows or hides Toolbar control
         *
         * Default value is `true`.
         */
        getEnableToolbar(): boolean;
        /**
         * @deprecated (since 1.50.0)
         *
         * Gets the GraphicsCore object if the currently loaded content is a 3D model.
         */
        getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the Viewer control
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getHotspotColor hotspotColor}.
         *
         * Color used for highlighting Smart2D hotspots in the CSS Color format.
         *
         * Default value is `"rgba(255, 0, 0, 0.7529411764705882)"`.
         */
        getHotspotColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getHotspotColorABGR hotspotColorABGR}.
         *
         * Color used for highlighting Smart2D hotspots in the ABGR format.
         *
         * Default value is `0xc00000ff`.
         */
        getHotspotColorABGR(): int;
        /**
         * Returns a metadata object for class sap.ui.vk.Viewer.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets the 2D viewport used for displaying format natively supported by the browser - 2D images etc.
         */
        getNativeViewport(): sap.ui.vk.NativeViewport;
        /**
         * Gets content of aggregation {@link #getOverlay overlay}.
         */
        getOverlay(): sap.ui.vk.Overlay;
        /**
         * Gets current value of property {@link #getOverlayStepNavigation overlayStepNavigation}.
         *
         * If enabled the Step Navigation will be overlayed on top of the viewport. Only set this during initialization.
         * Will not work when set at runtime.
         *
         * Default value is `false`.
         */
        getOverlayStepNavigation(): boolean;
        /**
         * Gets current value of property {@link #getRecursiveSelection recursiveSelection}.
         *
         * Whether or not we want ViewStateManager to have recursive selection.
         *
         * Default value is `false`.
         */
        getRecursiveSelection(): boolean;
        /**
         * @deprecated (since 1.77.0) - Use {@link sap.ui.vk.tools.RedlineTool} instead
         *
         * Gets the RedlineDesign instance used for creating redlining shapes.
         */
        getRedlineDesign(): sap.ui.vk.RedlineDesign;
        /**
         * Gets current value of property {@link #getRuntimeSettings runtimeSettings}.
         *
         * Optional Emscripten runtime module settings. A JSON object with the following properties:
         * 	 - totalMemory {int} size of Emscripten module memory in bytes, default value: 512 MB.
         * 	 - logElementId {string} ID of a textarea DOM element to write the log to.
         * 	 - statusElementId {string} ID of a DOM element to write the status messages to.  Emscripten runtime
         * 			module settings cannot be changed after the control is fully initialized.
         *
         * Default value is `{}`.
         */
        getRuntimeSettings(): object;
        /**
         * Gets the Scene currently loaded in the Viewer control.
         */
        getScene(): sap.ui.vk.Scene;
        /**
         * Gets the scene tree control to customize it.
         */
        getSceneTree(): sap.ui.vk.SceneTree;
        /**
         * Gets current value of property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * Whether or not we want ViewStateManager to keep track of visibility changes.
         *
         * Default value is `false`.
         */
        getShouldTrackVisibilityChanges(): boolean;
        /**
         * Gets current value of property {@link #getShowAllHotspots showAllHotspots}.
         *
         * Enables or disables showing of all hotspots
         *
         * Default value is `false`.
         */
        getShowAllHotspots(): boolean;
        /**
         * Gets current value of property {@link #getShowSceneTree showSceneTree}.
         *
         * Shows or hides the scene tree control
         *
         * Default value is `true`.
         */
        getShowSceneTree(): boolean;
        /**
         * Gets current value of property {@link #getShowStepNavigation showStepNavigation}.
         *
         * Shows or hides the Step Navigation Control
         *
         * Default value is `false`.
         */
        getShowStepNavigation(): boolean;
        /**
         * Gets current value of property {@link #getShowStepNavigationThumbnails showStepNavigationThumbnails}.
         *
         * Shows or hides the Step Navigation thumbnails
         *
         * Default value is `true`.
         */
        getShowStepNavigationThumbnails(): boolean;
        /**
         * Gets the toolbar control to customize it - add or remove buttons
         */
        getToolbar(): sap.ui.vk.Toolbar;
        /**
         * Gets current value of property {@link #getToolbarTitle toolbarTitle}.
         *
         * The toolbar title
         *
         * Default value is `empty string`.
         */
        getToolbarTitle(): string;
        /**
         * Gets the 3D viewport.
         */
        getViewport(): sap.ui.vk.Viewport;
        /**
         * Gets the view state manager object used for handling visibility and selection of nodes.
         */
        getViewStateManager(): sap.ui.vk.ViewStateManager;
        /**
         * Gets current value of property {@link #getWebGLContextAttributes webGLContextAttributes}.
         *
         * Optional WebGL context attributes. A JSON object with the following boolean properties:
         * 	 - antialias {boolean} default value `true`. If set to `true`, the context will attempt to perform antialiased
         * 			rendering if possible.
         * 	 - alpha {boolean} default value `true`. If set to `true`, the context will have an alpha (transparency)
         * 			channel.
         * 	 - premultipliedAlpha {boolean} default value `false`. If set to `true`, the color channels in the framebuffer
         * 			will be stored premultiplied by the alpha channel to improve performance.  Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
         * 			WebGL context attributes} are also supported. WebGL context attributes cannot be changed after the control
         * 			is fully initialized.
         *
         * Default value is `...see text or source`.
         */
        getWebGLContextAttributes(): object;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the Viewer control
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.vk.ContentResource` in the aggregation {@link #getContentResources contentResources}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContentResource(
          /**
           * The contentResource whose index is looked for
           */
          oContentResource: sap.ui.vk.ContentResource
        ): int;
        /**
         * Inserts a contentResource into the aggregation {@link #getContentResources contentResources}.
         */
        insertContentResource(
          /**
           * The contentResource to insert; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource,
          /**
           * The `0`-based index the contentResource should be inserted at; for a negative value of `iIndex`, the
           * contentResource is inserted at position 0; for a value greater than the current size of the aggregation,
           * the contentResource is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Removes all the controls from the aggregation {@link #getContentResources contentResources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Removes a contentResource from the aggregation {@link #getContentResources contentResources}.
         */
        removeContentResource(
          /**
           * The contentResource to remove or its index or id
           */
          vContentResource: int | string | sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * Sets an callback function used to authorize user and provide authorization token.
         */
        setAuthorizationHandler(
          /**
           * An callback function.
           */
          handler: sap.ui.vk.AuthorizationHandler
        ): sap.ui.vk.Viewer;
        /**
         * Sets an object that decrypts content of encrypted models.
         */
        setDecryptionHandler(
          /**
           * An object that decrypts content of encrypted models.
           */
          handler: sap.ui.vk.DecryptionHandler
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableNotifications enableNotifications}.
         *
         * Disables the Message Popover Control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableNotifications(
          /**
           * New value for property `enableNotifications`
           */
          bEnableNotifications?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableOverlay enableOverlay}.
         *
         * Enables or disables the Overlay control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableOverlay(
          /**
           * New value for property `enableOverlay`
           */
          bEnableOverlay?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableProgressIndicator enableProgressIndicator}.
         *
         * Enable / disable progress indicator for downloading and rendering VDS files
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableProgressIndicator(
          /**
           * New value for property `enableProgressIndicator`
           */
          bEnableProgressIndicator?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableSceneTree enableSceneTree}.
         *
         * Disables the scene tree control Button on the menu
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableSceneTree(
          /**
           * New value for property `enableSceneTree`
           */
          bEnableSceneTree?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableStepNavigation enableStepNavigation}.
         *
         * Disables the Step Navigation Control Button on the menu
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableStepNavigation(
          /**
           * New value for property `enableStepNavigation`
           */
          bEnableStepNavigation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableToolbar enableToolbar}.
         *
         * Shows or hides Toolbar control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableToolbar(
          /**
           * New value for property `enableToolbar`
           */
          bEnableToolbar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the Viewer control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getHotspotColor hotspotColor}.
         *
         * Color used for highlighting Smart2D hotspots in the CSS Color format.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(255, 0, 0, 0.7529411764705882)"`.
         */
        setHotspotColor(
          /**
           * New value for property `hotspotColor`
           */
          sHotspotColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getHotspotColorABGR hotspotColorABGR}.
         *
         * Color used for highlighting Smart2D hotspots in the ABGR format.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0xc00000ff`.
         */
        setHotspotColorABGR(
          /**
           * New value for property `hotspotColorABGR`
           */
          iHotspotColorABGR?: int
        ): this;
        /**
         * Sets the aggregated {@link #getOverlay overlay}.
         */
        setOverlay(
          /**
           * The overlay to set
           */
          oOverlay: sap.ui.vk.Overlay
        ): this;
        /**
         * Sets a new value for property {@link #getOverlayStepNavigation overlayStepNavigation}.
         *
         * If enabled the Step Navigation will be overlayed on top of the viewport. Only set this during initialization.
         * Will not work when set at runtime.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setOverlayStepNavigation(
          /**
           * New value for property `overlayStepNavigation`
           */
          bOverlayStepNavigation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getRecursiveSelection recursiveSelection}.
         *
         * Whether or not we want ViewStateManager to have recursive selection.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setRecursiveSelection(
          /**
           * New value for property `recursiveSelection`
           */
          bRecursiveSelection?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getRuntimeSettings runtimeSettings}.
         *
         * Optional Emscripten runtime module settings. A JSON object with the following properties:
         * 	 - totalMemory {int} size of Emscripten module memory in bytes, default value: 512 MB.
         * 	 - logElementId {string} ID of a textarea DOM element to write the log to.
         * 	 - statusElementId {string} ID of a DOM element to write the status messages to.  Emscripten runtime
         * 			module settings cannot be changed after the control is fully initialized.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `{}`.
         */
        setRuntimeSettings(
          /**
           * New value for property `runtimeSettings`
           */
          oRuntimeSettings?: object
        ): this;
        /**
         * Sets a new value for property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * Whether or not we want ViewStateManager to keep track of visibility changes.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShouldTrackVisibilityChanges(
          /**
           * New value for property `shouldTrackVisibilityChanges`
           */
          bShouldTrackVisibilityChanges?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowAllHotspots showAllHotspots}.
         *
         * Enables or disables showing of all hotspots
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowAllHotspots(
          /**
           * New value for property `showAllHotspots`
           */
          bShowAllHotspots?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowSceneTree showSceneTree}.
         *
         * Shows or hides the scene tree control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSceneTree(
          /**
           * New value for property `showSceneTree`
           */
          bShowSceneTree?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowStepNavigation showStepNavigation}.
         *
         * Shows or hides the Step Navigation Control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowStepNavigation(
          /**
           * New value for property `showStepNavigation`
           */
          bShowStepNavigation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowStepNavigationThumbnails showStepNavigationThumbnails}.
         *
         * Shows or hides the Step Navigation thumbnails
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowStepNavigationThumbnails(
          /**
           * New value for property `showStepNavigationThumbnails`
           */
          bShowStepNavigationThumbnails?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getToolbarTitle toolbarTitle}.
         *
         * The toolbar title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setToolbarTitle(
          /**
           * New value for property `toolbarTitle`
           */
          sToolbarTitle?: string
        ): this;
        /**
         * Sets a new value for property {@link #getWebGLContextAttributes webGLContextAttributes}.
         *
         * Optional WebGL context attributes. A JSON object with the following boolean properties:
         * 	 - antialias {boolean} default value `true`. If set to `true`, the context will attempt to perform antialiased
         * 			rendering if possible.
         * 	 - alpha {boolean} default value `true`. If set to `true`, the context will have an alpha (transparency)
         * 			channel.
         * 	 - premultipliedAlpha {boolean} default value `false`. If set to `true`, the color channels in the framebuffer
         * 			will be stored premultiplied by the alpha channel to improve performance.  Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
         * 			WebGL context attributes} are also supported. WebGL context attributes cannot be changed after the control
         * 			is fully initialized.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `...see text or source`.
         */
        setWebGLContextAttributes(
          /**
           * New value for property `webGLContextAttributes`
           */
          oWebGLContextAttributes?: object
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the Viewer control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @SINCE 1.62.0
       *
       * Enables capabilities for navigating and activating procedures and steps contained in a single 3D scene.
       */
      class ViewGallery extends sap.ui.core.Control {
        /**
         * Constructor for a new ViewGallery.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new View Gallery control.
           */
          mSettings?: sap.ui.vk.$ViewGallerySettings
        );
        /**
         * Constructor for a new ViewGallery.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control. This ID is generated automatically if no ID is provided.
           */
          sId?: string,
          /**
           * Initial settings for the new View Gallery control.
           */
          mSettings?: sap.ui.vk.$ViewGallerySettings
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewOrderChange viewOrderChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when views are reordered
         */
        attachViewOrderChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewOrderChange viewOrderChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when views are reordered
         */
        attachViewOrderChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
         * this `sap.ui.vk.ViewGallery`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewOrderChange viewOrderChange} event of
         * this `sap.ui.vk.ViewGallery`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewOrderChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewGallery with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ViewGallery>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
         */
        fireSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            item?: sap.ui.core.Control;
          }
        ): this;
        /**
         * Fires event {@link #event:viewOrderChange viewOrderChange} to attached listeners.
         */
        fireViewOrderChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            view?: sap.ui.vk.View;

            viewIndex?: int;
          }
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getAnimationPlayer animationPlayer},
         * or `null`.
         */
        getAnimationPlayer(): sap.ui.core.ID;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getEnabled enabled}.
         *
         * If disabled, viewgallery is non-interactive and greyed out
         *
         * Default value is `true`.
         */
        getEnabled(): boolean;
        /**
         * Gets current value of property {@link #getEnableViewReordering enableViewReordering}.
         *
         * Indicates that the View Gallery control should allow view reordering
         *
         * Default value is `false`.
         */
        getEnableViewReordering(): boolean;
        /**
         * ID of the element which is the current target of the association {@link #getHost host}, or `null`.
         */
        getHost(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewGallery.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Retrieves the index of the selected view group.
         */
        getSelectedViewGroupIndex(): int;
        /**
         * Retrieves the index of the selected view.
         */
        getSelectedViewIndex(): int;
        /**
         * Gets current value of property {@link #getShowAnimationTimeSlider showAnimationTimeSlider}.
         *
         * Indicates that the View Gallery control should display animation slider showing time of animation in
         * current view.
         *
         * Default value is `true`.
         */
        getShowAnimationTimeSlider(): boolean;
        /**
         * Gets current value of property {@link #getShowThumbnailContainer showThumbnailContainer}.
         *
         * Indicates that the View Gallery control should display thumbnails
         *
         * Default value is `true`.
         */
        getShowThumbnailContainer(): boolean;
        /**
         * Gets current value of property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the View Gallery control should display toolbar
         *
         * Default value is `true`.
         */
        getShowToolbar(): boolean;
        /**
         * Gets current value of property {@link #getTransparency transparency}.
         *
         * Sets the transparency level of the viewgallery. Range is 0-1, with 1 being 100% opaque and 0 being 0%
         * opaque
         *
         * Default value is `1`.
         */
        getTransparency(): float;
        /**
         * ID of the element which is the current target of the association {@link #getViewManager viewManager},
         * or `null`.
         */
        getViewManager(): sap.ui.core.ID;
        /**
         * Sets the associated {@link #getAnimationPlayer animationPlayer}.
         */
        setAnimationPlayer(
          /**
           * ID of an element which becomes the new target of this animationPlayer association; alternatively, an
           * element instance may be given
           */
          oAnimationPlayer: sap.ui.core.ID | sap.ui.vk.AnimationPlayer
        ): this;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): this;
        /**
         * Sets a new value for property {@link #getEnabled enabled}.
         *
         * If disabled, viewgallery is non-interactive and greyed out
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnabled(
          /**
           * New value for property `enabled`
           */
          bEnabled?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getEnableViewReordering enableViewReordering}.
         *
         * Indicates that the View Gallery control should allow view reordering
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableViewReordering(
          /**
           * New value for property `enableViewReordering`
           */
          bEnableViewReordering?: boolean
        ): this;
        /**
         * Sets the associated {@link #getHost host}.
         */
        setHost(
          /**
           * ID of an element which becomes the new target of this host association; alternatively, an element instance
           * may be given
           */
          oHost: sap.ui.core.ID | sap.ui.vk.ViewportBase
        ): this;
        /**
         * Set if playing animation when activating view or playing procedure
         */
        setPlayingAnimation(
          /**
           * true if playing animation
           */
          play: boolean
        ): void;
        /**
         * Attaches a Scene object to the View Gallery control so that it can access the Scene’s procedures and
         * steps.
         */
        setScene(
          /**
           * The Scene object to attach to the View Gallery control.
           */
          scene: object
        ): void;
        /**
         * Selects view group with given index. This will reload list of views.
         */
        setSelectedViewGroupIndex(
          /**
           * Index of view group to become selected.
           */
          index: int,
          /**
           * Index of view in view group to become selected
           */
          viewIndex: int
        ): void;
        /**
         * Selects view with given view index.
         */
        setSelectedViewIndex(
          /**
           * Index of view to become selected.
           */
          index: int
        ): void;
        /**
         * Sets a new value for property {@link #getShowAnimationTimeSlider showAnimationTimeSlider}.
         *
         * Indicates that the View Gallery control should display animation slider showing time of animation in
         * current view.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowAnimationTimeSlider(
          /**
           * New value for property `showAnimationTimeSlider`
           */
          bShowAnimationTimeSlider?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowThumbnailContainer showThumbnailContainer}.
         *
         * Indicates that the View Gallery control should display thumbnails
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowThumbnailContainer(
          /**
           * New value for property `showThumbnailContainer`
           */
          bShowThumbnailContainer?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the View Gallery control should display toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowToolbar(
          /**
           * New value for property `showToolbar`
           */
          bShowToolbar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getTransparency transparency}.
         *
         * Sets the transparency level of the viewgallery. Range is 0-1, with 1 being 100% opaque and 0 being 0%
         * opaque
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setTransparency(
          /**
           * New value for property `transparency`
           */
          fTransparency?: float
        ): this;
        /**
         * Sets the associated {@link #getViewManager viewManager}.
         */
        setViewManager(
          /**
           * ID of an element which becomes the new target of this viewManager association; alternatively, an element
           * instance may be given
           */
          oViewManager: sap.ui.core.ID | /* was: sap.ui.vk.ViewManager */ any
        ): this;
      }
      /**
       * Provides the interface for the view.
       */
      class ViewGroup extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new View Group.
         *
         * The objects of this class contain neccessary information about View Group
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Add a view to the view group
         */
        addView(
          /**
           * view to add
           */
          view: sap.ui.vk.View
        ): sap.ui.vk.ViewGroup;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewGroup with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ViewGroup>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDescription description}.
         */
        getDescription(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewGroup.
         */
        static getMetadata(): sap.ui.base.ManagedObjectMetadata;
        /**
         * Gets current value of property {@link #getName name}.
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getViewGroupId viewGroupId}.
         */
        getViewGroupId(): string;
        /**
         * Gets a list of views
         */
        getViews(): sap.ui.vk.View[];
        /**
         * Gets index of a view in the view group
         */
        indexOfView(
          /**
           * view to locate
           */
          view: sap.ui.vk.View
        ): int;
        /**
         * Inserts a view
         */
        insertView(
          /**
           * view to insert
           */
          view: sap.ui.vk.View,
          /**
           * index where to insert the view
           */
          index: int
        ): sap.ui.vk.ViewGroup;
        /**
         * Removes a view from the view group
         */
        removeView(
          /**
           * view to remove
           */
          view: sap.ui.vk.View
        ): sap.ui.vk.ViewGroup;
        /**
         * Removes all views from the view group
         */
        removeViews(): sap.ui.vk.ViewGroup;
        /**
         * Sets a new value for property {@link #getDescription description}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDescription(
          /**
           * New value for property `description`
           */
          sDescription: string
        ): this;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): this;
        /**
         * Sets a new value for property {@link #getViewGroupId viewGroupId}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setViewGroupId(
          /**
           * New value for property `viewGroupId`
           */
          sViewGroupId: string
        ): this;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a rendering canvas for the 3D elements of a loaded scene.
       */
      class Viewport extends sap.ui.vk.ViewportBase {
        /**
         * Constructor for a new Viewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ViewportBase#constructor
         * sap.ui.vk.ViewportBase} can be used.
         */
        constructor(
          /**
           * Initial settings for the new Viewport control.
           */
          mSettings?: sap.ui.vk.$ViewportSettings
        );
        /**
         * Constructor for a new Viewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.vk.ViewportBase#constructor
         * sap.ui.vk.ViewportBase} can be used.
         */
        constructor(
          /**
           * ID for the new Viewport control. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Viewport control.
           */
          mSettings?: sap.ui.vk.$ViewportSettings
        );

        /**
         * Calls activateView with view definition
         */
        activateView(
          /**
           * object definition
           */
          view: sap.ui.vk.View,
          /**
           * true if view activation is part of playing view group
           */
          playViewGroup: boolean,
          /**
           * true if not animating the change of camera
           */
          notAnimateCameraChange: boolean
        ): sap.ui.vk.Viewport;
        /**
         * Creates a new subclass of class sap.ui.vk.Viewport with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewportBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.Viewport>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Get current view - remembered when activateView function is called
         */
        getCurrentView(): sap.ui.vk.View;
        /**
         * Returns viewport content as an image of desired size.
         */
        getImage(
          /**
           * Requested image width in pixels (allowed values 8 to 2048)
           */
          width: int,
          /**
           * Requested image height in pixels (allowed values 8 to 2048)
           */
          height: int,
          /**
           * The sap.ui.core.CSSColor to be used for top background color
           */
          topColor: string,
          /**
           * The sap.ui.core.CSSColor to be used for bottom background color
           */
          bottomColor: string,
          /**
           * Include selected nodes
           */
          includeSelection: boolean
        ): string;
        /**
         * Returns a metadata object for class sap.ui.vk.Viewport.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * @EXPERIMENTAL (since 1.82.0)
         *
         * Get the Symbol node from nodeId, if nodeId is not set, returns a collection of all Symbol nodes
         */
        getSymbolNodes(
          /**
           * node Id string, optional
           */
          nodeId: string
        ): any[];
        /**
         * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like
         * object. The information can then be used at a later time to restore the scene to the same camera view
         * using the {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.
         */
        getViewInfo(
          /**
           * Query object which indicates what information to be retrieved.
           */
          query?: {
            /**
             * Indicator to retrieve camera information.
             */
            camera?:
              | boolean
              | {
                  /**
                   * Indicator to retrieve camera view and projection matrices.
                   */
                  matrices?: boolean;
                  /**
                   * Indicator to retrieve the transition camera properties instead of regular one's.
                   */
                  useTransitionCamera?: boolean;
                };
            /**
             * Indicator to retrieve animation information.
             */
            animation?: boolean;
            /**
             * Indicator to retrieve visibility information.
             */
            visibility?:
              | boolean
              | {
                  /**
                   * Indicator to retrieve the complete visibility definition or just the difference.
                   */
                  mode?: sap.ui.vk.VisibilityMode;
                };
            /**
             * Indicator to retrieve selection information.
             */
            selection?: boolean | object;
          }
        ): object;
        /**
         * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo
         * getViewInfo} method.
         *  Internally, the `setViewInfo` method activates certain steps at certain animation times, and then changes
         * the camera position, rotation and field of view (FOV) / zoom factor.
         */
        setViewInfo(
          /**
           * A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo
           * getViewInfo} method.
           */
          viewInfo: {
            /**
             * A JSON-like object containing the camera information.
             */
            camera?: {
              /**
               * Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
               */
              rotation: {
                /**
                 * Angle around the vertical axis in degrees.
                 */
                yaw: float;
                /**
                 * Angle around the lateral axis in degrees.
                 */
                pitch: float;
                /**
                 * Angle around the longitudinal axis in degrees.
                 */
                roll: float;
              };
              /**
               * Position defined in 3-dimensional space.
               */
              position: {
                /**
                 * X coordinate.
                 */
                x: float;
                /**
                 * Y coordinate.
                 */
                y: float;
                /**
                 * Z coordinate.
                 */
                z: float;
              };
              /**
               * Camera field of view binding type.
               */
              bindingType: sap.ui.vk.CameraFOVBindingType;
              /**
               * Camera projection type.
               */
              projectionType: sap.ui.vk.CameraProjectionType;
              /**
               * Camera field of view in degrees. Applicable only to perspective cameras.
               */
              fieldOfView: float;
              /**
               * Camera zoom factor. Applicable only to orthographic cameras.
               */
              zoomFactor: float;
            };
            /**
             * A JSON-like object containing the animation information.
             */
            animation?: {
              /**
               * Step VE ID. If it is omitted then procedure and step indices are used.
               */
              stepVeId?: string;
              /**
               * Procedure index in the list of procedures.
               */
              procedureIndex?: int;
              /**
               * Step index in the list of steps in the procedure.
               */
              stepIndex?: int;
              /**
               * Time at which to activate the step.
               */
              animationTime?: float;
            };
            /**
             * A JSON-like object containing the visibility information.
             */
            visibility?: {
              /**
               * If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete} then the visible and hidden
               * fields are defined. If the mode equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
               * the changes field is defined.
               */
              mode: sap.ui.vk.VisibilityMode;
              /**
               * List of Ids of visible nodes.
               */
              visible: string[];
              /**
               * List of Ids of hidden nodes.
               */
              hidden: string[];
              /**
               * List of Ids of nodes with inverted visibility.
               */
              changes: string[];
            };
          },
          /**
           * Fly-to animation duration in seconds.
           */
          flyToDuration?: float
        ): sap.ui.vk.Viewport;
        /**
         *
         */
        showHotspots(
          /**
           * The node reference or the array of node references that we want to tint.
           */
          nodeRefs: any | any[],
          /**
           * Whether to highlight the nodes or remove the highlight.
           */
          show: boolean,
          /**
           * The color to use for highlighting the nodes passed as argument.
           */
          color: int | /* was: sap.ui.vk.CSSColor */ any
        ): sap.ui.vk.Viewport;
        /**
         * Executes a click or tap gesture.
         */
        tap(
          /**
           * The tap gesture's x-coordinate.
           */
          x: int,
          /**
           * The tap gesture's y-coordinate.
           */
          y: int,
          /**
           * Indicates whether the tap gesture should be interpreted as a double-click. A value of `true` indicates
           * a double-click gesture, and `false` indicates a single click gesture.
           */
          isDoubleClick: boolean
        ): sap.ui.vk.Viewport;
        /**
         * Zooms the scene to a bounding box created from a particular set of nodes.
         */
        zoomTo(
          /**
           * What set of nodes to zoom to.
           */
          what: sap.ui.vk.ZoomTo | sap.ui.vk.ZoomTo[],
          /**
           * Is only used if what == sap.ui.vk.ZoomTo.Node.
           */
          nodeRef: any,
          /**
           * Time to perform the "fly to" animation. Set to 0 to do this immediately.
           */
          crossFadeSeconds: float,
          /**
           * Margin. Set to 0 to zoom to the entire screen.
           */
          margin: float
        ): sap.ui.vk.Viewport;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a rendering canvas for the 3D elements of a loaded scene.
       */
      class ViewportBase extends sap.ui.core.Control {
        /**
         * Constructor for a new Viewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new Viewport control.
           */
          mSettings?: sap.ui.vk.$ViewportBaseSettings
        );
        /**
         * Constructor for a new Viewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Viewport control. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Viewport control.
           */
          mSettings?: sap.ui.vk.$ViewportBaseSettings
        );

        /**
         * Sets a scene obtained as content from the associated content connector.
         *
         * This method should be overridden in derived classes.
         */
        _setContent(
          /**
           * New content or `null`.
           */
          content: sap.ui.vk.Scene
        ): sap.ui.vk.ViewportBase;
        /**
         * Calls activateView with view definition
         */
        activateView(
          /**
           * view object definition
           */
          view: sap.ui.vk.View,
          /**
           * true if view activation is part of playing view group
           */
          playViewGroup: boolean,
          /**
           * true if not animating the change of camera
           */
          notAnimateCameraChange: boolean
        ): sap.ui.vk.ViewportBase;
        /**
         * Adds some annotation to the aggregation {@link #getAnnotations annotations}.
         */
        addAnnotation(
          /**
           * The annotation to add; if empty, nothing is inserted
           */
          oAnnotation: sap.ui.vk.Annotation
        ): this;
        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): this;
        /**
         * Adds some tool into the association {@link #getTools tools}.
         */
        addTool(
          /**
           * The tools to add; if empty, nothing is inserted
           */
          vTool: sap.ui.core.ID | sap.ui.vk.tools.Tool
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodesPicked nodesPicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when nodes in the scene are picked by user action. If application requires different
         * selection behaviour then it can handle this event and implement its own selection method. In this case
         * {@link sap.ui.vk.Viewport#selectionMode selectionMode} property should be set to `sap.ui.vk.SelectionMode.None`
         * Application can modify list of picked node references to alter selection behaviour.
         */
        attachNodesPicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodesPicked nodesPicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when nodes in the scene are picked by user action. If application requires different
         * selection behaviour then it can handle this event and implement its own selection method. In this case
         * {@link sap.ui.vk.Viewport#selectionMode selectionMode} property should be set to `sap.ui.vk.SelectionMode.None`
         * Application can modify list of picked node references to alter selection behaviour.
         */
        attachNodesPicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeZoomed nodeZoomed} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a node in the scene is zoomed in/out by double-clicking.
         */
        attachNodeZoomed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeZoomed nodeZoomed} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a node in the scene is zoomed in/out by double-clicking.
         */
        attachNodeZoomed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:procedureFinished procedureFinished} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current procedure is done playing
         */
        attachProcedureFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:procedureFinished procedureFinished} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current procedure is done playing
         */
        attachProcedureFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when viewport size is changed.
         */
        attachResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when viewport size is changed.
         */
        attachResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewActivated viewActivated} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a view in the viewport is activated
         */
        attachViewActivated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewActivated viewActivated} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a view in the viewport is activated
         */
        attachViewActivated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewFinished viewFinished} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current view is done playing
         */
        attachViewFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewFinished viewFinished} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current view is done playing
         */
        attachViewFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys all the annotations in the aggregation {@link #getAnnotations annotations}.
         */
        destroyAnnotations(): this;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): this;
        /**
         * Destroys the outputSettings in the aggregation {@link #getOutputSettings outputSettings}.
         */
        destroyOutputSettings(): this;
        /**
         * Destroys the safeArea in the aggregation {@link #getSafeArea safeArea}.
         */
        destroySafeArea(): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodesPicked nodesPicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodesPicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeZoomed nodeZoomed} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeZoomed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:procedureFinished procedureFinished} event
         * of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachProcedureFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:resize resize} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachUrlClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewActivated viewActivated} event of this
         * `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewActivated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewFinished viewFinished} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Helper method used to provide exclusive selection method. If this method is used then nodes are marked
         * as selected while all previously selected objects are deselected. If this is called with empty nodes
         * list then all already selected nodes are deselected.
         */
        exclusiveSelectionHandler(
          /**
           * Array of node references
           */
          nodes: any[]
        ): void;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewportBase with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ViewportBase>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:nodeClicked nodeClicked} to attached listeners.
         */
        fireNodeClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference.
             */
            nodeRef?: any;

            x?: int;

            y?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:nodesPicked nodesPicked} to attached listeners.
         */
        fireNodesPicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of the nodes that are picked.
             */
            picked?: any[];
          }
        ): this;
        /**
         * Fires event {@link #event:nodeZoomed nodeZoomed} to attached listeners.
         */
        fireNodeZoomed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Reference of the node that is zoomed.
             */
            zoomed?: any;
            /**
             * True for zoom in, and false for zoom out.
             */
            isZoomIn?: boolean;
          }
        ): this;
        /**
         * Fires event {@link #event:procedureFinished procedureFinished} to attached listeners.
         */
        fireProcedureFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * Fires event {@link #event:resize resize} to attached listeners.
         */
        fireResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns the width and height of new size `\{ width: number, height: number \}` in CSS pixels.
             */
            size?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:urlClicked urlClicked} to attached listeners.
         */
        fireUrlClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference of the note that contains the URL.
             */
            nodeRef?: any;
            /**
             * Returns a URL that was clicked.
             */
            url?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:viewActivated viewActivated} to attached listeners.
         */
        fireViewActivated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the activated view
             */
            viewIndex?: int;
            /**
             * The activated view
             */
            view?: sap.ui.vk.View;
            /**
             * The type of content loaded into the Viewport (for example: 2D, 3D).
             */
            type?: string;
          }
        ): this;
        /**
         * Fires event {@link #event:viewFinished viewFinished} to attached listeners.
         */
        fireViewFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            viewIndex?: int;
          }
        ): this;
        /**
         * Gets content of aggregation {@link #getAnnotations annotations}.
         *
         * HTML Annotations present in the active view
         */
        getAnnotations(): sap.ui.vk.Annotation[];
        /**
         * Gets current value of property {@link #getBackgroundColorBottom backgroundColorBottom}.
         *
         * Viewport background bottom color in the CSS Color format
         *
         * Default value is `"rgba(255, 255, 255, 1)"`.
         */
        getBackgroundColorBottom(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getBackgroundColorTop backgroundColorTop}.
         *
         * Viewport background top color in the CSS Color format
         *
         * Default value is `"rgba(50, 50, 50, 1)"`.
         */
        getBackgroundColorTop(): sap.ui.core.CSSColor;
        /**
         * Gets current camera to the viewport
         */
        getCamera(): sap.ui.vk.Camera;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * The controls inside the viewport.
         */
        getContent(): sap.ui.core.Control[];
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getDisableHotspotHovering disableHotspotHovering}.
         *
         * Disables hotspot hovering
         *
         * Default value is `false`.
         */
        getDisableHotspotHovering(): boolean;
        /**
         * Gets current value of property {@link #getFreezeCamera freezeCamera}.
         *
         * Freeze camera
         *
         * Default value is `false`.
         */
        getFreezeCamera(): boolean;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Viewport height
         *
         * Default value is `"100%"`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getHotspotColor hotspotColor}.
         *
         * Color used for highlighting hotspots in the CSS Color format
         *
         * Default value is `"rgba(89, 0, 0, 0.73)"`.
         */
        getHotspotColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getHotspotColorABGR hotspotColorABGR}.
         *
         * Color used for highlighting hotspots in the ABGR format
         *
         * Default value is `0x590000BB`.
         */
        getHotspotColorABGR(): int;
        /**
         * Gets current value of property {@link #getKeepOutputSize keepOutputSize}.
         *
         * Default value is `false`.
         */
        getKeepOutputSize(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewportBase.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets content of aggregation {@link #getOutputSettings outputSettings}.
         *
         * Output size settings of the viewport
         */
        getOutputSettings(): sap.ui.vk.OutputSettings;
        /**
         * Gets current value of property {@link #getRenderMode renderMode}.
         *
         * Viewport render mode
         *
         * Default value is `Default`.
         */
        getRenderMode(): sap.ui.vk.RenderMode;
        /**
         * Gets content of aggregation {@link #getSafeArea safeArea}.
         *
         * SafeArea control for viewport
         */
        getSafeArea(): sap.ui.vk.SafeArea;
        /**
         * Gets current value of property {@link #getSelectionDisplayMode selectionDisplayMode}.
         *
         * Selection display mode
         *
         * Default value is `Highlight`.
         */
        getSelectionDisplayMode(): sap.ui.vk.SelectionDisplayMode;
        /**
         * Gets current value of property {@link #getSelectionMode selectionMode}.
         *
         * Selection mode
         *
         * Default value is `Sticky`.
         */
        getSelectionMode(): sap.ui.vk.SelectionMode;
        /**
         * Gets current value of property {@link #getShowAllHotspots showAllHotspots}.
         *
         * Enables or disables showing of all hotspots
         *
         * Default value is `false`.
         */
        getShowAllHotspots(): boolean;
        /**
         * Gets current value of property {@link #getShowDebugInfo showDebugInfo}.
         *
         * Shows or hides the debug info.
         *
         * Default value is `false`.
         */
        getShowDebugInfo(): boolean;
        /**
         * Gets current value of property {@link #getShowSafeArea showSafeArea}.
         *
         * Shows or hides the Safe Area
         *
         * Default value is `false`.
         */
        getShowSafeArea(): boolean;
        /**
         * Gets current value of property {@link #getShowSelectionBoundingBoxes showSelectionBoundingBoxes}.
         *
         * Show selection bounding boxes
         *
         * Default value is `true`.
         */
        getShowSelectionBoundingBoxes(): boolean;
        /**
         * Returns array of IDs of the elements which are the current targets of the association {@link #getTools
         * tools}.
         */
        getTools(): sap.ui.core.ID[];
        /**
         * ID of the element which is the current target of the association {@link #getViewStateManager viewStateManager},
         * or `null`.
         */
        getViewStateManager(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Viewport width
         *
         * Default value is `"100%"`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.vk.Annotation` in the aggregation {@link #getAnnotations annotations}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfAnnotation(
          /**
           * The annotation whose index is looked for
           */
          oAnnotation: sap.ui.vk.Annotation
        ): int;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): int;
        /**
         * Inserts a annotation into the aggregation {@link #getAnnotations annotations}.
         */
        insertAnnotation(
          /**
           * The annotation to insert; if empty, nothing is inserted
           */
          oAnnotation: sap.ui.vk.Annotation,
          /**
           * The `0`-based index the annotation should be inserted at; for a negative value of `iIndex`, the annotation
           * is inserted at position 0; for a value greater than the current size of the aggregation, the annotation
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: int
        ): this;
        /**
         * Performs a `pan` gesture to pan across the Viewport.
         */
        pan(
          /**
           * The change in distance along the x-coordinate.
           */
          dx: int,
          /**
           * The change in distance along the y-coordinate.
           */
          dy: int
        ): sap.ui.vk.ViewportBase;
        /**
         * Removes all the controls from the aggregation {@link #getAnnotations annotations}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllAnnotations(): sap.ui.vk.Annotation[];
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes all the controls in the association named {@link #getTools tools}.
         */
        removeAllTools(): sap.ui.core.ID[];
        /**
         * Removes a annotation from the aggregation {@link #getAnnotations annotations}.
         */
        removeAnnotation(
          /**
           * The annotation to remove or its index or id
           */
          vAnnotation: int | string | sap.ui.vk.Annotation
        ): sap.ui.vk.Annotation;
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: int | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Removes an tool from the association named {@link #getTools tools}.
         */
        removeTool(
          /**
           * The tool to be removed or its index or ID
           */
          vTool: int | sap.ui.core.ID | sap.ui.vk.tools.Tool
        ): sap.ui.core.ID;
        /**
         * Rotates the content resource displayed on the Viewport.
         */
        rotate(
          /**
           * The change in x-coordinate used to define the desired rotation.
           */
          dx: int,
          /**
           * The change in y-coordinate used to define the desired rotation.
           */
          dy: int
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getBackgroundColorBottom backgroundColorBottom}.
         *
         * Viewport background bottom color in the CSS Color format
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(255, 255, 255, 1)"`.
         */
        setBackgroundColorBottom(
          /**
           * New value for property `backgroundColorBottom`
           */
          sBackgroundColorBottom?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getBackgroundColorTop backgroundColorTop}.
         *
         * Viewport background top color in the CSS Color format
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(50, 50, 50, 1)"`.
         */
        setBackgroundColorTop(
          /**
           * New value for property `backgroundColorTop`
           */
          sBackgroundColorTop?: sap.ui.core.CSSColor
        ): this;
        /**
         * @SINCE 1.52.0
         *
         * Sets current camera to the viewport
         */
        setCamera(
          /**
           * If the `camera` parameter is not `null`, the camera is replaced. If the `camera` parameter is `null`,
           * the current camera is destroyed.
           */
          camera: sap.ui.vk.Camera
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): this;
        /**
         * Sets a new value for property {@link #getDisableHotspotHovering disableHotspotHovering}.
         *
         * Disables hotspot hovering
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDisableHotspotHovering(
          /**
           * New value for property `disableHotspotHovering`
           */
          bDisableHotspotHovering?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getFreezeCamera freezeCamera}.
         *
         * Freeze camera
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setFreezeCamera(
          /**
           * New value for property `freezeCamera`
           */
          bFreezeCamera?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Viewport height
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getHotspotColor hotspotColor}.
         *
         * Color used for highlighting hotspots in the CSS Color format
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"rgba(89, 0, 0, 0.73)"`.
         */
        setHotspotColor(
          /**
           * New value for property `hotspotColor`
           */
          sHotspotColor?: sap.ui.core.CSSColor
        ): this;
        /**
         * Sets a new value for property {@link #getHotspotColorABGR hotspotColorABGR}.
         *
         * Color used for highlighting hotspots in the ABGR format
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0x590000BB`.
         */
        setHotspotColorABGR(
          /**
           * New value for property `hotspotColorABGR`
           */
          iHotspotColorABGR?: int
        ): this;
        /**
         * Sets a new value for property {@link #getKeepOutputSize keepOutputSize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setKeepOutputSize(
          /**
           * New value for property `keepOutputSize`
           */
          bKeepOutputSize?: boolean
        ): this;
        /**
         * Sets the aggregated {@link #getOutputSettings outputSettings}.
         */
        setOutputSettings(
          /**
           * The outputSettings to set
           */
          oOutputSettings: sap.ui.vk.OutputSettings
        ): this;
        /**
         * Sets a new value for property {@link #getRenderMode renderMode}.
         *
         * Viewport render mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Default`.
         */
        setRenderMode(
          /**
           * New value for property `renderMode`
           */
          sRenderMode?: sap.ui.vk.RenderMode
        ): this;
        /**
         * Sets the aggregated {@link #getSafeArea safeArea}.
         */
        setSafeArea(
          /**
           * The safeArea to set
           */
          oSafeArea: sap.ui.vk.SafeArea
        ): this;
        /**
         * Sets a new value for property {@link #getSelectionDisplayMode selectionDisplayMode}.
         *
         * Selection display mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Highlight`.
         */
        setSelectionDisplayMode(
          /**
           * New value for property `selectionDisplayMode`
           */
          sSelectionDisplayMode?: sap.ui.vk.SelectionDisplayMode
        ): this;
        /**
         * Sets a new value for property {@link #getSelectionMode selectionMode}.
         *
         * Selection mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Sticky`.
         */
        setSelectionMode(
          /**
           * New value for property `selectionMode`
           */
          sSelectionMode?: sap.ui.vk.SelectionMode
        ): this;
        /**
         * Sets a new value for property {@link #getShowAllHotspots showAllHotspots}.
         *
         * Enables or disables showing of all hotspots
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowAllHotspots(
          /**
           * New value for property `showAllHotspots`
           */
          bShowAllHotspots?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowDebugInfo showDebugInfo}.
         *
         * Shows or hides the debug info.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowDebugInfo(
          /**
           * New value for property `showDebugInfo`
           */
          bShowDebugInfo?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowSafeArea showSafeArea}.
         *
         * Shows or hides the Safe Area
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowSafeArea(
          /**
           * New value for property `showSafeArea`
           */
          bShowSafeArea?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowSelectionBoundingBoxes showSelectionBoundingBoxes}.
         *
         * Show selection bounding boxes
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSelectionBoundingBoxes(
          /**
           * New value for property `showSelectionBoundingBoxes`
           */
          bShowSelectionBoundingBoxes?: boolean
        ): this;
        /**
         * Sets the associated {@link #getViewStateManager viewStateManager}.
         */
        setViewStateManager(
          /**
           * ID of an element which becomes the new target of this viewStateManager association; alternatively, an
           * element instance may be given
           */
          oViewStateManager: sap.ui.core.ID | sap.ui.vk.ViewStateManagerBase
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Viewport width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"100%"`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
        /**
         * Helper method to provide "sticky" selection method. If this method is used then nodes are added into
         * selection if they were not selected before, otherwise they are removed from selection. If this is called
         * with empty nodes list then all already selected nodes are deselected.
         */
        stickySelectionHandler(
          /**
           * Array of node references
           */
          nodes: any[]
        ): void;
        /**
         * Performs a `zoom` gesture to zoom in or out on the beginGesture coordinate.
         */
        zoom(
          /**
           * Zoom factor. A scale factor that specifies how much to zoom in or out by.
           */
          dy: float
        ): sap.ui.vk.ViewportBase;
      }
      /**
       * @SINCE 1.32.0
       *
       * Manages the visibility and selection states of nodes in the scene.
       */
      class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
        /**
         * Constructor for a new ViewStateManager.
         */
        constructor(
          /**
           * Initial settings for the new ViewStateManager object.
           */
          mSettings?: sap.ui.vk.$ViewStateManagerSettings
        );
        /**
         * Constructor for a new ViewStateManager.
         */
        constructor(
          /**
           * ID for the new ViewStateManager object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ViewStateManager object.
           */
          mSettings?: sap.ui.vk.$ViewStateManagerSettings
        );

        /**
         * Enumerates IDs of the outlined nodes.
         */
        enumerateOutlinedNodes(
          /**
           * A function to call when the outlined nodes are enumerated. The function takes one parameter of type `string`.
           */
          callback: Function
        ): sap.ui.vk.ViewStateManager;
        /**
         * Enumerates IDs of the selected nodes.
         */
        enumerateSelection(
          /**
           * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
           */
          callback: Function
        ): sap.ui.vk.ViewStateManager;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewStateManager with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ViewStateManager>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the Animation player associated with viewManager.
         */
        getAnimationPlayer(): sap.ui.vk.AnimationPlayer;
        /**
         * Gets the default highlighting color
         */
        getHighlightColor(
          /**
           * This flag indicates to return the default highlighting color in the ABGR format, if it equals `false`
           * then the color is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | string | int;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewStateManager.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets the NodeHierarchy object associated with this ViewStateManager object.
         */
        getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
        /**
         * Gets the opacity of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        getOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): float | float[];
        /**
         * Gets the outline color
         */
        getOutlineColor(
          /**
           * This flag indicates to return the outline color in the ABGR format, if it equals `false` then the color
           * is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | string | int;
        /**
         * Gets the outline width
         */
        getOutlineWidth(): float;
        /**
         * Gets the outlining state of the node.
         *
         * If a single node reference is passed to the method then a single outlining state is returned.
         *  If an array of node references is passed to the method then an array of outlining states is returned.
         */
        getOutliningState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Get node's opacity stored in active view.
         */
        getRestOpacity(
          /**
           * The node reference.
           */
          nodeRef: any
        ): float;
        /**
         * Get node's rest transformation stored in active view.
         */
        getRestTransformation(
          /**
           * The node reference.
           */
          nodeRef: any
        ): any;
        /**
         * Gets the selection state of the node.
         *
         * If a single node reference is passed to the method then a single selection state is returned.
         *  If an array of node references is passed to the method then an array of selection states is returned.
         */
        getSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Gets if showing the bounding box when nodes are selected
         */
        getShowSelectionBoundingBox(): boolean;
        /**
         * @EXPERIMENTAL (since 1.82.0)
         *
         * Get the Symbol node from nodeId, if nodeId is not set, returns a collection of all Symbol nodes
         */
        getSymbolNodes(
          /**
           * node Id string, optional
           */
          nodeId: string
        ): any[];
        /**
         * Gets the tint color of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        getTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
           * is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | int | int[];
        /**
         * Gets the visibility changes in the current ViewStateManager object.
         */
        getVisibilityChanges(): string[];
        /**
         * Gets the visibility state of nodes.
         *
         * If a single node reference is passed to the method then a single visibility state is returned.
         *  If an array of node references is passed to the method then an array of visibility states is returned.
         */
        getVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Resets the visibility states of all nodes to the initial states.
         */
        resetVisibility(): sap.ui.vk.ViewStateManagerBase;
        /**
         * Replace node's current opacity with its rest opacity stored in active view..
         */
        restoreRestOpacity(
          /**
           * The node reference.
           */
          nodeRef: any
        ): sap.ui.vk.ViewStateManager;
        /**
         * Replace node's current transformation with its rest transformation stored in active view..
         */
        restoreRestTransformation(
          /**
           * The node reference.
           */
          nodeRef: any
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the default highlighting color
         */
        setHighlightColor(
          /**
           * The new default highlighting color. The value can be defined as a string in the CSS color format or as
           * an integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
           * color should be used.
           */
          color: /* was: sap.ui.vk.CSSColor */ any | string | int
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the opacity of the nodes.
         */
        setOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
           * should be used.
           */
          opacity: float | null,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the outline color
         */
        setOutlineColor(
          /**
           * The new outline color. The value can be defined as a string in the CSS color format or as an integer
           * in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint color should
           * be used.
           */
          color: /* was: sap.ui.vk.CSSColor */ any | string | int
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the outline width
         */
        setOutlineWidth(
          /**
           * width of outline
           */
          width: float
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets or resets the outlining state of the nodes.
         */
        setOutliningStates(
          /**
           * The node reference or the array of node references of selected nodes.
           */
          outlinedNodeRefs: any | any[],
          /**
           * The node reference or the array of node references of unselected nodes.
           */
          unoutlinedNodeRefs: any | any[],
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Set node's opacity stored in active view.
         */
        setRestOpacity(
          /**
           * The node reference.
           */
          nodeRef: any,
          /**
           * The node opacitu
           */
          opacity: float
        ): sap.ui.vk.ViewStateManager;
        /**
         * Set node's rest transformation stored in active view.
         */
        setRestTransformation(
          /**
           * The node reference.
           */
          nodeRef: any,
          /**
           * vector for postion, array of size 3.
           */
          translation: float[],
          /**
           * quaternion for rotation, array of size 3.
           */
          quaternion: float[],
          /**
           * vector for scaling, array of size 3.
           */
          scale: float[]
        ): sap.ui.vk.ViewStateManager;
        /**
         * @deprecated (since 1.56.3)
         *
         * Sets the selection state of the nodes.
         */
        setSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new selection state of the nodes.
           */
          selected: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets or resets the selection state of the nodes.
         */
        setSelectionStates(
          /**
           * The node reference or the array of node references of selected nodes.
           */
          selectedNodeRefs: any | any[],
          /**
           * The node reference or the array of node references of unselected nodes.
           */
          unselectedNodeRefs: any | any[],
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets if showing the bounding box when nodes are selected
         */
        setShowSelectionBoundingBox(
          /**
           * `true` if bounding boxes of selected nodes are shown, `false` otherwise.
           */
          val: boolean
        ): void;
        /**
         * Sets the tint color of the nodes.
         */
        setTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
           * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
           * color should be used.
           */
          tintColor: /* was: sap.ui.vk.CSSColor */ any | int | null,
          /**
           * This flag indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the visibility state of the nodes.
         */
        setVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new visibility state of the nodes.
           */
          visible: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Copy node's current opacity into its rest opacity stored in active view.
         */
        updateRestOpacity(
          /**
           * The node reference.
           */
          nodeRef: any
        ): sap.ui.vk.ViewStateManager;
        /**
         * Copy node's current transformation into its rest transformation stored in active view.
         */
        updateRestTransformation(
          /**
           * The node reference.
           */
          nodeRef: any
        ): sap.ui.vk.ViewStateManager;
      }
      /**
       * @SINCE 1.32.0
       *
       * Manages the visibility and selection states of nodes in the scene.
       */
      class ViewStateManagerBase extends sap.ui.core.Element {
        /**
         * Constructor for a new ViewStateManagerBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new ViewStateManagerBase object.
           */
          mSettings?: sap.ui.vk.$ViewStateManagerBaseSettings
        );
        /**
         * Constructor for a new ViewStateManagerBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new ViewStateManagerBase object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ViewStateManagerBase object.
           */
          mSettings?: sap.ui.vk.$ViewStateManagerBaseSettings
        );

        /**
         * Sets a scene obtained as content from the associated content connector.
         *
         * This method should be overridden in derived classes.
         */
        _setContent(
          /**
           * New content or `null`.
           */
          content: sap.ui.vk.Scene
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:highlightColorChanged highlightColorChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when highlighting color is changed.
         */
        attachHighlightColorChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:highlightColorChanged highlightColorChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when highlighting color is changed.
         */
        attachHighlightColorChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the node hierarchy is replaced.
         */
        attachNodeHierarchyReplaced(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the node hierarchy is replaced.
         */
        attachNodeHierarchyReplaced(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:opacityChanged opacityChanged} event of this
         * `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when opacity of the nodes is changed.
         */
        attachOpacityChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:opacityChanged opacityChanged} event of this
         * `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when opacity of the nodes is changed.
         */
        attachOpacityChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:outlineColorChanged outlineColorChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when outlining color is changed.
         */
        attachOutlineColorChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:outlineColorChanged outlineColorChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when outlining color is changed.
         */
        attachOutlineColorChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:outlineWidthChanged outlineWidthChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when outline width is changed.
         */
        attachOutlineWidthChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:outlineWidthChanged outlineWidthChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when outline width is changed.
         */
        attachOutlineWidthChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:outliningChanged outliningChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the nodes are outlined/unoutlined.
         */
        attachOutliningChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:outliningChanged outliningChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the nodes are outlined/unoutlined.
         */
        attachOutliningChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:readyForAnimation readyForAnimation} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when viewport is ready for playing animation (e.g, camera is ready).
         */
        attachReadyForAnimation(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:readyForAnimation readyForAnimation} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when viewport is ready for playing animation (e.g, camera is ready).
         */
        attachReadyForAnimation(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:tintColorChanged tintColorChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when tint color of the nodes is changed.
         */
        attachTintColorChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:tintColorChanged tintColorChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when tint color of the nodes is changed.
         */
        attachTintColorChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:transformationChanged transformationChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when node's transformation changed.
         */
        attachTransformationChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:transformationChanged transformationChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when node's transformation changed.
         */
        attachTransformationChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewStateApplied viewStateApplied} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when View activated.
         */
        attachViewStateApplied(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewStateApplied viewStateApplied} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when View activated.
         */
        attachViewStateApplied(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewStateApplying viewStateApplying} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when View is about to be activated.
         */
        attachViewStateApplying(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewStateApplying viewStateApplying} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when View is about to be activated.
         */
        attachViewStateApplying(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:visibilityChanged visibilityChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the visibility of the node changes.
         */
        attachVisibilityChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:visibilityChanged visibilityChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the visibility of the node changes.
         */
        attachVisibilityChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:highlightColorChanged highlightColorChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHighlightColorChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeHierarchyReplaced(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:opacityChanged opacityChanged} event of this
         * `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOpacityChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:outlineColorChanged outlineColorChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOutlineColorChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:outlineWidthChanged outlineWidthChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOutlineWidthChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:outliningChanged outliningChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOutliningChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:readyForAnimation readyForAnimation} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachReadyForAnimation(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:tintColorChanged tintColorChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTintColorChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:transformationChanged transformationChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTransformationChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewStateApplied viewStateApplied} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewStateApplied(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewStateApplying viewStateApplying} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewStateApplying(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:visibilityChanged visibilityChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachVisibilityChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Enumerates IDs of the outlined nodes.
         */
        enumerateOutlinedNodes(
          /**
           * A function to call when the outlined nodes are enumerated. The function takes one parameter of type `string`.
           */
          callback: Function
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Enumerates IDs of the selected nodes.
         */
        enumerateSelection(
          /**
           * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
           */
          callback: Function
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewStateManagerBase with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.ui.vk.ViewStateManagerBase>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:highlightColorChanged highlightColorChanged} to attached listeners.
         */
        fireHighlightColorChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Highlighting color
             */
            highlightColor?: sap.ui.core.CSSColor;
            /**
             * Highlighting color in the ABGR format.
             */
            highlightColorABGR?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced} to attached listeners.
         */
        fireNodeHierarchyReplaced(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Old node hierarchy
             */
            oldNodeHierarchy?: sap.ui.vk.NodeHierarchy;
            /**
             * New node hierarchy
             */
            newNodeHierarchy?: sap.ui.vk.NodeHierarchy;
          }
        ): this;
        /**
         * Fires event {@link #event:opacityChanged opacityChanged} to attached listeners.
         */
        fireOpacityChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of nodes whose opacity changed.
             */
            changed?: any[];
            /**
             * Opacity assigned to the nodes. Could be either `float` or `float[]` if event was fired from a bulk operation.
             */
            opacity?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:outlineColorChanged outlineColorChanged} to attached listeners.
         */
        fireOutlineColorChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Outlining color
             */
            outlineColor?: sap.ui.core.CSSColor;
            /**
             * Outlining color in the ABGR format.
             */
            outlineColorABGR?: int;
          }
        ): this;
        /**
         * Fires event {@link #event:outlineWidthChanged outlineWidthChanged} to attached listeners.
         */
        fireOutlineWidthChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Outline width
             */
            width?: float;
          }
        ): this;
        /**
         * Fires event {@link #event:outliningChanged outliningChanged} to attached listeners.
         */
        fireOutliningChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of newly outlined nodes.
             */
            outlined?: any[];
            /**
             * References of newly unoutlined nodes.
             */
            unoutlined?: any[];
          }
        ): this;
        /**
         * Fires event {@link #event:readyForAnimation readyForAnimation} to attached listeners.
         */
        fireReadyForAnimation(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            view?: sap.ui.vk.View;
          }
        ): this;
        /**
         * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
         */
        fireSelectionChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of newly selected nodes.
             */
            selected?: any[];
            /**
             * References of newly unselected nodes.
             */
            unselected?: any[];
          }
        ): this;
        /**
         * Fires event {@link #event:tintColorChanged tintColorChanged} to attached listeners.
         */
        fireTintColorChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of nodes whose tint color changed.
             */
            changed?: any[];
            /**
             * Tint color assigned to the nodes. Could be either `sap.ui.core.CSSColor` or `sap.ui.core.CSSColor[]`
             * if event was fired from a bulk operation.
             */
            tintColor?: any;
            /**
             * Tint color in the ABGR format assigned to the nodes. Could be either `int` or `int[]` if event was fired
             * from a bulk operation.
             */
            tintColorABGR?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:transformationChanged transformationChanged} to attached listeners.
         */
        fireTransformationChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Reference to a changed node or array of node references.
             */
            changed?: any;
            /**
             * Node's transformation or array of nodes' transforms Transformation object will contain the following
             * fields of type `float[]`: translation scale angleAxis | euler | quaternion
             */
            transformation?: any;
          }
        ): this;
        /**
         * Fires event {@link #event:viewStateApplied viewStateApplied} to attached listeners.
         */
        fireViewStateApplied(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            view?: sap.ui.vk.View;
          }
        ): this;
        /**
         * Fires event {@link #event:viewStateApplying viewStateApplying} to attached listeners.
         */
        fireViewStateApplying(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            view?: sap.ui.vk.View;
          }
        ): this;
        /**
         * Fires event {@link #event:visibilityChanged visibilityChanged} to attached listeners.
         */
        fireVisibilityChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of newly shown nodes.
             */
            visible?: any[];
            /**
             * IDs of newly hidden nodes.
             */
            hidden?: any[];
          }
        ): this;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewStateManagerBase.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets the NodeHierarchy object associated with this ViewStateManagerBase object.
         */
        getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
        /**
         * Gets the opacity of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        getOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): float | float[];
        /**
         * Gets the outline color
         */
        getOutlineColor(
          /**
           * This flag indicates to return the outline color in the ABGR format, if it equals `false` then the color
           * is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | string | int;
        /**
         * Gets the outline width
         */
        getOutlineWidth(): float;
        /**
         * Gets the outlining state of the node.
         *
         * If a single node reference is passed to the method then a single outlining state is returned.
         *  If an array of node references is passed to the method then an array of outlining states is returned.
         */
        getOutliningState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Gets current value of property {@link #getRecursiveOutlining recursiveOutlining}.
         *
         * Default value is `false`.
         */
        getRecursiveOutlining(): boolean;
        /**
         * Gets current value of property {@link #getRecursiveSelection recursiveSelection}.
         *
         * Default value is `false`.
         */
        getRecursiveSelection(): boolean;
        /**
         * Gets the node transformation rotation component in specified format.
         */
        getRotation(
          /**
           * The node reference or the array of node references.
           */
          nodeRef: any | any[],
          /**
           * Rotation representation type.
           */
          rotationType: /* was: sap.ui.vk.RotationType */ any
        ): float[] | float[][];
        /**
         * Gets the node transformation scale component.
         */
        getScale(
          /**
           * The node reference.
           */
          nodeRef: any | any[]
        ): float[] | float[][];
        /**
         * Gets the selection state of the node.
         *
         * If a single node reference is passed to the method then a single selection state is returned.
         *  If an array of node references is passed to the method then an array of selection states is returned.
         */
        getSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Gets current value of property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * Default value is `false`.
         */
        getShouldTrackVisibilityChanges(): boolean;
        /**
         * Gets the tint color of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        getTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
           * is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | int | int[];
        /**
         * Gets the decomposed node local transformation matrix.
         */
        getTransformation(
          /**
           * The node reference.
           */
          nodeRef: any | any[]
        ): any | any[];
        /**
         * Gets the node transformation translation component.
         */
        getTranslation(
          /**
           * The node reference.
           */
          nodeRef: any
        ): float[] | float[][];
        /**
         * ID of the element which is the current target of the association {@link #getViewManager viewManager},
         * or `null`.
         */
        getViewManager(): sap.ui.core.ID;
        /**
         * Gets the visibility changes in the current ViewStateManagerBase object.
         */
        getVisibilityChanges(): string[];
        /**
         * Gets the visibility state of nodes.
         *
         * If a single node reference is passed to the method then a single visibility state is returned.
         *  If an array of node references is passed to the method then an array of visibility states is returned.
         */
        getVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Resets the visibility states of all nodes to the initial states.
         */
        resetVisibility(): sap.ui.vk.ViewStateManagerBase;
        /**
         * Replace node's current transformation with its rest transformation stored in active view..
         */
        restoreRestTransformation(
          /**
           * The node reference.
           */
          nodeRef: any
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): this;
        /**
         * Set highlight display state.
         */
        setHighlightDisplayState(
          /**
           * for playing highlight - playing, pausing, and stopped
           */
          state: /* was: sap.ui.vk.HighlightDisplayState */ any
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the opacity of the nodes.
         */
        setOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
           * should be used.
           */
          opacity: float | null,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the outline color
         */
        setOutlineColor(
          /**
           * The new outline color. The value can be defined as a string in the CSS color format or as an integer
           * in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint color should
           * be used.
           */
          color: /* was: sap.ui.vk.CSSColor */ any | string | int
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the outline width
         */
        setOutlineWidth(
          /**
           * width of outline
           */
          width: float
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets or resets the outlining state of the nodes.
         */
        setOutliningStates(
          /**
           * The node reference or the array of node references of outlined nodes.
           */
          outlinedNodeRefs: any | any[],
          /**
           * The node reference or the array of node references of unoutlined nodes.
           */
          unoutlinedNodeRefs: any | any[],
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean,
          /**
           * The flag to suppress outlineChanged event.
           */
          blockNotification: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets a new value for property {@link #getRecursiveOutlining recursiveOutlining}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setRecursiveOutlining(
          /**
           * New value for property `recursiveOutlining`
           */
          bRecursiveOutlining?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getRecursiveSelection recursiveSelection}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setRecursiveSelection(
          /**
           * New value for property `recursiveSelection`
           */
          bRecursiveSelection?: boolean
        ): this;
        /**
         * @deprecated (since 1.56.3)
         *
         * Sets the selection state of the nodes.
         */
        setSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new selection state of the nodes.
           */
          selected: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean,
          /**
           * The flag to suppress selectionChanged event.
           */
          blockNotification: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets or resets the selection state of the nodes.
         */
        setSelectionStates(
          /**
           * The node reference or the array of node references of selected nodes.
           */
          selectedNodeRefs: any | any[],
          /**
           * The node reference or the array of node references of unselected nodes.
           */
          unselectedNodeRefs: any | any[],
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean,
          /**
           * The flag to suppress selectionChanged event.
           */
          blockNotification: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets a new value for property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShouldTrackVisibilityChanges(
          /**
           * New value for property `shouldTrackVisibilityChanges`
           */
          bShouldTrackVisibilityChanges?: boolean
        ): this;
        /**
         * Sets the tint color of the nodes.
         */
        setTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
           * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
           * color should be used.
           */
          tintColor: /* was: sap.ui.vk.CSSColor */ any | int | null,
          /**
           * This flag indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the node transformation components.
         */
        setTransformation(
          /**
           * The node reference.
           */
          nodeRef: any | any[],
          /**
           * Node's transformation matrix or it components or array of such. Each object should contain one transform
           * matrix or exactly one of angleAxis, euler or quaternion components.
           */
          transformations: any | any[]
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the associated {@link #getViewManager viewManager}.
         */
        setViewManager(
          /**
           * ID of an element which becomes the new target of this viewManager association; alternatively, an element
           * instance may be given
           */
          oViewManager: sap.ui.core.ID | /* was: sap.ui.vk.ViewManager */ any
        ): this;
        /**
         * Sets the visibility state of the nodes.
         */
        setVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new visibility state of the nodes.
           */
          visible: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Copy node's current transformation into its rest transformation stored in active view.
         */
        updateRestTransformation(
          /**
           * The node reference.
           */
          nodeRef: any
        ): sap.ui.vk.ViewStateManagerBase;
      }
      /**
       * Sets the animation style type for annotation text.
       */
      enum AnnotationStyle {
        /**
         * Style 1
         */
        Default = "Default",
        /**
         * Style 5
         */
        Expand = "Expand",
        /**
         * Style 2
         */
        Explode = "Explode",
        /**
         * Style 4
         */
        Random = "Random",
        /**
         * Style 3
         */
        Square = "Square",
      }
      /**
       * Camera field of view binding types.
       */
      enum CameraFOVBindingType {
        /**
         * The field of view is bound to the width of the viewport.
         */
        Horizontal = "horizontal",
        /**
         * The field of view is bound to the width or the height of the viewport, whichever is bigger.
         */
        Maximum = "maximum",
        /**
         * The field of view is bound to the width or the height of the viewport, whichever is smaller.
         */
        Minimum = "minimum",
        /**
         * The field of view is bound to the height of the viewport.
         */
        Vertical = "vertical",
      }
      /**
       * Camera projection type.
       */
      enum CameraProjectionType {
        /**
         * {@link https://en.wikipedia.org/wiki/3D_projection#Orthographic_projection Orthographic projection}
         */
        Orthographic = "orthographic",
        /**
         * {@link https://en.wikipedia.org/wiki/3D_projection#Perspective_projection Perspective projection}
         */
        Perspective = "perspective",
      }
      /**
       * Button identifiers for {@link sap.ui.vk.DrawerToolbar}.
       */
      enum DrawerToolbarButton {
        CrossSection = "VIT-Cross-Section",

        CrossSectionAxis = "VIT-Cross-Section-Axis",

        FitToView = "VIT-Fit-To-View",

        FullScreen = "VIT-Fullscreen",

        Hide = "VIT-Hide",

        Orbit = "VIT-Orbit",

        Pan = "VIT-Pan",

        PredefinedViews = "VIT-Predefined-Views",

        RectangularSelection = "VIT-Rectangular-Selection",

        Show = "VIT-Show",

        Turntable = "VIT-Turntable",

        Zoom = "VIT-Zoom",
      }
      /**
       * Types of custom buttons supported on the MapContainer toolbar
       */
      enum MapContainerButtonType {
        Click = "Click",

        Toggle = "Toggle",
      }
      /**
       * Node content type for {@link sap.ui.vk.NodeHierarchy.createNode}.
       */
      enum NodeContentType {
        /**
         * Annotation node
         */
        Annotation = "Annotation",
        /**
         * Background node
         */
        Background = "Background",
        /**
         * Hotspot node
         */
        Hotspot = "Hotspot",
        /**
         * Reference node
         */
        Reference = "Reference",
        /**
         * Regular node
         */
        Regular = "Regular",
        /**
         * Symbol node
         */
        Symbol = "Symbol",
      }
      /**
       * Object type
       */
      enum ObjectType {
        Hotspot = "1",

        PMI = "0",
      }
      /**
       * Render mode for {@link sap.ui.vk.Viewport}.
       */
      enum RenderMode {
        /**
         * The default render mode.
         */
        Default = "Default",
        /**
         * The line illustration render mode.
         */
        LineIllustration = "LineIllustration",
        /**
         * The shaded illustration render mode.
         */
        ShadedIllustration = "ShadedIllustration",
        /**
         * The solid outline render mode.
         */
        SolidOutline = "SolidOutline",
        /**
         * The XRay render mode.
         */
        XRay = "XRay",
      }
      /**
       * Selection display options.
       */
      enum SelectionDisplayMode {
        Highlight = "Highlight",

        Outline = "Outline",
      }
      /**
       * SelectionMode options.
       */
      enum SelectionMode {
        Exclusive = "exclusive",

        None = "none",

        Sticky = "sticky",
      }
      /**
       * Visibility mode for {@link sap.ui.vk.Viewport#getViewInfo sap.ui.vk.Viewport.getViewInfo}.
       */
      enum VisibilityMode {
        /**
         * The view information contains a full definition of all nodes that are visible or hidden.
         */
        Complete = "complete",
        /**
         * The view information contains a list of nodes that have inverted visibility state compared to their original
         * state.
         */
        Differences = "differences",
      }
      /**
       * ZoomTo options.
       */
      enum ZoomTo {
        All = "all",

        Node = "node",

        NodeSetIsolation = "node_setisolation",

        Restore = "restore",

        RestoreRemoveIsolation = "restore_removeisolation",

        Selected = "selected",

        ViewBack = "view_back",

        ViewBottom = "view_bottom",

        ViewFront = "view_front",

        ViewLeft = "view_left",

        ViewRight = "view_right",

        ViewTop = "view_top",

        Visible = "visible",
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/ui/vk/AnimationPlayer": undefined;

    "sap/ui/vk/Annotation": undefined;

    "sap/ui/vk/AnnotationStyle": undefined;

    "sap/ui/vk/BaseNodeProxy": undefined;

    "sap/ui/vk/Camera": undefined;

    "sap/ui/vk/CameraFOVBindingType": undefined;

    "sap/ui/vk/CameraProjectionType": undefined;

    "sap/ui/vk/ContainerBase": undefined;

    "sap/ui/vk/ContainerContent": undefined;

    "sap/ui/vk/ContentConnector": undefined;

    "sap/ui/vk/ContentManager": undefined;

    "sap/ui/vk/ContentResource": undefined;

    "sap/ui/vk/ContentResourceSourceCategory": undefined;

    "sap/ui/vk/DrawerToolbar": undefined;

    "sap/ui/vk/DrawerToolbarButton": undefined;

    "sap/ui/vk/dvl/BaseNodeProxy": undefined;

    "sap/ui/vk/dvl/ContentManager": undefined;

    "sap/ui/vk/dvl/GraphicsCore": undefined;

    "sap/ui/vk/dvl/GraphicsCoreApi": undefined;

    "sap/ui/vk/dvl/LayerProxy": undefined;

    "sap/ui/vk/dvl/NodeHierarchy": undefined;

    "sap/ui/vk/dvl/NodeProxy": undefined;

    "sap/ui/vk/dvl/Scene": undefined;

    "sap/ui/vk/dvl/Viewport": undefined;

    "sap/ui/vk/dvl/ViewStateManager": undefined;

    "sap/ui/vk/FlexibleControl": undefined;

    "sap/ui/vk/FlexibleControlLayoutData": undefined;

    "sap/ui/vk/ImageContentManager": undefined;

    "sap/ui/vk/LayerProxy": undefined;

    "sap/ui/vk/LegendItem": undefined;

    "sap/ui/vk/library": undefined;

    "sap/ui/vk/ListPanel": undefined;

    "sap/ui/vk/ListPanelStack": undefined;

    "sap/ui/vk/Loco": undefined;

    "sap/ui/vk/MapContainer": undefined;

    "sap/ui/vk/MapContainerButtonType": undefined;

    "sap/ui/vk/Material": undefined;

    "sap/ui/vk/NativeViewport": undefined;

    "sap/ui/vk/NodeContentType": undefined;

    "sap/ui/vk/NodeHierarchy": undefined;

    "sap/ui/vk/NodeProxy": undefined;

    "sap/ui/vk/Notifications": undefined;

    "sap/ui/vk/ObjectType": undefined;

    "sap/ui/vk/OrthographicCamera": undefined;

    "sap/ui/vk/OutputSettings": undefined;

    "sap/ui/vk/Overlay": undefined;

    "sap/ui/vk/OverlayArea": undefined;

    "sap/ui/vk/PerspectiveCamera": undefined;

    "sap/ui/vk/ProgressIndicator": undefined;

    "sap/ui/vk/RedlineCollaboration": undefined;

    "sap/ui/vk/RedlineConversation": undefined;

    "sap/ui/vk/RedlineDesign": undefined;

    "sap/ui/vk/RedlineElement": undefined;

    "sap/ui/vk/RedlineElementComment": undefined;

    "sap/ui/vk/RedlineElementEllipse": undefined;

    "sap/ui/vk/RedlineElementFreehand": undefined;

    "sap/ui/vk/RedlineElementLine": undefined;

    "sap/ui/vk/RedlineElementRectangle": undefined;

    "sap/ui/vk/RedlineElementText": undefined;

    "sap/ui/vk/RedlineSurface": undefined;

    "sap/ui/vk/RenderMode": undefined;

    "sap/ui/vk/SafeArea": undefined;

    "sap/ui/vk/Scene": undefined;

    "sap/ui/vk/SceneTree": undefined;

    "sap/ui/vk/SelectionDisplayMode": undefined;

    "sap/ui/vk/SelectionMode": undefined;

    "sap/ui/vk/StepNavigation": undefined;

    "sap/ui/vk/svg/BaseNodeProxy": undefined;

    "sap/ui/vk/svg/ContentManager": undefined;

    "sap/ui/vk/svg/NodeHierarchy": undefined;

    "sap/ui/vk/svg/NodeProxy": undefined;

    "sap/ui/vk/svg/OrthographicCamera": undefined;

    "sap/ui/vk/svg/Scene": undefined;

    "sap/ui/vk/svg/ViewStateManager": undefined;

    "sap/ui/vk/Texture": undefined;

    "sap/ui/vk/threejs/BaseNodeProxy": undefined;

    "sap/ui/vk/threejs/ContentManager": undefined;

    "sap/ui/vk/threejs/Material": undefined;

    "sap/ui/vk/threejs/NodeHierarchy": undefined;

    "sap/ui/vk/threejs/NodeProxy": undefined;

    "sap/ui/vk/threejs/OrthographicCamera": undefined;

    "sap/ui/vk/threejs/PerspectiveCamera": undefined;

    "sap/ui/vk/threejs/Scene": undefined;

    "sap/ui/vk/threejs/Texture": undefined;

    "sap/ui/vk/threejs/Viewport": undefined;

    "sap/ui/vk/threejs/ViewStateManager": undefined;

    "sap/ui/vk/Toolbar": undefined;

    "sap/ui/vk/tools/AnchorPointTool": undefined;

    "sap/ui/vk/tools/AnchorPointToolOperation": undefined;

    "sap/ui/vk/tools/AxisAngleRotationTool": undefined;

    "sap/ui/vk/tools/CoordinateSystem": undefined;

    "sap/ui/vk/tools/CreateEllipseTool": undefined;

    "sap/ui/vk/tools/CreatePathTool": undefined;

    "sap/ui/vk/tools/CreateRectangleTool": undefined;

    "sap/ui/vk/tools/CreateTextTool": undefined;

    "sap/ui/vk/tools/CrossSectionTool": undefined;

    "sap/ui/vk/tools/DuplicateSvgHotspotTool": undefined;

    "sap/ui/vk/tools/Gizmo": undefined;

    "sap/ui/vk/tools/GizmoPlacementMode": undefined;

    "sap/ui/vk/tools/HitTestClickType": undefined;

    "sap/ui/vk/tools/HitTestIdMode": undefined;

    "sap/ui/vk/tools/HitTestTool": undefined;

    "sap/ui/vk/tools/MoveTool": undefined;

    "sap/ui/vk/tools/PredefinedView": undefined;

    "sap/ui/vk/tools/RectSelectTool": undefined;

    "sap/ui/vk/tools/RedlineTool": undefined;

    "sap/ui/vk/tools/RotatableAxis": undefined;

    "sap/ui/vk/tools/RotateOrbitTool": undefined;

    "sap/ui/vk/tools/RotateTool": undefined;

    "sap/ui/vk/tools/RotateTurntableTool": undefined;

    "sap/ui/vk/tools/ScaleTool": undefined;

    "sap/ui/vk/tools/SceneOrientationTool": undefined;

    "sap/ui/vk/tools/Tool": undefined;

    "sap/ui/vk/tools/ToolNodeSet": undefined;

    "sap/ui/vk/tools/TooltipTool": undefined;

    "sap/ui/vk/tools/TransformSvgElementTool": undefined;

    "sap/ui/vk/TransformationMatrix": undefined;

    "sap/ui/vk/View": undefined;

    "sap/ui/vk/Viewer": undefined;

    "sap/ui/vk/ViewGallery": undefined;

    "sap/ui/vk/ViewGroup": undefined;

    "sap/ui/vk/Viewport": undefined;

    "sap/ui/vk/ViewportBase": undefined;

    "sap/ui/vk/ViewStateManager": undefined;

    "sap/ui/vk/ViewStateManagerBase": undefined;

    "sap/ui/vk/VisibilityMode": undefined;

    "sap/ui/vk/ZoomTo": undefined;
  }
}
