// For Library Version: 1.92.0

declare namespace sap {
  namespace fe {
    /**
     * Test library for SAP Fiori elements
     */
    namespace test {
      namespace api {
        class DialogActions {
          /**
           *
           */
          constructor();

          /**
           * Cancels the dialog by clicking the corresponding button (for example, 'Cancel').
           */
          iCancel(): object;
          /**
           * Closes the dialog by pressing the 'Escape' key.
           */
          iClose(): object;
          /**
           * Confirms the dialog by clicking the corresponding button (for example, 'OK').
           */
          iConfirm(): object;
        }

        class DialogAssertions {
          /**
           *
           */
          constructor();

          /**
           * Checks the cancellation button of the dialog.
           */
          iCheckCancel(
            /**
             * Defines the expected state of the button
             */
            mButtonState?: object
          ): object;
          /**
           * Checks the confirmation button of the dialog.
           */
          iCheckConfirm(
            /**
             * Defines the expected state of the button
             */
            mButtonState?: object
          ): object;
          /**
           * Checks the dialog.
           */
          iCheckState(
            /**
             * Defines the expected state of the dialog
             */
            mDialogState?: object
          ): object;
        }

        class DialogCreateActions extends sap.fe.test.api.DialogActions {
          /**
           *
           */
          constructor();

          /**
           * Executes the `Create` action on the create dialog.
           */
          iExecuteCreate(): object;
        }

        class DialogCreateAssertions extends sap.fe.test.api.DialogAssertions {
          /**
           *
           */
          constructor();

          /**
           * Checks the `Create` action on the dialog.
           */
          iCheckCreate(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
        }

        class DialogMessageActions extends sap.fe.test.api.DialogActions {
          /**
           *
           */
          constructor();

          /**
           * Executes the `Back` action on the message dialog.
           */
          iExecuteBack(): object;
          /**
           * Executes the `Refresh` action on the message dialog.
           */
          iExecuteRefresh(): object;
        }

        class DialogMessageAssertions extends sap.fe.test.api.DialogAssertions {
          /**
           *
           */
          constructor();

          /**
           * Checks the `Back` action on the message dialog.
           */
          iCheckBack(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks whether a certain message is shown in the dialog.
           */
          iCheckMessage(
            /**
             * Defines the expected state of the message, e.g. `{ title: "My message" }`
             */
            oMessage?: object
          ): object;
          /**
           * Checks the `Refresh` action on the dialog.
           */
          iCheckRefresh(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
        }

        class DialogValueHelpActions extends sap.fe.test.api.DialogActions {
          /**
           *
           */
          constructor();

          /**
           * Adds a new condition.
           */
          iAddCondition(
            /**
             * The condition operator, like EQ, BT, LT, GT (see also {@link sap.ui.model.filter.FilterOperator})
             */
            sOperator: string,
            /**
             * The values to be set. If the operator requires more than one value, like BT (between), an array with
             * the two entries is expected
             */
            vValues: string | string[]
          ): object;
          /**
           * Changes an existing condition.
           */
          iChangeCondition(
            /**
             * The condition operator, like EQ, BT, LT, GT (see also {@link sap.ui.model.filter.FilterOperator})
             */
            sOperator: string,
            /**
             * The values to be set. If the operator requires more than one value like BT (between) an array with the
             * two entries is expected
             */
            vValues: string | string[],
            /**
             * The index of the condition to be altered. If not set, the index 0 is used
             */
            iConditionIndex?: number
          ): object;
          /**
           * Changes the value of a filter field.
           */
          iChangeFilterField(
            /**
             * The identifier of the filter field
             */
            vFieldIdentifier: string | sap.fe.test.api.FilterFieldIdentifier,
            /**
             * The new target value.
             */
            vValue?: string,
            /**
             * Set to `true` to clear previously set filters, otherwise all previously set values will be kept
             */
            bClearFirst?: boolean
          ): object;
          /**
           * Changes the value of the search field.
           */
          iChangeSearchField(
            /**
             * The new search value.
             */
            sSearchText?: string
          ): object;
          /**
           * Starts the search.
           */
          iExecuteSearch(): object;
          /**
           * Clicks the `Hide/Show Filters` button.
           */
          iExecuteShowHideFilters(): object;
          /**
           * Navigates to the `Define Conditions` tab.
           */
          iGoToDefineConditions(): object;
          /**
           * Navigates to the `Search and Select` tab.
           */
          iGoToSearchAndSelect(): object;
          /**
           * Removes an existing condition.
           */
          iRemoveCondition(
            /**
             * The index of the condition to be removed. If not set, the index 0 is used
             */
            iConditionIndex?: number
          ): object;
          /**
           * Resets the search field value.
           */
          iResetSearchField(): object;
          /**
           * Selects the specified rows.
           */
          iSelectRows(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues?: object | number,
            /**
             * Defines the expected state of the row
             */
            mState?: object
          ): object;
        }

        class DialogValueHelpAssertions extends sap.fe.test.api
          .DialogAssertions {
          /**
           *
           */
          constructor();

          /**
           * Checks the `Define conditions` tab.
           */
          iCheckDefineConditions(
            /**
             * Defines the expected state of the filter bar
             */
            mState?: object
          ): object;
          /**
           * Checks the filter bar.
           */
          iCheckFilterBar(
            /**
             * Defines the expected state of the filter bar
             */
            mState?: object
          ): object;
          /**
           * Checks a filter field. If `vConditionValues` is `undefined`, the current condition values are ignored.
           */
          iCheckFilterField(
            /**
             * The identifier of the filter field
             */
            vFieldIdentifier: object | sap.fe.test.api.FilterFieldIdentifier,
            /**
             * The expected value(s) of the filter field
             */
            vConditionValues?: string | object | any[],
            /**
             * The expected operator
             */
            sOperator?: string,
            /**
             * Defines the expected state of the filter field
             */
            mState?: object
          ): object;
          /**
           * Checks the rows of a table. If `mRowValues` is provided, only rows with the corresponding values are
           * considered. If `iNumberOfRows` is provided, the number of rows are checked with respect to the provided
           * `mRowValues` (if set) or in total. If `iNumberOfRows` is omitted, it checks for at least one matching
           * row. If `mState` is provided, the row must be in the given state.
           */
          iCheckRows(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             */
            mRowValues?: object,
            /**
             * The expected number of rows considering `mRowValues` and `mRowState`
             */
            iExpectedNumberOfRows?: number,
            /**
             * Defines the expected state of the target row
             */
            mState?: object
          ): object;
          /**
           * Checks the `Search and Select` tab.
           */
          iCheckSearchAndSelect(
            /**
             * Defines the expected state of the filter bar
             */
            mState?: object
          ): object;
          /**
           * Checks the search field in the filter bar. If the `sSearchText` parameter is `undefined`, the search
           * text is not validated.
           */
          iCheckSearchField(
            /**
             * The expected text in the search field
             */
            sSearchText?: string,
            /**
             * Defines the expected state of the search field
             */
            mState?: object
          ): object;
          /**
           * Checks the table.
           */
          iCheckTable(
            /**
             * Defines the expected state of the search field
             */
            mState?: object
          ): object;
        }

        class FilterBarActions extends sap.fe.test.api.FilterBarAPI {
          /**
           *
           */
          constructor();

          /**
           * Adds a field as a filter field.
           */
          iAddAdaptationFilterField(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: string | sap.fe.test.api.FilterFieldIdentifier
          ): object;
          /**
           * Changes the editing status filter field.
           */
          iChangeEditingStatus(
            /**
             * Value of an edit state
             */
            sEditState: sap.fe.test.api.EditState
          ): object;
          /**
           * Changes the value of the defined filter field.
           */
          iChangeFilterField(
            /**
             * The identifier for the filter field
             */
            vFieldIdentifier: string | sap.fe.test.api.FilterFieldIdentifier,
            /**
             * The new target value
             */
            vValue?: string,
            /**
             * Set to `true` to clear previously set filters, otherwise all previously set values will be kept
             */
            bClearFirst?: boolean
          ): object;
          /**
           * Changes the search field.
           */
          iChangeSearchField(
            /**
             * The new search text
             */
            sSearchText?: string
          ): object;
          /**
           * Executes a keyboard shortcut.
           */
          iExecuteKeyboardShortcut(
            /**
             * Pattern for the shortcut
             */
            sShortcut: string,
            /**
             * The identifier of the field
             */
            vFieldIdentifier?: string | sap.fe.test.api.FilterFieldIdentifier
          ): object;
          /**
           * Executes the search with the current filters.
           */
          iExecuteSearch(): object;
          /**
           * Opens the value help of the given field.
           */
          iOpenValueHelp(
            /**
             * The identifier of the filter field
             */
            vFieldIdentifier: string | sap.fe.test.api.FilterFieldIdentifier
          ): object;
          /**
           * Removes a field as a filter field.
           */
          iRemoveAdaptationFilterField(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: string | sap.fe.test.api.FilterFieldIdentifier
          ): object;
          /**
           * Resets the search field.
           */
          iResetSearchField(): object;
          /**
           * Saves a variant under the given name, or overwrites the current variant.
           */
          iSaveVariant(
            /**
             * The name of the new variant. If omitted, the current variant will be overwritten.
             */
            sVariantName?: string
          ): object;
        }

        class FilterBarAPI {
          /**
           *
           */
          constructor();

          /**
           * Confirms the filter bar adaptation. It can be used in an action chain as well as in an assertion chain.
           */
          iConfirmFilterAdaptation(): object;
          /**
           * Opens the filter bar adaptation. It can be used in an action chain as well as in an assertion chain.
           */
          iOpenFilterAdaptation(): object;
        }

        class FilterBarAssertions extends sap.fe.test.api.FilterBarAPI {
          /**
           *
           */
          constructor();

          /**
           * Checks a field in the adaptation dialog.
           */
          iCheckAdaptationFilterField(
            /**
             * The identifier of the filter field, or its label
             */
            vFieldIdentifier: string | sap.fe.test.api.FilterFieldIdentifier,
            /**
             * Defines the expected state of the filter field in the adaptation dialog
             */
            mState?: object
          ): object;
          /**
           * Check the filter field for the editing status.
           */
          iCheckEditingStatus(
            /**
             * The expected edit state value
             */
            sEditState?: sap.fe.test.api.EditState,
            /**
             * Defines the expected state of the filter field
             */
            mFieldState?: object
          ): object;
          /**
           * Checks whether the filter adaptation dialog is open.
           */
          iCheckFilterAdaptation(): object;
          /**
           * Checks a filter field. If `vConditionValues` is `undefined`, the current condition values are ignored.
           */
          iCheckFilterField(
            /**
             * The identifier of the filter field
             */
            vFieldIdentifier: object | sap.fe.test.api.FilterFieldIdentifier,
            /**
             * The expected value(s) of the filter field
             */
            vConditionValues?: string | object | any[],
            /**
             * The expected operator
             */
            sOperator?: string,
            /**
             * Defines the expected state of the filter field
             */
            mState?: object
          ): object;
          /**
           * Checks the search button.
           */
          iCheckSearch(
            /**
             * Defines the expected state of the Go button
             */
            mState?: object
          ): object;
          /**
           * Checks the search field in the filter bar. If the `sSearchText` parameter is `undefined`, the search
           * text is not validated.
           */
          iCheckSearchField(
            /**
             * The expected text in the search field
             */
            sSearchText?: string,
            /**
             * Defines the expected state of the search field
             */
            mState?: object
          ): object;
          /**
           * Checks the filter bar.
           */
          iCheckState(
            /**
             * Defines the expected state of the filter bar
             */
            mFilterBarState?: object
          ): object;
        }

        class FooterActionsBase {
          /**
           *
           */
          constructor();

          /**
           * Executes a footer action.
           */
          iExecuteAction(
            /**
             * The identifier of the action or its label
             */
            vActionIdentifier?: string | sap.fe.test.api.ActionIdentifier
          ): object;
        }

        class FooterActionsOP extends sap.fe.test.api.FooterActionsBase {
          /**
           *
           */
          constructor();

          /**
           * Confirms the Cancel action when user clicks `Cancel` in draft mode.
           */
          iConfirmCancel(): object;
          /**
           * Executes the Apply action in the footer bar of a sub-object page.
           */
          iExecuteApply(): object;
          /**
           * Executes the Cancel action in the footer bar of the object page.
           */
          iExecuteCancel(): object;
          /**
           * Executes the Save or Create action in the footer bar of the object page.
           */
          iExecuteSave(): object;
        }

        class FooterAssertionsBase {
          /**
           *
           */
          constructor();

          /**
           * Checks the state of an action in the footer bar.
           */
          iCheckAction(
            /**
             * The identifier of an action
             */
            vActionIdentifier: string | sap.fe.test.api.ActionIdentifier,
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the state of the footer bar.
           */
          iCheckState(
            /**
             * Defines the expected state of the footer bar
             */
            mState?: object
          ): object;
        }

        class FooterAssertionsOP extends sap.fe.test.api.FooterAssertionsBase {
          /**
           *
           */
          constructor();

          /**
           * Checks the state of the Apply action in the footer bar.
           */
          iCheckApply(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the state of the Cancel action in the footer bar.
           */
          iCheckCancel(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks for draft state 'Clear' in the footer bar.
           */
          iCheckDraftStateClear(): object;
          /**
           * Checks for draft state 'Saved' in the footer bar.
           */
          iCheckDraftStateSaved(): object;
          /**
           * Checks the state of the Save or Create action in the footer bar.
           */
          iCheckSave(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
        }

        class FormActions extends sap.fe.test.api.FormAPI {
          /**
           *
           */
          constructor();

          /**
           * Changes the value of a field within a form.
           */
          iChangeField(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: sap.fe.test.api.FieldIdentifier | string,
            /**
             * The value to be set for the field
             */
            sValue?: string
          ): object;
          /**
           * Toggles the value of a checkbox within a form.
           */
          iClickCheckBox(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: sap.fe.test.api.FieldIdentifier
          ): object;
          /**
           * Clicks a link within a form.
           */
          iClickLink(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: sap.fe.test.api.FieldIdentifier | string
          ): object;
          /**
           * Executes an action assigned to a form in a subsection.
           */
          iExecuteAction(
            /**
             * The identifier of the action or its label
             */
            vActionIdentifier: string | sap.fe.test.api.ActionIdentifier
          ): object;
          /**
           * Executes the Show Less action of a form in a subsection.
           */
          iExecuteShowLess(): object;
          /**
           * Executes the Show More action of a form in a subsection.
           */
          iExecuteShowMore(): object;
          /**
           * Opens the value help of the given field.
           */
          iOpenValueHelp(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: string | sap.fe.test.api.FieldIdentifier
          ): object;
        }

        class FormAPI {
          /**
           *
           */
          constructor();
        }

        class FormAssertions extends sap.fe.test.api.FormAPI {
          /**
           *
           */
          constructor();

          /**
           * Checks the state of an action in a subsection.
           */
          iCheckAction(
            /**
             * The identifier of an action
             */
            vActionIdentifier: string | sap.fe.test.api.ActionIdentifier,
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the content and state of a field within a form.
           */
          iCheckField(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: string | sap.fe.test.api.FieldIdentifier,
            /**
             * Expected value(s) of the field. if passed as an object, the following pattern will be considered:
             * ```javascript
             *
             * {
             *     value: , 		// optional
             *     description:  	// optional
             * }
             * ```
             */
            vValue?: string | any[] | object,
            /**
             * Defines the expected state of the field
             */
            mState?: object
          ): object;
          /**
           * Checks the field is a link with the given text and state.
           */
          iCheckLink(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: string | sap.fe.test.api.FieldIdentifier,
            /**
             * The link text
             */
            sText?: string,
            /**
             * Defines the expected state of the field
             */
            mState?: object
          ): object;
          /**
           * Checks the Show Less action of a form in a subsection.
           */
          iCheckShowLess(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the Show More action of a form in a subsection.
           */
          iCheckShowMore(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the state of the form.
           */
          iCheckState(
            /**
             * Defines the expected state of the form
             */
            mState: object
          ): object;
        }

        class HeaderActions {
          /**
           *
           */
          constructor();

          /**
           * Executes an action in the header toolbar of an object page.
           */
          iExecuteAction(
            /**
             * The identifier of the action
             */
            vActionIdentifier: string | sap.fe.test.api.ActionIdentifier
          ): object;
          /**
           * Executes the Delete action in the header toolbar of an object page.
           */
          iExecuteDelete(): object;
          /**
           * Executes the Edit action in the header toolbar of an object page.
           */
          iExecuteEdit(): object;
          /**
           * Executes an action in the drop-down menu that is currently open.
           */
          iExecuteMenuAction(
            /**
             * The label of the action or its state
             */
            vAction: string | object
          ): object;
          /**
           * Navigates to the next sub-object page.
           */
          iExecutePaginatorDown(): object;
          /**
           * Navigates to the previous sub-object page.
           */
          iExecutePaginatorUp(): object;
          /**
           * Executes the Related Apps action in the header toolbar of an object page.
           */
          iExecuteRelatedApps(): object;
        }

        class HeaderActionsLR {
          /**
           *
           */
          constructor();

          /**
           * Executes an action in the header toolbar of a list report.
           */
          iExecuteAction(
            /**
             * The identifier of the action
             */
            vActionIdentifier?: string | sap.fe.test.api.ActionIdentifier
          ): object;
        }

        class HeaderAssertions {
          /**
           *
           */
          constructor();

          /**
           * Checks an action in the header toolbar.
           */
          iCheckAction(
            /**
             * The identifier of the action
             */
            vActionIdentifier: string | sap.fe.test.api.ActionIdentifier,
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the `Delete` action in the header toolbar.
           */
          iCheckDelete(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the `Edit` action in the header toolbar.
           */
          iCheckEdit(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks a field within a field group in the object page header.
           */
          iCheckFieldInFieldGroup(
            /**
             * The identifier of the field
             */
            vFieldIdentifier: sap.fe.test.api.FieldIdentifier | string,
            /**
             * The value to check. If it is an array, the first entry is considered as the value and the second as the
             * description. If it is an object it must follow this pattern:
             * ```javascript
             *
             * 	{
             * 		value: , 		// optional
             * 		description:  	// optional
             * 	}
             * ```
             */
            vValue?: string | any[] | object,
            /**
             * Defines the expected state of the field
             */
            mState?: object
          ): object;
          /**
           * Checks the custom facet in the object page header.
           */
          iCheckHeaderFacet(
            /**
             * The Identifier of the header facet
             */
            vFacetIdentifier: sap.fe.test.api.HeaderFacetIdentifier,
            /**
             * Defines the expected state
             */
            mState?: object
          ): object;
          /**
           * Checks an action in the popover that is currently open.
           */
          iCheckMenuAction(
            /**
             * The state map or label of the action
             */
            vAction: object | string
          ): object;
          /**
           * Checks the paginator down button.
           */
          iCheckPaginatorDown(
            /**
             * Defines the expected state of the button
             */
            mState: object
          ): object;
          /**
           * Checks the paginator up button.
           */
          iCheckPaginatorUp(
            /**
             * Defines the expected state of the button
             */
            mState: object
          ): object;
          /**
           * Checks the `Related Apps` action in the header toolbar.
           */
          iCheckRelatedApps(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the `Save as Tile` action.
           */
          iCheckSaveAsTile(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks `Send Email` action.
           */
          iCheckSendEmail(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the title and description of the object page.
           *
           * If either title or description is `undefined`, it will not be checked.
           */
          iCheckTitle(
            /**
             * Title of the object page header
             */
            sTitle?: string,
            /**
             * Description of the object page header
             */
            sDescription?: string
          ): object;
        }

        class HeaderAssertionsLR {
          /**
           *
           */
          constructor();

          /**
           * Checks an action of the header toolbar.
           */
          iCheckAction(
            /**
             * The identifier of the action, or its label
             */
            vActionIdentifier?: string | sap.fe.test.api.ActionIdentifier,
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the `Save as Tile` action.
           */
          iCheckSaveAsTile(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the `Send Email` action.
           */
          iCheckSendEmail(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
        }

        class TableActions extends sap.fe.test.api.TableAPI {
          /**
           *
           */
          constructor();

          /**
           * Adds a field as a column to the table.
           */
          iAddAdaptationColumn(
            /**
             * The identifier of the column field, or its label
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier
          ): object;
          /**
           * Aggregates the table entries by the specified column.
           */
          iAggregateByColumn(
            /**
             * The identifier of the column field, its label or index
             */
            vColumnIdentifier:
              | string
              | sap.fe.test.api.ColumnIdentifier
              | number,
            /**
             * The target field to group on in case of a complex property
             */
            sFieldLabel?: string
          ): object;
          /**
           * Adds a filter condition to the filter field.
           */
          iChangeFilterField(
            /**
             * The identifier of the column
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier,
            /**
             * Defines the value of the filter field condition
             */
            vValue: string | object,
            /**
             * Set to `true` to clear previously set filters, otherwise all previously set values will be kept
             */
            bClearFirst?: boolean
          ): object;
          /**
           * Changes the specified row. The given value map must match exactly one row.
           *
           * If only one parameter is provided, it must be the `mTargetValues` and `mRowValues` is considered undefined.
           * If `vRowValues` are not defined, then the targetValues are inserted in the creationRow.
           */
          iChangeRow(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues: object | number,
            /**
             * A map of columns (either name or index) to its new value. The columns do not need to match the ones defined
             * in `vRowValues`.
             */
            mTargetValues: object
          ): object;
          /**
           * Changes the specified row. The given value map must match exactly one row.
           *
           * If only one parameter is provided, it must be the `mTargetValues` and `mRowValues` is considered undefined.
           * If `vRowValues` are not defined, then the targetValues are inserted in the creationRow.
           */
          iChangeRow(
            /**
             * A map of columns (either name or index) to its new value. The columns do not need to match the ones defined
             * in `vRowValues`.
             */
            mTargetValues: object
          ): object;
          /**
           * Adds a field to the sorting of the table via the sort dialog.
           */
          iChangeSortOrder(
            /**
             * The identifier of the column field, or its label
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier,
            /**
             * The sort order, default is {@link sap.ui.core.SortOrder.Ascending}
             */
            sSortOrder?: sap.ui.core.SortOrder
          ): object;
          /**
           * Collapses a row corresponding to a visual group.
           */
          iCollapseGroupRow(
            /**
             * The level of the group row to be collapsed (1-based)
             */
            iLevel: number,
            /**
             * The title of the group row to be collapsed
             */
            sTitle: string
          ): object;
          /**
           * Executes an action on the table.
           */
          iExecuteAction(
            /**
             * The identifier of the action, or its label
             */
            vActionIdentifier?: string | sap.fe.test.api.ActionIdentifier
          ): object;
          /**
           * Executes the `Create` action on the table.
           */
          iExecuteCreate(): object;
          /**
           * Executes the `Delete` action on the table.
           */
          iExecuteDelete(): object;
          /**
           * Executes the `Fullscreen` action on the table.
           */
          iExecuteFullScreen(): object;
          /**
           * Executes an action that is available in a certain column within a table row.
           */
          iExecuteInlineAction(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues: object | number,
            /**
             * The column name, label or index
             */
            vColumn: string | number
          ): object;
          /**
           * Executes an action that is available in a certain column within a table row.
           */
          iExecuteInlineAction(
            /**
             * The column name, label or index
             */
            vColumn: string | number
          ): object;
          /**
           * Executes the action to create a row in the table.
           */
          iExecuteInlineCreate(): object;
          /**
           * Executes a keyboard shortcut on the table or a cell control. If only `sShortcut` is defined, the shortcut
           * is executed on the table directly. If additionally `vRowValues` and `vColumn` are defined, the shortcut
           * is executed on table cell level.
           */
          iExecuteKeyboardShortcut(
            /**
             * The shortcut pattern
             */
            sShortcut: string,
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues: object | number,
            /**
             * The column name, label or index
             */
            vColumn: string | number
          ): object;
          /**
           * Executes a keyboard shortcut on the table or a cell control. If only `sShortcut` is defined, the shortcut
           * is executed on the table directly. If additionally `vRowValues` and `vColumn` are defined, the shortcut
           * is executed on table cell level.
           */
          iExecuteKeyboardShortcut(
            /**
             * The shortcut pattern
             */
            sShortcut: string,
            /**
             * The column name, label or index
             */
            vColumn: string | number
          ): object;
          /**
           * Executes an action form the drop-down menu that is currently open.
           */
          iExecuteMenuAction(
            /**
             * The label of the action or its state
             */
            vAction: string | object
          ): object;
          /**
           * Executes the `Paste` action on the table.
           */
          iExecutePaste(): object;
          /**
           * Executes the `Show/Hide details` action on the table.
           */
          iExecuteShowHideDetails(
            /**
             * Optional parameter to enforce a certain state (showing details yes/no corresponds to true/false); if
             * not set, state is toggled
             */
            bShowDetails?: boolean
          ): object;
          /**
           * Expands a row corresponding to a visual group.
           */
          iExpandGroupRow(
            /**
             * The level of the group row to be expanded (1-based)
             */
            iLevel: number,
            /**
             * The title of the group row to be expanded
             */
            sTitle: string
          ): object;
          /**
           * Groups the table entries by the specified column.
           */
          iGroupByColumn(
            /**
             * The identifier of the column field, its label or index
             */
            vColumnIdentifier:
              | string
              | sap.fe.test.api.ColumnIdentifier
              | number,
            /**
             * The target field to group on in case of a complex property
             */
            sFieldLabel?: string
          ): object;
          /**
           * Pastes data into the table.
           */
          iPasteData(
            /**
             * The data to be pasted
             */
            aData: string[][]
          ): object;
          /**
           * Presses the control in the table cell.
           */
          iPressCell(
            /**
             * Specifies the target row by column-value map, e.g.
             * ```javascript
             *
             * {
             *     0: "Max",
             *     "Last Name": "Mustermann"
             * }
             * ```
             */
            mRowValues: object,
            /**
             * The column name, label or index
             */
            vColumn: string | number
          ): object;
          /**
           * Presses the control in the table cell.
           */
          iPressCell(
            /**
             * The column name, label or index
             */
            vColumn: string | number
          ): object;
          /**
           * Clicks the specified row.
           */
          iPressRow(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues?: object | number
          ): object;
          /**
           * Removes a field as a column from the table.
           */
          iRemoveAdaptationColumn(
            /**
             * The identifier of the column field, or its label
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier
          ): object;
          /**
           * Removes the variant of the given name.
           */
          iRemoveVariant(
            /**
             * The name of the variant to be removed
             */
            sVariantName: string
          ): object;
          /**
           * Saves a variant under the given name, or overwrites the current one.
           */
          iSaveVariant(
            /**
             * The name of the new variant. If omitted, the current variant will be overwritten
             */
            sVariantName?: string
          ): object;
          /**
           * Selects all rows in a table.
           */
          iSelectAllRows(): object;
          /**
           * Selects a quick-filter item on the table.
           */
          iSelectQuickFilterItem(
            /**
             * If passed as an object, the following pattern will be considered:
             * ```javascript
             *
             * 	{
             * 		:
             *  }
             * ```
             *  If using a plain string as the identifier, it is considered the item label
             */
            vItemIdentifier?: object | string
          ): object;
          /**
           * Selects the specified rows.
           */
          iSelectRows(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues?: object | number,
            /**
             * Defines the expected state of the row
             */
            mState?: object
          ): object;
          /**
           * Selects the variant of the given name.
           */
          iSelectVariant(
            /**
             * The name of the variant to be selected
             */
            sVariantName: string
          ): object;
          /**
           * Sets the variant as the default.
           */
          iSetDefaultVariant(
            /**
             * The name of the variant to be set as the default variant. If omitted, the Standard variant is set as
             * the default
             */
            sVariantName: string
          ): object;
          /**
           * Sorts the table entries by the specified column.
           */
          iSortByColumn(
            /**
             * The identifier of the column field, its label or index
             */
            vColumnIdentifier:
              | string
              | sap.fe.test.api.ColumnIdentifier
              | number,
            /**
             * The target field to sort by in case of a complex property
             */
            sFieldLabel: string,

            bDescending: undefined
          ): object;
          /**
           * Sorts the table entries by the specified column.
           */
          iSortByColumn(
            /**
             * The identifier of the column field, its label or index
             */
            vColumnIdentifier:
              | string
              | sap.fe.test.api.ColumnIdentifier
              | number,

            bDescending: undefined
          ): object;
        }

        class TableAPI {
          /**
           *
           */
          constructor();

          /**
           * Confirms and closes the adaptation dialog of the table.
           */
          iConfirmColumnAdaptation(): object;
          /**
           * Confirms and closes the sorting dialog of the table.
           */
          iConfirmColumnSorting(): object;
          /**
           * Confirms and closes the filtering dialog of the table.
           */
          iConfirmFilterDialog(): object;
          /**
           * Opens the column adaptation dialog of the table.
           */
          iOpenColumnAdaptation(): object;
          /**
           * Opens the sorting dialog of the table.
           */
          iOpenColumnSorting(): object;
          /**
           * Opens the filtering dialog of the table.
           */
          iOpenFilterDialog(): object;
        }

        class TableAssertions extends sap.fe.test.api.TableAPI {
          /**
           *
           */
          constructor();

          /**
           * Checks the state of a table action.
           */
          iCheckAction(
            /**
             * The identifier of the action, or its label
             */
            vActionIdentifier: string | sap.fe.test.api.ActionIdentifier,
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks a field in the adaptation dialog.
           */
          iCheckAdaptationColumn(
            /**
             * The identifier of the column, or its label
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier,
            /**
             * Defines the expected state of the field control in the adaptation dialog
             */
            mState?: object
          ): object;
          /**
           * Checks the state of the cells of a table.
           */
          iCheckCells(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             *  Alternatively, the 0-based row index can be used.
             */
            vRowValues: object | number,
            /**
             * A map of columns and their state. The map looks like
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: {
             * 			header: "My header"
             * 		}
             * 	}
             * ```
             */
            mColumnStateMap: object
          ): object;
          /**
           * Checks the state of the cells of a table.
           */
          iCheckCells(
            /**
             * A map of columns and their state. The map looks like
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: {
             * 			header: "My header"
             * 		}
             * 	}
             * ```
             */
            mColumnStateMap: object
          ): object;
          /**
           * Checks whether the adaptation button is available for the table.
           */
          iCheckColumnAdaptation(): object;
          /**
           * Checks whether the column adaptation dialog is open.
           */
          iCheckColumnAdaptationDialog(): object;
          /**
           * Checks whether the filter button is available for the table.
           */
          iCheckColumnFiltering(): object;
          /**
           * Checks the state of the columns of the table.
           */
          iCheckColumns(
            /**
             * The expected number of columns
             */
            iExpectedNumberOfColumns?: number,
            /**
             * A map of columns and their expected state. The map looks like
             * ```javascript
             *
             * 	{
             * 		<columnName | columnLabel | columnIndex>: {
             * 			header: "My header"
             * 		}
             * 	}
             * ```
             */
            mColumnStateMap?: object
          ): object;
          /**
           * Checks whether the sort button is available for the table.
           */
          iCheckColumnSorting(): object;
          /**
           * Checks the `Create` action of the table.
           */
          iCheckCreate(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the state of the CreationRow button in the table.
           */
          iCheckCreationRow(
            /**
             * Defines the expected row values. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             */
            mRowValues?: object,
            /**
             * Defines the expected state of the target row
             */
            mState?: object
          ): object;
          /**
           * Checks the `Delete` action of the table.
           */
          iCheckDelete(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks whether the export button is available for the table.
           */
          iCheckExport(): object;
          /**
           * Checks a filter field in the filter dialog.
           */
          iCheckFilterField(
            /**
             * The identifier of the field, or its label
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier,
            /**
             * Defines the expected state of the field control in the filter dialog
             */
            mState?: object
          ): object;
          /**
           * Checks the `Fullscreen` action of the table.
           */
          iCheckFullScreen(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks an action in the drop-down menu that is currently open.
           */
          iCheckMenuAction(
            /**
             * The label of the action, or its state
             */
            vAction: object | string
          ): object;
          /**
           * Checks a messageStrip on a table.
           */
          iCheckMessageStrip(
            /**
             * Defines the expected properties of the messageStrip in the table
             */
            mProperty?: object
          ): object;
          /**
           * Checks the `Paste` action of the table.
           */
          iCheckPaste(
            /**
             * Defines the expected state of the button
             */
            mState?: object
          ): object;
          /**
           * Checks the quick filter action of the table.
           */
          iCheckQuickFilter(
            /**
             * Defines the expected state of the control
             */
            mState?: object
          ): object;
          /**
           * Checks the number of items in the quick-filter menu.
           */
          iCheckQuickFilterItems(
            /**
             * The expected number of quick-filter items
             */
            iExpectedNumberOfItems: number
          ): object;
          /**
           * Checks the rows of a table. If `mRowValues` is provided, only rows with the corresponding values are
           * considered. If `iNumberOfRows` is provided, the number of rows are checked with respect to the provided
           * `mRowValues` (if set) or in total. If `iNumberOfRows` is omitted, it checks for at least one matching
           * row. If `mState` is provided, the row must be in the given state.
           */
          iCheckRows(
            /**
             * Defines the row values of the target row. The pattern is:
             * ```javascript
             *
             * 	{
             * 		<column-name-or-index>: <expected-value>
             *  }
             * ```
             */
            mRowValues?: object,
            /**
             * The expected number of rows considering `mRowValues` and `mRowState`
             */
            iExpectedNumberOfRows?: number,
            /**
             * Defines the expected state of the target row
             */
            mState?: object,
            /**
             * Defines the expected empty columns
             */
            vEmptyColumns?: any[]
          ): object;
          /**
           * Checks a field in the sorting dialog.
           */
          iCheckSortOrder(
            /**
             * The identifier of the column, or its label
             */
            vColumnIdentifier: string | sap.fe.test.api.ColumnIdentifier,
            /**
             * The sort order of the column, default is {@link sap.ui.core.SortOrder.Ascending}
             */
            sSortOrder?: sap.ui.core.SortOrder,
            /**
             * Defines if the order is checked via sorting dialog, or via the column itself
             */
            bCheckPersonalization?: boolean
          ): object;
          /**
           * Checks the state of the table.
           */
          iCheckState(
            /**
             * Defines the expected state of the table
             */
            mState?: object
          ): object;
        }
        /**
         * Enum for supported dialog types.
         */
        enum DialogType {
          /**
           * A default dialog for action parameters
           */
          Action = "undefined",
          /**
           * A simple dialog supporting base checks and actions such as 'Confirm' and 'Cancel'
           */
          Confirmation = "undefined",
          /**
           * A dialog used for creating a new object
           */
          Create = "undefined",
          /**
           * A dialog used for showing an error message
           */
          Error = "undefined",
          /**
           * A message dialog for showing back-end messages
           */
          Message = "undefined",
          /**
           * A ValueHelp dialog that has a condition definition panel or a filterable selection table
           */
          ValueHelp = "undefined",
        }
        /**
         * Enum for supported editing states.
         */
        enum EditState {
          /**
           * All
           */
          All = "undefined",
          /**
           * Locked by Another User
           */
          Locked = "undefined",
          /**
           * Own Draft
           */
          OwnDraft = "undefined",
          /**
           * Unchanged
           */
          Unchanged = "undefined",
          /**
           * Unsaved Changes by Another User
           */
          UnsavedChanges = "undefined",
        }
        /**
         * An action identifier
         */
        type ActionIdentifier = {
          /**
           * The name of the service
           */
          service: string;
          /**
           * The name of the action
           */
          action: string;
          /**
           * Defines whether the action is a bound action (default: false)
           */
          unbound?: boolean;
        };

        /**
         * A column identifier
         */
        type ColumnIdentifier = {
          /**
           * The technical name of the column
           */
          name: string;
        };

        /**
         * A dialog identifier
         */
        type DialogIdentifier = {
          /**
           * The type of the dialog
           */
          type: sap.fe.test.api.DialogType;
        };

        /**
         * A field identifier
         */
        type FieldIdentifier = {
          /**
           * The name of the field group containing the field
           */
          fieldGroup?: string;
          /**
           * The name of the field
           */
          property: string;
          /**
           * The name of the connected field containing the field
           */
          connectedFields?: string;
        };

        /**
         * A filter field identifier
         */
        type FilterFieldIdentifier = {
          /**
           * The name of the property
           */
          property: string;
        };

        /**
         * A form identifier
         */
        type FormIdentifier = {
          /**
           * The facet ID
           */
          section: string;
          /**
           * The fieldgroup ID
           */
          fieldGroup: string;
        };

        /**
         * An identifier for the header facet
         */
        type HeaderFacetIdentifier = {
          /**
           * The identifier of the facet
           */
          facetId: string;
          /**
           * Defines whether the facet is a collection facet (default: `false`)
           */
          collection?: boolean;
          /**
           * Defines whether the facet is a custom header facet (default: `false`)
           */
          custom?: boolean;
        };

        /**
         * A section identifier
         */
        type SectionIdentifier = {
          /**
           * The name of the section facet
           */
          section: string;
          /**
           * The name of the sub-section facet
           */
          subSection?: string;
        };

        /**
         * A table identifier
         */
        type TableIdentifier = {
          /**
           * The name of the navigation property used for the table
           */
          property: string;
        };
      }

      namespace ListReport {
        /**
         * ListReport actions
         */
        interface actions {
          /**
           * Collapses or expands the page header.
           */
          iCollapseExpandPageHeader(
            /**
             * Defines whether the header should be collapsed, else it is expanded (default)
             */
            bCollapse?: boolean
          ): object;
          /**
           * Returns a {@link sap.fe.test.api.FilterBarActions} instance.
           */
          onFilterBar(): sap.fe.test.api.FilterBarActions;
          /**
           * Returns a {@link sap.fe.test.api.HeaderActionsLR} instance.
           */
          onHeader(): sap.fe.test.api.HeaderActionsLR;
          /**
           * Returns a {@link sap.fe.test.api.TableActions} instance for the specified table.
           */
          onTable(
            /**
             * The identifier of the table, or its header title
             */
            vTableIdentifier: string | sap.fe.test.api.TableIdentifier
          ): sap.fe.test.api.TableActions;
        }
        const actions: actions;

        /**
         * ListReport assertions
         */
        interface assertions {
          /**
           * Returns a {@link sap.fe.test.api.FilterBarAssertions} instance.
           */
          onFilterBar(): sap.fe.test.api.FilterBarAssertions;
          /**
           * Returns a {@link sap.fe.test.api.HeaderAssertionsLR} instance.
           */
          onHeader(): sap.fe.test.api.HeaderAssertionsLR;
          /**
           * Returns a {@link sap.fe.test.api.TableAssertions} instance for the specified table.
           */
          onTable(
            /**
             * The identifier of the table, or its header title
             */
            vTableIdentifier: string | sap.fe.test.api.TableIdentifier
          ): sap.fe.test.api.TableAssertions;
        }
        const assertions: assertions;
      }

      namespace ObjectPage {
        /**
         * ObjectPage actions
         */
        interface actions {
          /**
           * Collapses or expands the page header.
           */
          iCollapseExpandPageHeader(
            /**
             * Defines whether header should be collapsed, else it gets expanded (default)
             */
            bCollapse?: boolean
          ): object;
          /**
           * Navigates to or focuses on the defined section.
           */
          iGoToSection(
            /**
             * The identifier of a section, or its label if passed as an object, the following pattern will be considered:
             *
             * ```javascript
             *
             * {
             *     section: ,
             *     subSection:
             * }
             * ```
             */
            vSectionIdentifier: string | sap.fe.test.api.SectionIdentifier
          ): object;
          /**
           * Returns a {@link sap.fe.test.api.FooterActionsOP} instance.
           */
          onFooter(): sap.fe.test.api.FooterActionsOP;
          /**
           * Returns a {@link sap.fe.test.api.FormActions} instance.
           */
          onForm(
            /**
             * The identifier of the form, or its title
             */
            vFormIdentifier: sap.fe.test.api.FormIdentifier | string
          ): sap.fe.test.api.FormActions;
          /**
           * Returns a {@link sap.fe.test.api.HeaderActions} instance.
           */
          onHeader(): sap.fe.test.api.HeaderActions;
          /**
           * Returns a {@link sap.fe.test.api.TableActions} instance for the specified table.
           */
          onTable(
            /**
             * The identifier of the table, or its header title
             */
            vTableIdentifier: string | sap.fe.test.api.TableIdentifier
          ): sap.fe.test.api.TableActions;
        }
        const actions: actions;

        /**
         * ObjectPage assertions
         */
        interface assertions {
          /**
           * Returns a {@link sap.fe.test.api.FooterAssertionsOP} instance.
           */
          onFooter(): sap.fe.test.api.FooterAssertionsOP;
          /**
           * Returns a {@link sap.fe.test.api.FormAssertions} instance.
           */
          onForm(
            /**
             * The identifier of the form, or its title
             */
            vFormIdentifier: sap.fe.test.api.FormIdentifier | string
          ): sap.fe.test.api.FormAssertions;
          /**
           * Returns a {@link sap.fe.test.api.HeaderAssertions} instance.
           */
          onHeader(): sap.fe.test.api.HeaderAssertions;
          /**
           * Returns a {@link sap.fe.test.api.TableAssertions} instance for the specified table.
           */
          onTable(
            /**
             * The identifier of the table, or its header title
             */
            vTableIdentifier: string | sap.fe.test.api.TableIdentifier
          ): sap.fe.test.api.TableAssertions;
        }
        const assertions: assertions;
      }

      namespace TemplatePage {
        /**
         * TemplatePage actions
         */
        interface actions {
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Action })`.
           */
          onActionDialog(): sap.fe.test.api.DialogActions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Confirmation })`.
           */
          onConfirmationDialog(): sap.fe.test.api.DialogActions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Create })`.
           */
          onCreateDialog(): sap.fe.test.api.DialogCreateActions;
          /**
           * Returns a {@link sap.fe.test.api.DialogActions} instance.
           */
          onDialog(
            /**
             * The identifier of the dialog, or its title
             */
            vDialogIdentifier: string | sap.fe.test.api.DialogIdentifier
          ): sap.fe.test.api.DialogActions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Error })`.
           */
          onErrorDialog(): sap.fe.test.api.DialogActions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Message })`.
           */
          onMessageDialog(): sap.fe.test.api.DialogMessageActions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.ValueHelp })`.
           */
          onValueHelpDialog(): sap.fe.test.api.DialogValueHelpActions;
        }
        const actions: actions;

        /**
         * Assertions that are available to all template pages used in SAP Fiori elements.
         */
        interface assertions {
          /**
           * Confirms the visibility of the current page.
           */
          iSeeThisPage(): object;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Action })`.
           */
          onActionDialog(): sap.fe.test.api.DialogAssertions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Confirmation })`.
           */
          onConfirmationDialog(): sap.fe.test.api.DialogAssertions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Create })`.
           */
          onCreateDialog(): sap.fe.test.api.DialogCreateAssertions;
          /**
           * Returns a {@link sap.fe.test.api.DialogAssertions} instance.
           */
          onDialog(
            /**
             * The identifier of the dialog, or its title
             */
            vDialogIdentifier: string | sap.fe.test.api.DialogIdentifier
          ): sap.fe.test.api.DialogAssertions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Error })`.
           */
          onErrorDialog(): sap.fe.test.api.DialogAssertions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.Message })`.
           */
          onMessageDialog(): sap.fe.test.api.DialogMessageAssertions;
          /**
           * Shortcut for ` onDialog({ type: sap.fe.test.api.DialogType.ValueHelp })`.
           */
          onValueHelpDialog(): sap.fe.test.api.DialogValueHelpAssertions;
        }
        const assertions: assertions;
      }

      /**
       * All common actions (`When`) for all Opa tests are defined here.
       */
      class BaseActions extends sap.ui.test.Opa5 {
        /**
         * Constructs a new {@link sap.fe.test.Opa5} instance.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.fe.test.BaseActions with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.Opa5.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.fe.test.BaseActions>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.fe.test.BaseActions.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Closes the open popover via function.
         *
         * NOTE: This function ensures that a certain UI state is maintained in some exceptional cases. This function
         * isn't usually called directly in a journey.
         */
        iClosePopover(): object;
        /**
         * Simulates the pressing of the Esc key for the element in focus.
         */
        iPressEscape(): object;
      }
      /**
       * All common arrangements (`Given`) for all Opa tests are defined here.
       */
      class BaseArrangements extends sap.ui.test.Opa5 {
        /**
         * Constructs a new {@link sap.fe.test.Opa5} instance.
         */
        constructor(
          /**
           * The settings object required for launching the application
           */
          mSettings: {
            /**
             * The URL to the launching page (usually a FLP.html)
             */
            launchUrl: string;
            /**
             * The URL launch parameters
             */
            launchParameters: object;
          }
        );

        /**
         * Creates a new subclass of class sap.fe.test.BaseArrangements with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.Opa5.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.fe.test.BaseArrangements>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.fe.test.BaseArrangements.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Resets the test data.
         */
        iResetTestData(): object;
        /**
         * Simulates a refresh of the page by tearing it down and then restarting it with the very same hash.
         */
        iRestartMyApp(): object;
        /**
         * Starts the app in an IFrame, using the `launchUrl` and `launchParameters` provided via the settings object
         * of the {@link sap.fe.test.BaseArrangements#constructor}.
         */
        iStartMyApp(
          /**
           * The app hash
           */
          sAppHash?: string,
          /**
           * A map with additional URL parameters
           */
          mUrlParameters?: object
        ): object;
        /**
         * Tears down the current application.
         */
        iTearDownMyApp(): object;
        /**
         * Clears the browser's local storage and session storage.
         *
         * NOTE: The function itself is not meant to be called directly within a journey. Instead, it can be overwritten
         * to add custom clean-up functionality when calling {@link sap.fe.test.BaseArrangements#iResetTestData}.
         */
        resetTestData(): object;
      }
      /**
       * All common assertions (`Then`) for all Opa tests are defined here.
       */
      class BaseAssertions extends sap.ui.test.Opa5 {
        /**
         * Constructs a new {@link sap.fe.test.Opa5} instance.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.fe.test.BaseAssertions with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.test.Opa5.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.fe.test.BaseAssertions>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.fe.test.BaseAssertions.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Checks whether a {@link sap.m.MessagePage} with given message is shown.
         */
        iSeeMessagePage(
          /**
           * The message shown on the message page
           */
          sMessage: string
        ): object;
        /**
         * Checks whether a {@link sap.m.MessageToast} with the given text is shown.
         */
        iSeeMessageToast(
          /**
           * The text shown in the MessageToast
           */
          sText: string
        ): object;
      }
      /**
       * A JourneyRunner for executing integration tests with given settings.
       */
      class JourneyRunner extends sap.ui.base.Object {
        /**
         * Constructs a new JourneyRunner instance.
         */
        constructor(
          /**
           * The settings object
           */
          mSettings?: {
            /**
             * The available Opa pages
             */
            pages?: object;
            /**
             * The Opa configuration applied via {@link sap.ui.test.Opa5#sap.ui.test.Opa5.extendConfig}
             */
            opaConfig?: object;
            /**
             * The URL to the launching page (usually a FLP.html)
             */
            launchUrl?: string;
            /**
             * The URL launch parameters
             */
            launchParameters?: object;
            /**
             * If false (default), only one JourneyRunner is executed at a time
             */
            async?: boolean;
          }
        );

        /**
         * Creates a new subclass of class sap.fe.test.JourneyRunner with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.fe.test.JourneyRunner>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns the base action instance to be used for {@link sap.ui.test.Opa5#sap.ui.test.Opa5.extendConfig}
         * `actions` setting.
         *
         * This function is only used if `actions` is not defined via the runner settings. It is meant to be overridden
         * by a custom JourneyRunner implementation to provide custom base actions.
         *
         * By default, an instance of {@link sap.fe.test.BaseActions} will be returned.
         */
        getBaseActions(
          /**
           * The settings object of the runner instance
           */
          mSettings: object
        ): sap.ui.test.Opa;
        /**
         * Returns the base arrangements instance to be used for {@link sap.ui.test.Opa5#sap.ui.test.Opa5.extendConfig}
         * `arrangements` setting.
         *
         * This function is only used if `arrangements` is not defined via the runner settings. It is meant to be
         * overridden by a custom JourneyRunner implementation to provide custom base assertions.
         *
         * By default, an instance of {@link sap.fe.test.BaseArrangements} will be returned.
         */
        getBaseArrangements(
          /**
           * The settings object of the runner instance
           */
          mSettings: object
        ): sap.ui.test.Opa;
        /**
         * Returns the base assertions instance to be used for {@link sap.ui.test.Opa5#sap.ui.test.Opa5.extendConfig}
         * `assertions` setting.
         *
         * This function is only used if `assertions` is not defined via the runner settings. It is meant to be
         * overridden by a custom JourneyRunner implementation to provide custom base assertions.
         *
         * By default, an instance of {@link sap.fe.test.BaseAssertions} will be returned.
         */
        getBaseAssertions(
          /**
           * The settings object of the runner instance
           */
          mSettings: object
        ): sap.ui.test.Opa;
        /**
         * Gets the global journey runner instance.
         */
        static getDefaultRunner(): object;
        /**
         * Returns a metadata object for class sap.fe.test.JourneyRunner.
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Executes the journeys in the given order.
         *
         * The settings provided as first parameter are merged into the base settings of the JourneyRunner instance.
         */
        run(
          /**
           * The settings object for the tests to run. Overrides instance settings
           */
          mSettings: {
            /**
             * The available Opa pages
             */
            pages?: object;
            /**
             * The Opa configuration applied via {@link sap.ui.test.Opa5#sap.ui.test.Opa5.extendConfig}
             */
            opaConfig?: object;
            /**
             * The URL to the launching page (usually a FLP.html)
             */
            launchUrl?: string;
            /**
             * The URL launch parameters
             */
            launchParameters?: object;
            /**
             * If false (default), only one JourneyRunner is executed at a time
             */
            async?: boolean;
          },
          /**
           * The journeys to be executed. If a journey is represented as a string, it will be interpreted as a module
           * path to the file that should be loaded. Else it is expected to be a function
           */
          vJourneys: Array<() => void> | string[]
        ): object;
        /**
         * Static function to run the default runner with given parameters. Shortcut for
         * ```javascript
         * JourneyRunner.getDefaultRunner().run(mSettings, Journey1, Journey2, ...)```
         *  See {@link sap.fe.test.JourneyRunner#run} for parameter details.
         */
        static run(): void;
        /**
         * Executes the journeys in the given order.
         *
         * The settings provided as first parameter are merged into the base settings of the JourneyRunner instance.
         */
        run(
          /**
           * The journeys to be executed. If a journey is represented as a string, it will be interpreted as a module
           * path to the file that should be loaded. Else it is expected to be a function
           */
          vJourneys: Array<() => void> | string[]
        ): object;
        /**
         * Sets the global journey runner instance.
         */
        static setDefaultRunner(
          /**
           * Defines the global default {@link sap.fe.test.JourneyRunner} instance
           */
          oDefaultRunner: sap.fe.test.JourneyRunner
        ): void;
      }
      /**
       * Provides a test page definition for a list report page with the corresponding parameters.
       *
       * Sample usage:
       * ```javascript
       *
       * var oListReportDefinition = new ListReport({ appId: "MyApp", componentId: "MyListReportId", entitySet: "MyEntitySet" });
       * ```
       */
      class ListReport extends sap.fe.test.TemplatePage {
        /**
         * Constructs a new ListReport definition.
         */
        constructor(
          /**
           * The required parameters
           */
          oPageDefinition: {
            /**
             * The app id (defined in the manifest root)
             */
            appId: string;
            /**
             * The component id (defined in the target section for the list report within the manifest)
             */
            componentId: string;
            /**
             * The entitySet (optional)(defined in the settings of the corresponding target component within the manifest)
             */
            entitySet: string;
            /**
             * The contextPath (optional)(defined in the settings of the corresponding target component within the manifest)
             */
            contextPath: string;
          },
          /**
           * Additional custom page functions, provided in an object containing `actions` and `assertions`
           */
          ...aAdditionalPageDefinitions: object[]
        );
      }
      /**
       * Provides a test page definition for an object page with the corresponding parameters.
       *
       * Sample usage:
       * ```javascript
       *
       * var oObjectPageDefinition = new ObjectPage({ appId: "MyApp", componentId: "MyObjectPageId", entitySet: "MyEntitySet" });
       * ```
       */
      class ObjectPage extends sap.fe.test.TemplatePage {
        /**
         * Constructs a new ObjectPage instance.
         */
        constructor(
          /**
           * The required parameters
           */
          oPageDefinition: {
            /**
             * The app id (defined in the manifest root)
             */
            appId: string;
            /**
             * The component id (defined in the target section for the list report within the manifest)
             */
            componentId: string;
            /**
             * The entitySet (defined in the settings of the corresponding target component within the manifest)
             */
            entitySet: string;
            /**
             * The contextPath (optional)(defined in the settings of the corresponding target component within the manifest)
             */
            contextPath: string;
          },
          /**
           * Additional custom page functions, provided in an object containing `actions` and `assertions`
           */
          ...aAdditionalPageDefinitions: object[]
        );
      }
      /**
       * Provides a test page definition for the shell.
       *
       * When using {@link sap.fe.test.JourneyRunner}, this page is made available by default via `onTheShell`.
       */
      class Shell {
        /**
         * Constructs a test page definition for the shell.
         */
        constructor(
          /**
           * Additional custom page functions, provided in an object containing `actions` and `assertions`
           */
          ...aAdditionalPageDefinitions: object[]
        );

        /**
         * Navigates back via shell back button.
         */
        iNavigateBack(): object;
        /**
         * Navigates to the launch pad via home button.
         */
        iNavigateHome(): object;
        /**
         * Navigates via a navigation item in the shell's navigation menu.
         */
        iNavigateViaMenu(
          /**
           * The label of the navigation item
           */
          sItem: string
        ): object;
        /**
         * Opens the navigation menu in the shell header.
         */
        iOpenNavigationMenu(): object;
        /**
         * Selecting a tile in the launchpad by its target app, for example `iPressTile("SalesOrder-manage")`.
         */
        iPressTile(
          /**
           * The target application (hash)
           */
          sTarget: string
        ): object;
      }
      /**
       * Provides a test page definition for a template page with the corresponding parameters.
       */
      class TemplatePage {
        /**
         *
         */
        constructor();
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/fe/test/api/BaseAPI": undefined;

    "sap/fe/test/api/DialogActions": undefined;

    "sap/fe/test/api/DialogAssertions": undefined;

    "sap/fe/test/api/DialogCreateActions": undefined;

    "sap/fe/test/api/DialogCreateAssertions": undefined;

    "sap/fe/test/api/DialogMessageActions": undefined;

    "sap/fe/test/api/DialogMessageAssertions": undefined;

    "sap/fe/test/api/DialogType": undefined;

    "sap/fe/test/api/DialogValueHelpActions": undefined;

    "sap/fe/test/api/DialogValueHelpAssertions": undefined;

    "sap/fe/test/api/EditState": undefined;

    "sap/fe/test/api/FilterBarActions": undefined;

    "sap/fe/test/api/FilterBarAPI": undefined;

    "sap/fe/test/api/FilterBarAssertions": undefined;

    "sap/fe/test/api/FooterActionsBase": undefined;

    "sap/fe/test/api/FooterActionsOP": undefined;

    "sap/fe/test/api/FooterAssertionsBase": undefined;

    "sap/fe/test/api/FooterAssertionsOP": undefined;

    "sap/fe/test/api/FormActions": undefined;

    "sap/fe/test/api/FormAPI": undefined;

    "sap/fe/test/api/FormAssertions": undefined;

    "sap/fe/test/api/HeaderActions": undefined;

    "sap/fe/test/api/HeaderActionsLR": undefined;

    "sap/fe/test/api/HeaderAPI": undefined;

    "sap/fe/test/api/HeaderAssertions": undefined;

    "sap/fe/test/api/HeaderAssertionsLR": undefined;

    "sap/fe/test/api/TableActions": undefined;

    "sap/fe/test/api/TableAPI": undefined;

    "sap/fe/test/api/TableAssertions": undefined;

    "sap/fe/test/BaseActions": undefined;

    "sap/fe/test/BaseArrangements": undefined;

    "sap/fe/test/BaseAssertions": undefined;

    "sap/fe/test/JourneyRunner": undefined;

    "sap/fe/test/library": undefined;

    "sap/fe/test/ListReport": undefined;

    "sap/fe/test/ObjectPage": undefined;

    "sap/fe/test/Shell": undefined;

    "sap/fe/test/TemplatePage": undefined;
  }
}
