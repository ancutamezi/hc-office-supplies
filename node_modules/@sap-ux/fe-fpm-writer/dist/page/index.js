"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomPage = exports.validateCustomPageConfig = exports.getTemplateRoot = void 0;
const path_1 = require("path");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ejs_1 = require("ejs");
const defaults_1 = require("./defaults");
const validate_1 = require("../common/validate");
/**
 * Validate the UI5 version and if valid return the root folder for the templates to be used.
 *
 * @param ui5Version - optional minimum required UI5 version
 * @returns root folder  containg the templates if the version is supported otherwise throws an error
 */
function getTemplateRoot(ui5Version) {
    if (ui5Version === undefined || ui5Version >= 1.94) {
        return path_1.join(__dirname, '../../templates/page/1.94');
    }
    else {
        return path_1.join(__dirname, '../../templates/page/1.84');
    }
}
exports.getTemplateRoot = getTemplateRoot;
/**
 * Add a new route to the provided route array, and update existing routes if necessary (e.g. if targets are defined as arrays for FCL).
 *
 * @param routes existing application routes (from the manifest)
 * @param config configuration object
 */
function updateRoutes(routes, config) {
    var _a, _b;
    const newRoute = {
        name: `${config.entity}${config.name}`
    };
    if (config.navigation) {
        const sourceRoute = routes.find((route) => { var _a; return route.name === ((_a = config.navigation) === null || _a === void 0 ? void 0 : _a.sourcePage); });
        const pattern = {
            base: (_a = sourceRoute === null || sourceRoute === void 0 ? void 0 : sourceRoute.pattern) === null || _a === void 0 ? void 0 : _a.replace(':?query:', ''),
            navEntity: config.navigation.navEntity,
            navKey: config.navigation.navKey ? `({${config.navigation.navEntity}Key})` : ''
        };
        newRoute.pattern = `${pattern.base}/${pattern.navEntity}${pattern.navKey}:?query:`;
        if (((_b = sourceRoute === null || sourceRoute === void 0 ? void 0 : sourceRoute.target) === null || _b === void 0 ? void 0 : _b.constructor) === Array) {
            const pages = sourceRoute.target;
            // FCL only supports 3 columns, therefore, show the page in fullscreen if it is the 4th level of navigation
            newRoute.target =
                pages.length > 2
                    ? [newRoute.name]
                    : [...pages, newRoute.name];
        }
        else {
            newRoute.target = config.fcl ? [newRoute.name] : newRoute.name;
        }
    }
    else {
        newRoute.pattern = routes.length > 0 ? `${config.entity}:?query:` : ':?query:';
        newRoute.target = config.fcl ? [newRoute.name] : newRoute.name;
    }
    routes.push(newRoute);
}
/**
 * Validate the input parameters for the execution of generateCustomAction.
 *
 * @param {string} basePath - the base path
 * @param {CustomPage} config - the custom page configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function validateCustomPageConfig(basePath, config, fs) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    // common validators
    validate_1.validateVersion(config.ui5Version);
    if (!fs) {
        fs = mem_fs_editor_1.create(mem_fs_1.create());
    }
    validate_1.validateBasePath(basePath, fs);
    // validate config against the manifest
    const manifest = fs.readJSON(path_1.join(basePath, 'webapp/manifest.json'));
    if (config.navigation) {
        if (!((_c = (_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.targets) === null || _c === void 0 ? void 0 : _c[config.navigation.sourcePage])) {
            throw new Error(`Could not find navigation source ${config.navigation.sourcePage}!`);
        }
        const routes = {};
        if (((_f = (_e = (_d = manifest['sap.ui5']) === null || _d === void 0 ? void 0 : _d.routing) === null || _e === void 0 ? void 0 : _e.routes) === null || _f === void 0 ? void 0 : _f.constructor) === Array) {
            manifest['sap.ui5'].routing.routes.forEach((routeWithName) => {
                routes[routeWithName.name] = routeWithName;
            });
        }
        else {
            Object.assign(routes, (_j = (_h = (_g = manifest['sap.ui5']) === null || _g === void 0 ? void 0 : _g.routing) === null || _h === void 0 ? void 0 : _h.routes) !== null && _j !== void 0 ? _j : {});
        }
        const route = routes[(_k = config.navigation) === null || _k === void 0 ? void 0 : _k.sourcePage];
        if (!route || !route.pattern || !route.target) {
            throw new Error(`Missing or invalid routing configuration for navigation source ${config.navigation.sourcePage}!`);
        }
    }
    return fs;
}
exports.validateCustomPageConfig = validateCustomPageConfig;
/**
 * Add a custom page to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomPage} data - the custom page configuration
 * @param {Editor} [fs] - the memfs editor instance
 * @returns {Promise<Editor>} the updated memfs editor instance
 */
function generateCustomPage(basePath, data, fs) {
    fs = validateCustomPageConfig(basePath, data, fs);
    const manifestPath = path_1.join(basePath, 'webapp/manifest.json');
    const config = defaults_1.enhanceData(data, manifestPath, fs);
    // merge content into existing files
    const root = getTemplateRoot(data.ui5Version);
    // enhance manifest.json
    fs.extendJSON(manifestPath, JSON.parse(ejs_1.render(fs.read(path_1.join(root, `manifest.json`)), config)), (key, value) => {
        var _a;
        switch (key) {
            case 'routing':
                value.routes = (_a = value.routes) !== null && _a !== void 0 ? _a : [];
                break;
            case 'routes':
                updateRoutes(value, config);
                break;
            default:
                break;
        }
        return value;
    });
    // add extension content
    const viewPath = path_1.join(config.path, `${config.name}.view.xml`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl(path_1.join(root, 'ext/View.xml'), viewPath, config);
    }
    const controllerPath = path_1.join(config.path, `${config.name}.controller.js`);
    if (!fs.exists(controllerPath)) {
        fs.copyTpl(path_1.join(root, 'ext/Controller.js'), controllerPath, config);
    }
    return fs;
}
exports.generateCustomPage = generateCustomPage;
//# sourceMappingURL=index.js.map