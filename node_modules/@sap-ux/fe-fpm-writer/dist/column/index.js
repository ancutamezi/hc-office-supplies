"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomColumn = exports.getManifestRoot = void 0;
const ejs_1 = require("ejs");
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const defaults_1 = require("../common/defaults");
const validate_1 = require("../common/validate");
/**
 * Get the template folder for the given UI5 version.
 *
 * @param ui5Version required UI5 version.
 * @returns path to the template folder containing the manifest.json ejs template
 */
function getManifestRoot(ui5Version) {
    if (ui5Version === undefined || ui5Version >= 1.86) {
        return path_1.join(__dirname, '../../templates/column/1.86');
    }
    else if (ui5Version === 1.85) {
        return path_1.join(__dirname, '../../templates/column/1.85');
    }
    else {
        return path_1.join(__dirname, '../../templates/column/1.84');
    }
}
exports.getManifestRoot = getManifestRoot;
/**
 * Enhances the provided custom table column configuration with default data.
 *
 * @param {CustomTableColumn} data - a custom column configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(data, manifestPath, manifest) {
    // clone input and set defaults
    const config = Object.assign({}, data);
    defaults_1.setCommonDefaults(config, manifestPath, manifest);
    // set default event handler if it is to be created
    if (config.eventHandler === true) {
        config.eventHandler = `${config.ns}.${config.name}.onPress`;
    }
    // generate column content
    const content = config.properties && config.properties.length > 0
        ? `{=%{${config.properties.join("} + ' ' + %{")}}}`
        : 'Sample Text';
    config.content = config.control || defaults_1.getDefaultFragmentContent(content, config.eventHandler);
    return config;
}
/**
 * Add a custom column to an existing UI5 application.
 *
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 * @param {string} basePath - the base path
 * @param {CustomTableColumn} customColumn - the custom column configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 */
function generateCustomColumn(basePath, customColumn, fs) {
    validate_1.validateVersion(customColumn.ui5Version);
    if (!fs) {
        fs = mem_fs_editor_1.create(mem_fs_1.create());
    }
    validate_1.validateBasePath(basePath, fs);
    const manifestPath = path_1.join(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    const root = path_1.join(__dirname, '../../templates');
    // merge with defaults
    const completeColumn = enhanceConfig(customColumn, manifestPath, manifest);
    // add event handler if requested
    if (completeColumn.eventHandler) {
        fs.copyTpl(path_1.join(root, 'common/EventHandler.js'), path_1.join(completeColumn.path, `${completeColumn.name}.js`), completeColumn);
    }
    // enhance manifest with column definition
    const manifestRoot = getManifestRoot(customColumn.ui5Version);
    const filledTemplate = ejs_1.render(fs.read(path_1.join(manifestRoot, `manifest.json`)), completeColumn);
    fs.extendJSON(manifestPath, JSON.parse(filledTemplate));
    // add fragment
    const viewPath = path_1.join(completeColumn.path, `${completeColumn.name}.fragment.xml`);
    if (completeColumn.control || !fs.exists(viewPath)) {
        fs.copyTpl(path_1.join(root, 'common/Fragment.xml'), viewPath, completeColumn);
    }
    return fs;
}
exports.generateCustomColumn = generateCustomColumn;
//# sourceMappingURL=index.js.map