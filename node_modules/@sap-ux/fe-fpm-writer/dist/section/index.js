"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomSection = exports.getManifestRoot = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
/**
 * Get the template folder for the given UI5 version.
 *
 * @param root root path to templates folder.
 * @param ui5Version required UI5 version.
 * @returns path to the template folder containing the manifest.json ejs template
 */
function getManifestRoot(root, ui5Version) {
    let subFolder = '1.86';
    if (ui5Version !== undefined && ui5Version < 1.86) {
        // Old
        subFolder = '1.85';
    }
    return path_1.join(root, 'section', subFolder);
}
exports.getManifestRoot = getManifestRoot;
/**
 * Enhances the provided custom section configuration with additonal data.
 *
 * @param {CustomSection} data - a custom section configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(data, manifestPath, manifest) {
    const config = Object.assign({}, data);
    defaults_1.setCommonDefaults(config, manifestPath, manifest);
    // set default event handler if it is to be created
    if (config.eventHandler === true) {
        config.eventHandler = `${config.ns}.${config.name}.onPress`;
    }
    // generate section content
    config.content = config.control || defaults_1.getDefaultFragmentContent(config.name, config.eventHandler);
    return config;
}
/**
 * Add a custom section to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomSection} customSection - the custom section configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomSection(basePath, customSection, fs) {
    validate_1.validateVersion(customSection.ui5Version);
    if (!fs) {
        fs = mem_fs_editor_1.create(mem_fs_1.create());
    }
    validate_1.validateBasePath(basePath, fs);
    const manifestPath = path_1.join(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    const root = path_1.join(__dirname, '../../templates');
    // merge with defaults
    const completeSection = enhanceConfig(customSection, manifestPath, manifest);
    // add event handler if requested
    if (completeSection.eventHandler) {
        const controllerPath = path_1.join(completeSection.path, `${completeSection.name}.js`);
        if (!fs.exists(controllerPath)) {
            fs.copyTpl(path_1.join(root, 'common/EventHandler.js'), controllerPath, completeSection);
        }
    }
    // enhance manifest with section definition
    const manifestRoot = getManifestRoot(root, customSection.ui5Version);
    const filledTemplate = ejs_1.render(fs.read(path_1.join(manifestRoot, `manifest.json`)), completeSection);
    fs.extendJSON(manifestPath, JSON.parse(filledTemplate));
    // add fragment
    const viewPath = path_1.join(completeSection.path, `${completeSection.name}.fragment.xml`);
    if (!fs.exists(viewPath)) {
        fs.copyTpl(path_1.join(root, 'common/Fragment.xml'), viewPath, completeSection);
    }
    return fs;
}
exports.generateCustomSection = generateCustomSection;
//# sourceMappingURL=index.js.map